var raf = require('raf')
var interpolate = require('util/interpolate')
var InterpolateZoom = require('./interpolate-zoom')
var ease = require('eases/expo-in-out')
var vars = require('ui/vars')
var debug = require('debug')('animate:animate-graph')

module.exports = function (options, next, done) {
  debug('animateNodes', options)
  var oldNodes = options.oldNodes
  var currentNodes = options.currentNodes
  var currentLinks = options.currentLinks
  var interpolateZoom = InterpolateZoom(options.oldVector, options.currentVector)

  var start = null
  var oldIdToIndex = {}
  var enterNodes = []
  var transitionNodes = []
  var enterLinks = []
  var transitionLinks = []
  var nodeInterpolators = [] // 2-dimensional array of [node[x,y], ...] interpolate functions

  function interpolateNode (oldNode, currentNode) {
    var xInterpolate = interpolate(oldNode.x, currentNode.x)
    var yInterpolate = interpolate(oldNode.y, currentNode.y)
    var sizeInterpolate = (oldNode.w !== currentNode.w) ? interpolate(oldNode.w, currentNode.w) : null
    return [xInterpolate, yInterpolate, sizeInterpolate]
  }

  for (var i = 0, len = oldNodes.length; i < len; i++) {
    oldIdToIndex[oldNodes[i].id] = i
  }

  // sort nodes into those entering and transitioning
  for (var i = 0, len = currentNodes.length; i < len; i++) {
    var currentNode = currentNodes[i]
    if (typeof oldIdToIndex[currentNode.id] === 'number') {
      transitionNodes.push(currentNode)
    } else { enterNodes.push(currentNode) }
  }

  for (var i = 0, len = currentLinks.length; i < len; i++) {
    var currentLink = currentLinks[i]
    if (typeof oldIdToIndex[currentLink.source.id] === 'number' &&
      typeof oldIdToIndex[currentLink.target.id] === 'number') {
      transitionLinks.push(currentLink)
    } else { enterLinks.push(currentLink) }
  }

  debug('transitionNodes', transitionNodes)
  for (var i = 0, len = transitionNodes.length; i < len; i++) {
    var node = transitionNodes[i]
    var oldNode = oldNodes[oldIdToIndex[node.id]]
    nodeInterpolators.push(
      interpolateNode(oldNode, node)
    )
  }

  function tick (timeStamp) {
    var t0
    var t1
    if (start === null) start = timeStamp
    t0 = (timeStamp - start) / vars.transition.duration
    t1 = ease(t0)
    var nodes = []
    var transform = interpolateZoom ? interpolateZoom(t1) : null
    var result = {}


    for (var i = 0, len = transitionNodes.length; i < len; i++) {
      var interpolator = nodeInterpolators[i]
      var node = transitionNodes[i]
      node.y = interpolator[1](t1)
      node.x = interpolator[0](t1)
      if (interpolator[2]) {
        node.w = interpolator[2](t1)
        node.h = interpolator[2](t1)
      }

      nodes.push(node)
    }

    result.nodes = nodes

    if (transform) { result.vector = transform }

    next(result)
    if (t0 < 1) {
      debug('animate tick')
      raf(tick)
    } else {
      debug('finished transition')
      done({
        nodes: transitionNodes.concat(enterNodes),
        links: transitionLinks.concat(enterLinks),
        vector: options.currentVector || [0, 0, 1]
      })
    }
  }

  next({ links: transitionLinks }) // remove o ld links that do not transistion
  raf(tick)
}
