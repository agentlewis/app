var React = require('react')
var r = require('r-dom')

var Actions =   require('actions')

var debug = require('debug')('ui:index')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')
var Icon = require('./icons')
var style = require('./style')
var vars = require('ui/vars')

var FourOhFourPage = require('./404')

var UI = React.createClass({

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', nextProps)
    Actions.updateFilters(nextProps.model)
    Actions.routeChange({ route: nextProps.route, model: nextProps.model })
  },

  render: function () {
    debug('props, state', this.props, this.state)
    var route = this.props.route
    var actions = {}

    var props = extend(
      this.props,
      {
        updateTag: this.updateTag,
        Icon: Icon,
        style: style
      }
    )

    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props, route)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      debug('model, changing', model, val, this.state)
      Actions.updateFilters(model)
      Actions.modelUpdate({ route: this.props.route, model: model })
    }, this)
    Actions.updateFilters(this.props.model)
    Actions.routeChange({ route: this.props.route, model: this.props.model })
  },

  handleUpdateFilters: function () {
    //compute new graph
    //set state -> nodesAndLinks, filters


  }

})

module.exports = UI
