var React = require('react')
var r = require('r-dom')
var debug = require('debug')('ui:index')
var getDefaultRoleTypes = require('graph-view/get-default-role-types')
var getRoleTypes = require('graph-view/get-role-types')
var getUniLinkLabels = require('graph-view/get-uni-link-labels')
var getTagData = require('graph-view/get-tag-data')
var each = require('lodash.foreach')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var contains = require('lodash.contains')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')
var Icon = require('./icons')

var FourOhFourPage = require('./404')



module.exports = React.createClass({
  getInitialState: function () {
    debug('getInitialState:model.roles', this.props.model.roles)

    var initialState = {
      roleTypes: getRoleTypes(
        getDefaultRoleTypes(),
        this.props.model.roles
      ),
      linkLabels: getUniLinkLabels(this.props.model.relationshipGraph),
      tagData: getTagData(this.props.model.relationshipGraph)
    }

    return initialState
  },

  render: function () {
    var route = this.props.route

    debug('linkLabels', this.state.linkLabels)

    var props = extend(
      this.props,
      {
        tagData: this.state.tagData,
        roleTypes: this.state.roleTypes,
        linkLabels: this.state.linkLabels,
        updateActiveTag: this.updateActiveTag.bind(this),
        updateTag: this.updateTag.bind(this),
        Icon: Icon
      }
    )

    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      var nextRoleTypes = getRoleTypes(
        this.state.roleTypes,
        model.relationships
      )

      var nextLinkLabels = getUniLinkLabels(model.relationshipGraph)
      var tagData = getTagData(model.relationshipGraph)

      this.setState({
        tagData: tagData,
        roleTypes: nextRoleTypes,
        linkLabels: nextLinkLabels
      })

      this.forceUpdate()
    }, this)
  },

  // updateActiveTags: function (type, activeTags) {
  //   var tagObject = clone(this.state[type])
  //   debug('tagObject',  tagObject, type, activeTags)
  //   var newState = {}
  //
  //   each(tagObject, function (tagType, tagTypeId) {
  //     if (contains(activeTags, tagTypeId)) {
  //       tagType.active = true
  //     }
  //     else {
  //       tagType.active = false
  //     }
  //
  //   })
  //
  //   newState[type] = tagObject
  //   debug('newState', newState)
  //   this.setState(newState)
  // },

  updateActiveTag: function (type, newActiveTag) {
    var newState = {}
    var tagObject = clone(this.state[type])
    each(tagObject, function (tagType, tagTypeId) {
      if (newActiveTag === tagTypeId || newActiveTag === tagType.model.pluralName ) {
        tagType.active = true
      }
    })
    newState[type] = tagObject
    debug('newState', newState)
    this.setState(newState)
  },

  updateTag: function (type, id, bool) {
    var memo = type === 'triple' ? {} : []
    return function () {
      var tagData = clone(this.state.tagData, true)
      var tagCollection = reduce(tagData[type], function (memo, tag, ki) {
        debug('ki', ki)
        if (tag.id === id) tag.active = bool
        memo[ki]= tag
        return memo
      }, memo)
      tagData[type] = tagCollection
      this.setState({ tagData: tagData })
    }.bind(this)






    // return function () {
    //   var newState = {}
    //   var tagObject = clone(this.state[type])
    //   each(tagObject, function (tagType, tagTypeId) {
    //     if (tag === tagTypeId || tag === tagType.model.pluralName ) {
    //       tagType.active = false
    //     }
    //   })
    //   newState[type] = tagObject
    //   this.setState(newState)
    // }.bind(this)
  }

})
