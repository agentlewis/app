var React = require('react')
var r = require('r-dom')
var debug = require('debug')('ui:index')
var getDefaultRoleTypes = require('graph-view/get-default-role-types')
var getRoleTypes = require('graph-view/get-role-types')
var getUniLinkLabels = require('graph-view/get-uni-link-labels')
var each = require('lodash.foreach')
var clone = require('lodash.clone')
var contains = require('lodash.contains')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')

var FourOhFourPage = require('./404')

module.exports = React.createClass({
  getInitialState: function () {
    debug('getInitialState:model.roles', this.props.model.roles)

    var initialState = {
      roleTypes: getRoleTypes(
        getDefaultRoleTypes(),
        this.props.model.roles
      ),
      linkLabels: getUniLinkLabels(this.props.model.relationshipGraph)
    }

    return initialState
  },

  render: function () {
    var route = this.props.route

    debug('linkLabels', this.state.linkLabels)

    var props = extend(
      this.props,
      {
        roleTypes: this.state.roleTypes,
        linkLabels: this.state.linkLabels,
        updateActiveTags: this.updateActiveTags.bind(this)
      }
    )

    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      var nextRoleTypes = getRoleTypes(
        this.state.roleTypes,
        model.relationships
      )

      var nextLinkLabels = getUniLinkLabels(model.relationshipGraph)

      this.setState({
        roleTypes: nextRoleTypes,
        linkLabels: nextLinkLabels
      })

      this.forceUpdate()
    }, this)
  },

  updateActiveTags: function (type, activeTags) {
    var tagObject = clone(this.state[type])
    debug('tagObject', this.state, tagObject)
    var newState = {}

    each(tagObject, function (tagType, tagTypeId) {
      if (contains(activeTags, tagTypeId)) {
        tagType.active = true
      }
      else {
        tagType.active = false
      }

    })

    newState[type] = tagObject
    this.setState(newState)
  }
})
