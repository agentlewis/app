var React = require('react')
var r = require('r-dom')
var debug = require('debug')('ui:index')
var getDefaultRoleTypes = require('graph-view/get-default-role-types')
var getRoleTypes = require('graph-view/get-role-types')
var getUniLinkLabels = require('graph-view/get-uni-link-labels')
var each = require('lodash.foreach')
var clone = require('lodash.clone')
var contains = require('lodash.contains')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')
var IconFactory = require('react-icon-factory')

var FourOhFourPage = require('./404')

var Icon = IconFactory({
  'star-outline': r.g([
    r.path(
      { d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z" }
    )
  ]),
  'triangle-outline': r.g([
    r.path({ d: "M3 4l9 16 9-16h-18zm3.38 2h11.25l-5.63 10-5.62-10z" }
    )
  ]),
  'square-outline': r.g([
    r.path(
      { d:"M18 4h-12c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-12c0-1.1-.9-2-2-2zm0 14h-12v-12h12v12z" }
    )
  ]),
  'circle-outline': r.g([
    r.path(
      { d:"M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" }
    )
  ]),
  'cancel-circle': r.g([
    r.circle(
      { cx: 12, cy: 12, r: 12, fill: "#d04437"}
    ),
    // r.path(
    //   { d: "M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zM12 21.75c-5.385 0-9.75-4.365-9.75-9.75s4.365-9.75 9.75-9.75 9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75z" }
    // ),
    r.path(
      { d: "M15.75 6l-3.75 3.75-3.75-3.75-2.25 2.25 3.75 3.75-3.75 3.75 2.25 2.25 3.75-3.75 3.75 3.75 2.25-2.25-3.75-3.75 3.75-3.75z" }
    ),
  ])
})


module.exports = React.createClass({
  getInitialState: function () {
    debug('getInitialState:model.roles', this.props.model.roles)

    var initialState = {
      roleTypes: getRoleTypes(
        getDefaultRoleTypes(),
        this.props.model.roles
      ),
      linkLabels: getUniLinkLabels(this.props.model.relationshipGraph)
    }

    return initialState
  },

  render: function () {
    var route = this.props.route

    debug('linkLabels', this.state.linkLabels)

    var props = extend(
      this.props,
      {
        roleTypes: this.state.roleTypes,
        linkLabels: this.state.linkLabels,
        updateActiveTag: this.updateActiveTag.bind(this),
        clearTag: this.clearTag.bind(this),
        Icon: Icon
      }
    )

    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      var nextRoleTypes = getRoleTypes(
        this.state.roleTypes,
        model.relationships
      )

      var nextLinkLabels = getUniLinkLabels(model.relationshipGraph)

      this.setState({
        roleTypes: nextRoleTypes,
        linkLabels: nextLinkLabels
      })

      this.forceUpdate()
    }, this)
  },

  // updateActiveTags: function (type, activeTags) {
  //   var tagObject = clone(this.state[type])
  //   debug('tagObject',  tagObject, type, activeTags)
  //   var newState = {}
  //
  //   each(tagObject, function (tagType, tagTypeId) {
  //     if (contains(activeTags, tagTypeId)) {
  //       tagType.active = true
  //     }
  //     else {
  //       tagType.active = false
  //     }
  //
  //   })
  //
  //   newState[type] = tagObject
  //   debug('newState', newState)
  //   this.setState(newState)
  // },

  updateActiveTag: function (type, newActiveTag) {
    var newState = {}
    var tagObject = clone(this.state[type])
    each(tagObject, function (tagType, tagTypeId) {
      if (newActiveTag === tagTypeId || newActiveTag === tagType.model.pluralName ) {
        tagType.active = true
      }
    })
    newState[type] = tagObject
    debug('newState', newState)
    this.setState(newState)
  },

  clearTag: function (type, tag) {
    return function () {
      var newState = {}
      var tagObject = clone(this.state[type])
      each(tagObject, function (tagType, tagTypeId) {
        if (tag === tagTypeId || tag === tagType.model.pluralName ) {
          tagType.active = false
        }
      })
      newState[type] = tagObject
      this.setState(newState)
    }.bind(this)
  }

})
