var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')

var Actions = require('actions')
var routeStore = require('stores/route-store')
var router = require('router')

var debug = require('debug')('ui:index')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')
var Icon = require('./icons')
var style = require('./style')

var ThemeManager = require('material-ui/lib/styles/theme-manager')
var themeManager = new ThemeManager
var LightTheme = require('./light-theme')
themeManager.setTheme(LightTheme)

var FourOhFourPage = require('./404')

var UI = React.createClass({

  mixins: [
    Reflux.listenTo(routeStore, 'onRouteUpdate')
  ],

  propTypes: {
    route: React.PropTypes.object,
    model: React.PropTypes.object
  },

  childContextTypes: {
    muiTheme: React.PropTypes.object
  },

  getChildContext: function () {
    return {
      muiTheme: themeManager.getCurrentTheme()
    }
  },

  onRouteUpdate: function (payload) {
    if (payload.route) { this.navigate(payload.route) }
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', nextProps)
    Actions.routeChange({ route: nextProps.route, model: nextProps.model })
  },

  render: function () {
    debug('props, state', this.props, this.state)
    var route = this.props.route

    var props = extend(
      this.props,
      {
        updateTag: this.updateTag,
        Icon: Icon,
        style: style
      }
    )

    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props, route)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      debug('model, changing', model, val, this.state)
      Actions.modelUpdate({ route: this.props.route, model: model })
    }, this)
    Actions.routeChange({ route: this.props.route, model: this.props.model })
  },

  navigate: router.navigate.bind(router)

})

module.exports = UI
