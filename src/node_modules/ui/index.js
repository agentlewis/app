var React = require('react')
var r = require('r-dom')
var debug = require('debug')('ui:index')
var each = require('lodash.foreach')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var contains = require('lodash.contains')
var types = require('types')
var Layout = require('layout')
var extend = require('xtend')
var Icon = require('./icons')
var style = require('./style')
var getOptions = require('graph-view/get-options')

var FourOhFourPage = require('./404')

module.exports = React.createClass({
  getInitialState: function () {
    var filtersByType  = this.props.model.filtersByType
    var filtersSet = (filtersByType.context.length > 0 || filtersByType.targetAgent.length > 0)

    var initialState = {
      filtersByType: filtersSet ? this.props.model.filtersByType : null,
      id: this.props.model ? this.props.model.getId() : null,
      nodes: null //registry for node positions
    }

    return initialState
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', nextProps)
    var filtersSet = (nextProps.model.filtersByType.context.length > 0 || nextProps.model.filtersByType.targetAgent.length > 0)

    if (nextProps.model && nextProps.model.getId() !== this.state.id && filtersSet) {
      this.setState({ filtersByType: nextProps.model.filtersByType, id: nextProps.model.getId() })
    }
    else if (nextProps.model && !this.state.filtersByType) {
      this.setState({ filtersByType: nextProps.model.filtersByType})
    }

  },

  render: function () {
    var route = this.props.route
    var actions = {
      setNodeMap: this.setNodeMap.bind(this)
    }

    var props = extend(
      this.props,
      {
        actions: actions,
        nodes: this.state.nodes,
        filtersByType: this.state.filtersByType,
        updateTag: this.updateTag.bind(this),
        Icon: Icon,
        style: style
      }
    )



    var Page
    if (route) {
      Page = types.indexedByCollection[route.collection].Page
    } else {
      Page = FourOhFourPage
    }

    debug('render', props, route)
    return (
      r(Layout, props,
        r(Page, props)
      )
    )
  },

  componentDidMount: function () {
    this.props.model.on('change', function (model, val) {
      var filtersByType  = model.filtersByType
      var filtersSet = (filtersByType.context.length > 0 || filtersByType.targetAgent.length > 0)


      this.setState({
        filtersByType: filtersSet ? filtersByType : null,
      })

      this.forceUpdate()
    }, this)
  },

  updateTag: function (type, id, bool) {
    var memo = type === 'triple' ? {} : []
    return function () {
      debug('updateTag', type, id, bool)
      var tagData = clone(this.state.tagData, true)
      var tagCollection = reduce(tagData[type], function (memo, tag, ki) {
        debug('ki', ki)
        if (tag.id === id) tag.active = bool
        memo[ki]= tag
        return memo
      }, memo)
      tagData[type] = tagCollection
      debug('tagData', tagData)
      this.setState({ tagData: tagData })
    }.bind(this)
  },

  setNodeMap: function (nodes) {
    debug('setnodeMap', nodes)
    this.setState({ nodes: nodes })
  }



})
