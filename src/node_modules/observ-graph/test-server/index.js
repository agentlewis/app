var test = require('tape')
var extend = require('xtend')
var Observ = require('observ')
var createType = require('observ-type')
var ObservGraph = require('../')

test('model', function (t) {
  var types = {
    Thing: createType({
      type: 'Thing',
      plural: 'things',
      props: {
        name: Observ(),
      },
    }),
  }
  var things = ObservGraph({
    types: types,
  })
  var human = {
    type: 'Thing',
    name: 'human',
  }
  things.insert(human)
  t.equal(things.getLength(), 1)
  var humanObserv = things.get(0)
  t.e
  t.end()
})

test('type attribute', function (t) {
  var types = {
    Thing: createType({
      type: 'Thing',
      plural: 'things',
      props: {
        name: Observ(),
      },
    }),
  }
  var things = ObservGraph({
    types: types,
    typeAttribute: '@type',
  })
  var thing = {
    '@type': 'Thing',
    name: 'human',
  }
  things.insert(thing)
  t.equal(things.getLength(), 1)
  t.deepEqual(things.get(0)(), thing)
  t.end()
})

/*
test('relations', function (t) {
  var Roles = createGraph({
    name: 'roles'
    types: {
      Role: {
        props: {
          agentId: Observ(),
        },
      },
    },
    relations: {
      belongsTo: {
        post: {
          graphName: 'posts',
          field: 'postId'
        },
      },
    },
  })
    Post: {
      props: {
        title: Observ(),
      }
    }

})

test('relations', function (t) {
  var Space = createType({
    props: {
      id: Observ(),
    },
  })

  agentType.$roles = map(context.atom.$roles, function (role) {
    if (role.$agent.$id() === agentType.$id()) {
      return role
    }
  })

  agentType.$relationships = map(agentType.$roles, function (role) {
    return role.relationship
  })
})
*/

test('type stores', function (t) {

  var Thing = createType({
    type: 'Thing',
    plural: 'things',
    props: {
      name: Observ(),
    },
  })

  var Agent = createType({
    extend: Thing,
    type: 'Agent',
    plural: 'agents',
    props: {
      description: Observ(),
    },
  })


  var agent = {
    id: 'dinosaur',
    type: 'Agent',
    name: 'Mikey',
    description: 'a human from planet Earth.',
  }

  var thing = {
    type: 'Thing',
    name: 'bicycle',
  }

  var graph = ObservGraph({
    types: {
      Agent: Agent,
      Thing: Thing,
    },
  })

  t.equal(graph.getLength(), 0)

  graph.push(thing)
  graph.push(agent)

  process.nextTick(function () {
    t.equal(graph.getLength(), 2)
    t.equal(graph.things.getLength(), 2)
    t.equal(graph.agents.getLength(), 1)

    t.deepEqual(graph.get(0)(), thing)
    t.deepEqual(graph.get(1)(), agent)
    t.deepEqual(graph.agents.get(0)(), agent)
    t.deepEqual(graph.things.get(0)(), thing)
    t.deepEqual(graph.things.get(1)(), agent)

    t.end()
  })
})

test('views', function (t) {
  var Thing = createType({
    type: 'Thing',
    plural: 'things',
    props: {
      name: Observ(),
      ownerId: Observ(),
    },
  })

  var Agent = createType({
    extend: Thing,
    type: 'Agent',
    plural: 'agents',
    props: {
      id: Observ(),
      description: Observ(),
    },
    views: {
      things: function (graph) {
        var id = this.get('id')()
        return mapGraph(graph.things, function (thing) {
          if (thing.get('ownerId')() === id) {
            return thing
          }
        })
      }
    },
  })

  var graph = ObservGraph({
    types: {
      Agent: Agent,
      Thing: Thing,
    },
  })

  var agent = {
    id: 'dinosaur',
    type: 'Agent',
    name: 'Mikey',
    description: 'a human from planet Earth.',
  }
  var thing = {
    type: 'Thing',
    name: 'bicycle',
    ownerId: agent.id,
  }

  graph.push(thing)
  graph.push(agent)

  t.deepEqual(
    graph.agents.get(0)(),
    extend(agent, {
      things: [
        graph.things.get(0),
      ],
    })
  )
  t.deepEqual(
    graph.agents.get(0).get('things').get(0)(),
    thing
  )

  t.end()
})
