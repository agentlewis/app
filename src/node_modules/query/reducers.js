import testState from 'state'
import { agentsById } from 'agent/getters'
import { queryTypesByAgentId } from 'query-type/getters'
import filter from 'lodash.filter'
import map from 'lodash.map'
import omit from 'lodash.omit'
import some from 'lodash.some'
import _ from 'lodash'

// omit
function dedupPersonQueryTypes (queryTypes) {
  return function (queryType) {
    return some(queryTypes, qt => {
      return qt.relationshipType === queryType.relationshipType &&
        qt.direction === 'source' && queryType.direction === 'target'
    })
  }
}

function reduceGroupQueryTypes (queryTypes) {
  return function (queryType, key) {
    return key === 'includes/group/target'
      || 'is-member-of/group/target'
      || (key === 'is-member-of/person/target' &&
        !queryTypes['is-member-of/group/target'])
  }
}



function queryReducer (state = testState, action) {
  const agentId = action.payload
  if (action.type === 'AGENT_GRAPH' && state.graph.queries.length === 0) {
    // queries empty -> default queries
    let agent = agentsById(state)[agentId]
    let queryTypes = queryTypesByAgentId(state)[agentId]

    if (agent.type === 'Person') {
      return  _(queryTypes)
        .omit(dedupPersonQueryTypes(queryTypes))
        .value()
    } else {
      return _(queryTypes)
        .filter(reduceGroupQueryTypes(queryTypes))
        .value()

    }
  }

  return state.queries
}

export default queryReducer
