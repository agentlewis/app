const createGraph = require('ngraph.graph')
const updateGraph = require('./update-graph')
const iterateLayout = require('./iterate-layout')
const mapValues = require('lodash.mapvalues')
const testState = require('state')
const debug = require('debug')('graph:reducers')
const each = require('lodash.foreach')
const extend = require('xtend')
const ITERATIONS = 50


import { relationshipsByAgentId } from 'relationship/getters'
import { agentsById } from 'agent/getters'
import queryReducer from 'query/reducers'
import some from 'lodash.some'
import Cola from 'webcola'
// import Adaptor from './webcola-adaptor'


function matchQuery(relationship, queries, agentId) {
  return some(queries, query => {
    return relationship.type === query.relationshipType &&
      relationship[query.direction] === agentId
  })
}


const Layout = (state, action, queries) => {
  let agents = agentsById(state)
  let nodeToIndex = {}
  let nodes = []
  let links = []
  let layout = new Cola.Layout()

  each(relationshipsByAgentId(state)[action.payload], relationship => {
    if (matchQuery(relationship, queries, action.payload)) {
      ;['source', 'target'].forEach(direction => {
        if (!nodeToIndex[relationship[direction]]) {
          nodeToIndex[relationship[direction]] = nodes.length
          nodes.push(agents[relationship[direction]])
        }
      })
      links.push(extend(relationship, {
        source: nodeToIndex[relationship.source],
        target: nodeToIndex[relationship.target]
      }))
    }
  })

  layout.nodes(nodes)
  layout.links(links)
  layout.start()

  return layout
}



export const graphReducer = (state = testState, action) => {
  if (action.type === 'AGENT_GRAPH') {
    let queries = queryReducer(state, action)
    let layout = Layout(state, action, queries)

    debug('layout', layout)

    return {
      queries,
      layout
    }

  } else {
    return state.graph
  }

}

// const Graph = (state, action, queries) => {
//   let graph = createGraph()
//   let agents = agentsById(state)
//   let nodeToIndex = {}
//   let nodes = []
//   let links = []
//   let layout = new Cola.Layout()
//   // cola.Layout.prototype.links(mapValues)
//
//   graph.beginUpdate()
//
//   each(relationshipsByAgentId(state)[action.payload], relationship => {
//     if (matchQuery(relationship, queries, action.payload)) {
//       ;['source', 'target'].forEach(direction => {
//         if (!nodeToIndex[relationship[direction]]) {
//           nodeToIndex[relationship[direction]] = nodes.length
//           nodes.push(agents[relationship[direction]])
//         }
//       })
//       links.push(extend(relationship, {
//         source: nodeToIndex[relationship.source],
//         target: nodeToIndex[relationship.target]
//       }))
//       graph.addLink(relationship.source, relationship.target, relationship)
//     }
//   })
//
//   layout.nodes(nodes)
//   layout.links(links)
//
//
//   layout.start()
//
//   let n = layout.nodes()
//   debug(n)
//
//
//     debug('nodes', nodes)
//     debug('links', links)
//     debug('nodeToIndex', nodeToIndex)
//
//   graph.forEachNode(node => {
//     graph.addNode(node.id, agents[node.id])
//   })
//
//   graph.endUpdate()
//   return graph
// }
