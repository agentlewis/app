// const createGraph = require('ngraph.graph')
// const updateGraph = require('./update-graph')
// const iterateLayout = require('./iterate-layout')
const mapValues = require('lodash.mapvalues')
const testState = require('state')
const debug = require('debug')('graph:reducers')
const each = require('lodash.foreach')
const extend = require('xtend')
const ITERATIONS = 50


import { AGENT_GRAPH, GRAPH_TICK, GRAPH_START } from 'action-types'
import { relationshipsByAgentId } from 'relationship/getters'
import { agentsById } from 'agent/getters'
import queryReducer from 'query/reducers'
import some from 'lodash.some'
import Cola from 'webcola'
// import Adaptor from './webcola-adaptor'


const matchQuery = (relationship, queries, agentId) => {
  return some(queries, query => {
    return relationship.type === query.relationshipType &&
      relationship[query.direction] === agentId
  })
}



const Layout = (state, action, queries) => {
  let agents = agentsById(state)
  let nodeToIndex = {}
  let nodes = []
  let links = []
  let layout = new Cola.Layout()

  each(relationshipsByAgentId(state)[action.payload], relationship => {
    if (matchQuery(relationship, queries, action.payload)) {
      ;['source', 'target'].forEach(direction => {
        if (!nodeToIndex[relationship[direction]]) {
          nodeToIndex[relationship[direction]] = nodes.length
          nodes.push(agents[relationship[direction]])
        }
      })
      links.push(extend(relationship, {
        source: nodeToIndex[relationship.source],
        target: nodeToIndex[relationship.target]
      }))
    }
  })

  layout.nodes(nodes)
  layout.links(links)
  layout.link

  return layout
}

const agentGraph = (state, action) => {
  let queries = queryReducer(state, action)
  let layout = Layout(state, action, queries)
  layout.jaccardLinkLengths(100)
  let nodes = layout.nodes()
  let updatingLayout = false

  debug('layout', layout)
  return {
    queries,
    layout,
    nodes,
    updatingLayout
  }
}

const startLayoutUpdate = (state, action) => {
  debug('startLayoutUpdate')
  return {
   ...state.graph,
   updatingLayout: true
  }
}

const onGraphTick = (state, action) => {
  // debug('onGraphTick', state.graph.layout.nodes())
  return {
    ...state.graph,
    nodes: state.graph.layout.nodes()
  }
}

const graphReducers = {}
graphReducers[AGENT_GRAPH] = agentGraph
graphReducers[GRAPH_START] = startLayoutUpdate
graphReducers[GRAPH_TICK] = onGraphTick

export const graphReducer = (state = testState, action) => {
  if (!graphReducers[action.type]) {
    return state.graph
  } else {
    return graphReducers[action.type](state, action)
  }
}
