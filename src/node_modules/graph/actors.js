import { graphTick, graphStart, graphEnd } from './action-creators'
import Cola from 'webcola'
// import Adaptor from './webcola-adaptor'

const ITERATIONS = 200
const width = 960
const height = 500
const debug = require('debug')('graph:actors')

const testData = ï»¿{
    "nodes":[
      {"name":"a","width":60,"height":40},
      {"name":"b","width":60,"height":40},
      {"name":"c","width":60,"height":40},
      {"name":"d","width":60,"height":40},
      {"name":"e","width":60,"height":40},
      {"name":"f","width":60,"height":40},
      {"name":"g","width":60,"height":40}
    ],
    "links":[
      {"source":1,"target":2},
      {"source":2,"target":3},
      {"source":3,"target":4},
      {"source":0,"target":1},
      {"source":2,"target":0},
      {"source":3,"target":5},
      {"source":0,"target":5}
    ],
	"groups":[
	  {"leaves":[0], "groups":[1]},
	  {"leaves":[1,2]},
	  {"leaves":[3,4]}
	]
}

export const graphStartActor = (state, dispatch) => {
  debug(state.graph)
  if (state.graph && state.graph.layout && !state.graph.updatingLayout) {

    debug('graph', state.graph)

    let layout = new Cola.Layout()

    let count = 0

    layout
      .linkDistance(100)
      .avoidOverlaps(true)
      .handleDisconnected(false)
      .size([width, height])
      .nodes(state.graph.nodes)
      .links(state.graph.links)

      // .nodes(testData.nodes)
      // .links(testData.links)
      // .groups(testData.groups)

    if (state.graph.groups) {
      layout.groups(state.graph.groups)
    }

      // .map(g => (
      //   {
      //     ...g,
      //     leaves: g.leaves.map(l => {
      //       return typeof l === 'Number' ? l : l.index
      //     })
      //   })
      // )
      // )
    layout.on('tick', function () {
      count++
      debug('alpha', layout._alpha)
      debug('nodes', layout.nodes()[0].x)
      debug('cola tick')
      if (count > ITERATIONS) {
        layout.stop()
        count = 0
      }
      dispatch(graphTick(layout.nodes()))
    })

    // layout.start(50, 50, 50)
    layout.start()




    dispatch(graphStart())

    // state.graph.layout.start(50, 50, 50, 10)

    debug('alpha at end ', state.graph.layout._alpha)

    // state.graph.layout.resume()



    // debug(state.graph.layout.on('tick'))
    // state.graph.layout.on('end', () => {
    //   dispatch
    // })
  }
}

export const graphResumeActor = (state, dispatch) => {

}

export const graphEndActor = (state, dispatch) => {

}
