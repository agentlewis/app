var React = require('react')
var r = require('r-dom')
var debug = require('debug')('graph')
var Layout = require('ngraph.forcelayout')
var Node = require('node-ui')
const iterations = 10
import { loadAgentGraph } from './action-creators'

var each = require('lodash.foreach')

function center(vector2d, width, height) {
  return {
    x: vector2d.x + width / 2,
    y: vector2d.y + height / 2
  }
}


module.exports = React.createClass({

  propTypes: {
    dispatch: React.PropTypes.func,
    route: React.PropTypes.object,
    agents: React.PropTypes.array,
    relationships: React.PropTypes.array
  },

  componentWillMount: function () {
    const { dispatch, route } = this.props
    debug('componentWillMount', dispatch, loadAgentGraph)

    dispatch(loadAgentGraph(route.context))

  },

  componentWillReceiveProps: function (nextProps) {
    const { dispatch, route } = this.props

    if (nextProps.route.context !== route.context) { // TODO
      console.log(nextProps.route)
      dispatch(loadAgentGraph(route.context))
    }
  },

  renderNodes: function (graph, layout) {
    if (!graph) { return [] }
    let nodes = []
    graph.forEachNode(node => {
      let vector2d = center(
      layout.getNodePosition(node.id),
      window.screen.width,
      window.screen.height
    )
      nodes.push(React.createElement(Node, {
        x: vector2d.x,
        y: vector2d.y,
        id: node.id,
        width: 40,
        height: 40,
        image: node.data.image
      }))
    })
    return nodes
  },

  render: function () {
    debug('props', this.props)
    const { graph, layout } = this.props.graph
    let nodes = this.renderNodes(graph, layout)

    return (
      r.svg(
        {
          className: 'graph-svg',
          width: window.screen.width,
          height: window.screen.height,
          // style: { cursor: this.state.dragging ? 'move' : 'auto' },
          // onMouseDown: this.handleMouseDown,
          // onMouseMove: this.handleMouseMove,
          // onMouseUp: this.handleMouseUp,
          // onWheel: this.handleWheel
        },
        [
          r.g(
            {
              id: 'transform-layer',
              // transform: transform(this.props.vector)
            },
            [
              // r.g({className: 'halo-group'}, [
              //   r(EdgeGroup,
              //       {
              //         queries: this.props.queries,
              //         nodes: nodes,
              //         edges: edges,
              //         model: this.props.model,
              //         route: this.props.route
              //       }
              //     )
              //   ]
              // ),
            r.g({className: 'node-group'}, nodes)
          ]
        )]
      )
    )
  }
})
