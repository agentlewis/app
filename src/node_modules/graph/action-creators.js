import { createAction } from 'redux-actions'
import {
  layoutUpdating,
  getAgentGraphId,
  getLayout,
  getNodes,
  getIterationsCount } from './getters'

import {
  AGENT_GRAPH,
  AGENT_GRAPH_ID,
  GRAPH_START,
  GRAPH_END,
  GRAPH_TICK,
  UPDATE_LAYOUT,
  BEGIN_GRAPH_UPDATE,
  DEFAULT_QUERIES, UPDATE_NODES, UPDATE_NODES_END, UPDATE_ITERATIONS } from 'action-types'

const debug = require('debug')('graph:action-creators')


export const beginGraphUpdate = createAction(BEGIN_GRAPH_UPDATE)
export const updateNodes = createAction(UPDATE_NODES)
export const updateIterations = createAction(UPDATE_ITERATIONS)
export const agentGraphId = createAction(AGENT_GRAPH_ID)
//
//
// export const loadAgentGraph = function (agentId) {
//   debug('loadAgentGraph', agentId)
//   return {
//     types: [
//       LOAD_AGENT_GRAPH,
//       LOAD_AGENT_GRAPH_SUCCESS,
//       LOAD_AGENT_GRAPH_ERROR
//     ],
//     payload: [
//       agentGraph.bind(null, agentId),
//       graphStart
//     ],
//     sequence: true
//   }
// }

export const loadAgentGraph = function (agentId) {
  debug('loadAgentGraph', agentId)
  return [
    agentGraphId(agentId),
    defaultQueries()
//    agentGraph(),
//    graphStart(),
  ]
}

export const agentGraph = function (agentId) {
  debug('agentGraph', agentId)
  return {
    type: AGENT_GRAPH,
    payload: agentId
  }
}

export const defaultQueries = function () {
  debug('defaultQueries')
  return {
    type: DEFAULT_QUERIES
  }
}



export const updateLayout = createAction(UPDATE_LAYOUT)
// export const updatingLayout = createAction(UPDATING_LAYOUT)


export const updatingLayout = function (layout) {
  debug('updatingLayout', layout)
  return [
    updateLayout(layout),
    updateNodes(layout.nodes()),
    graphTick()
  ]
}

export const updateNodesEnd = function () {
  return { type: UPDATE_NODES_END }
}



export const graphStart = function () {
  return (dispatch, getState) => {
    const state = getState()
    if (!layoutUpdating(state)) {
      const layout = getLayout(state)
      debug('graphStart', layout)
      if (layout) {
        let count = 0

        layout.on('tick', () => {
          console.log('tick', layout.nodes()[0].x, count)
          if (count < 200) {
            const nodes = layout.nodes()
            console.log('dispatch updateNodes', count)
            dispatch(updateNodes(nodes))
            count ++
          }
        })
        
        layout.on('end', () => {
            dispatch(updateNodesEnd())
        })



        layout.start()
      }
    }
  }
}

// export const graphTick = function () {
//   return (dispatch, getState) => {
//     const state = getState()
//     debug('graphTick', layoutUpdating(state), state)
//     if (layoutUpdating(state)) {
//       const layout = getLayout(state)
//
//     }
//   }
// }
