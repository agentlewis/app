var types = require('types')
var got = require('got')
var forEach = require('lodash.foreach')
var config = require('config')
var Url = require('url')
var debug = require('debug')('holodex:fetcher')

var store = require('base/store')

module.exports = function fetcher (route) {
  debug('fetching', route)

  if (route.collection && route.id) {
    var type = types.indexedByCollection[route.collection]
    var Model = type.Model
    var modelId = Url.format(config.api) + '/' + route.collection + '/' + route.id

    var model = store.findById(modelId)

    // TODO smarter cache
    if (model == null) {
      model = new Model({ '@id': modelId })
      get(model, {})
    }

    return model

  } else {
    var Collection = collection.Collection
    var collection = new Collection()
    return find(collection, {})
  }
}

function get (model, params) {
  debug('get', model, params)

  got(model.getId(), {

  }, function (err, body, res) {
    debug('got cb', err, body)
    if (err) { throw err }

    // parse body as json
    var data = JSON.parse(body)

    forEach(data['@graph'], function (attrs) {
      // debug("entity attrs", attrs)

      var id = attrs['@id']
      var type = attrs['@type']

      // if top model
      if (id === model.getId()) {
        // use existing model
        model.set(attrs, { silent: true })
        model.save()
      } else if (store.findById(id)) {
        var otherModel = store.findById(id)
        otherModel.set(attrs)
        otherModel.save()
      } else {
        // create new model of type
        var Model = types[type].Model
        new Model(attrs)
      }
    })

    model.trigger('change', model)
  })

  return model
}

function find (collection, params) {
}
