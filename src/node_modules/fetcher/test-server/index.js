var test = require('tape')
var Url = require('url')
var shmock = require('shmock')
var sortBy = require('lodash.sortby')
var omit = require('lodash.omit')
var config = require('config')

var types = require('types')
var store = require('base/store')
var Model = require('base/model')
var Collection = require('base/collection')

var mock = shmock(config.api.port)

var fetcher = require('fetcher')

test('fetches model by id', function (t) {
  function fullId (shortId) {
    return Url.format(config.api) + shortId
  }

  store.clear()

  var Thing = Model.extend({
    typeName: 'Thing',
    collectionName: 'things',

    props: {
      name: 'string'
    }
  })
  var things = new Collection(Thing)

  types.Thing = {
    Model: Thing,
    store: things
  }
  types.indexedByCollection.things = types.Thing

  var graph = sortBy([{
    '@id': fullId('/things/backpack'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/chair'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/jacket'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/computer'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/bicycle'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/stove'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/skirt'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/bed'),
    '@type': 'Thing'
  }], '@id')

  var mocked = mock.get('/api/things/backpack').reply(200, JSON.stringify({
    '@context': {},
    '@graph': graph
  }))

  var model = fetcher({
    collection: 'things',
    id: 'backpack'
  })

  model.once('change', function () {
    t.deepEqual(model.toJSON(), graph[0])
    var storeData = store.data.map(function (d) { return d.toJSON()})
    ;[things.data, storeData].map(function (data) {
      t.deepEqual(
        sortBy(data.map(function (item) {
          return omit(item, ['$loki', 'meta'])
        }), '@id'),
        graph
      )
    })
    t.doesNotThrow(function () { mocked.done() })
    mock.close()
    store.clear()
    t.end()
  })
})
