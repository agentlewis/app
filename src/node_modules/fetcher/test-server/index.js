var test = require('tape')
var Url = require('url')
var shmock = require('shmock')
var config = require('config')

var store = require('base/store')

var mock = shmock(config.api.port)

var fetcher = require('fetcher')

test('fetches model by id', function (t) {
  function fullId (shortId) {
    return Url.format(config.api) + shortId
  }

  var graph = [{
    '@id': fullId('/things/bed'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/chair'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/jacket'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/computer'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/backpack'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/stove'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/skirt'),
    '@type': 'Thing'
  }, {
    '@id': fullId('/things/bicycle'),
    '@type': 'Thing'
  }]

  var mocked = mock.get('/api/things/bed').reply(200, JSON.stringify({
    '@context': {},
    '@graph': graph
  }))

  var model = fetcher({
    collection: 'things',
    id: 'bed'
  })

  model.once('change', function () {
    t.deepEqual(model.toJSON(), graph[0])
    t.deepEqual(store.data.map(function (d) { return d.toJSON() }), graph)
    t.doesNotThrow(function () { mocked.done() })
    mock.close()
    t.end()
  })
})
