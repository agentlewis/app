var extend = require('xtend')

module.exports = ObservModel

function (opts) {

  opts.idAttribute = opts.idAttribute || 'id'
  opts.typeAttribute = opts.typeAttribute || 'type'

  return ObservModel

  function ObservModel (context, mixin) {

    var modelAttrs = {}
    modelAttrs[opts.idAttribute] = Observ()
    modelAttrs[opts.typeAttribute] = Observ()

    var observModel = ObservStruct(
      extend(modelAttrs, mixin)
    )

    // abstract function called when parent is destroyed
    observModel.destroy = function () {

    }

    observModel._type = "ObservModel"

    return observModel
  }

  // abstract function to be overriden by children
  ObservModel.extend(function (context) {

  })
}

/*
var MyClass = {
  new: function () {
    var object = Object.create(this)
    this.initialize.call(object, arguments)
    return object
  },
  initialize: function () {

  },
}

var OtherClass = extend(MyClass, {
  new: function () {
    var base = Object.create(this)
  },
}

var myInstance = MyClass.new()
*/

// TODO
function belongsTo () {}
function hasOne () {}
function hasMany () {}
function belongsToMany () {}
