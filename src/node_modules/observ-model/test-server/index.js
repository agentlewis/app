var test = require('tape')
var extend = require('xtend')
var Observ = require('observ')
var ObservModel = require('../')

test('props', function (t) {
  var defaultProps = {
    name: 'A Thing',
    description: "It's really shiny.",
  }

  var Thing = ObservModel.createClass({
    props: {
      name: Observ(defaultProps.name),
      description: Observ(defaultProps.description),
    },
  })

  var thing = Thing()

  var vals = []
  thing(function (val) {
    vals.push(val)
  })

  t.deepEqual(thing.get(), defaultProps)
  t.equal(thing.get('name'), defaultProps.name)
  t.equal(thing.get('description'), defaultProps.description)
  t.deepEqual(thing(), defaultProps)
  t.equal(thing.$name(), defaultProps.name)
  t.equal(thing.$description(), defaultProps.description)

  var firstProps = {
    name: 'A Computer',
    description: 'It beeps and boops.'
  }
  
  thing.set(firstProps)
  t.deepEqual(thing.get(), firstProps)
  t.equal(thing.get('name'), firstProps.name)
  t.equal(thing.get('description'), firstProps.description)
  t.deepEqual(thing(), firstProps)
  t.equal(thing.$name(), firstProps.name)
  t.equal(thing.$description(), firstProps.description)

  var secondProps = {
    name: 'Some Tea',
    description: "It's warm and delicious."
  }

  thing.set('name', secondProps.name)
  t.deepEqual(thing.get(), {
    name: secondProps.name,
    description: firstProps.description,
  })
  t.equal(thing.get('name'), secondProps.name)
  t.equal(thing.get('description'), firstProps.description)
  t.deepEqual(thing(), {
    name: secondProps.name,
    description: firstProps.description,
  })
  t.equal(thing.$name(), secondProps.name)
  t.equal(thing.$description(), firstProps.description)

  thing.set('description', secondProps.description)
  t.deepEqual(thing.get(), secondProps)
  t.equal(thing.get('name'), secondProps.name)
  t.equal(thing.get('description'), secondProps.description)
  t.deepEqual(thing(), secondProps)
  t.equal(thing.$name(), secondProps.name)
  t.equal(thing.$description(), secondProps.description)

  t.deepEqual(vals, [
    firstProps,
    {
      name: secondProps.name,
      description: firstProps.description,
    },
    secondProps,
  ])

  t.end()
})

test('derived props', function (t) {

  var Person = ObservModel.createClass({
    props: {
      firstName: Observ(),
      lastName: Observ(),
    },
    derived: {
      fullName: ['firstName', 'lastName', function (firstName, lastName) {
        return firstName + ' ' + lastName
      }],
    },
  })

  var person = Person()

  var personProps = {
    firstName: 'Michael',
    lastName: 'Williams',
  }
  var personDerived = {
    fullName: 'Michael Williams',
  }

  var vals = []
  person(function (val) {
    vals.push(val)
  })

  person.set(personProps)

  t.equal(person.get('firstName'), personProps.firstName)
  t.equal(person.get('lastName'), personProps.lastName)
  t.equal(person.get('fullName'), personDerived.fullName)
  t.deepEqual(person.get(), extend(personProps, personDerived))

  t.deepEqual(vals, [
    personProps,
  ])

  t.end()
})

test('ignore undefined props', function (t) {
  var Thing = ObservModel.createClass({
    props: {
      name: Observ(),
    },
  })
  var human = {
    type: 'Thing',
    name: 'human',
    description: 'a being on Earth.'
  }
  var humanObserv = Thing()
  humanObserv.set(human)
  t.equal(humanObserv().description, human.description)
  t.equal(humanObserv.get('description'), undefined)
  t.end()
})
