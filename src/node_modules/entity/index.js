var Base = require('selfish').Base
var slice = require('sliced')
var extend = require('xtend/mutable')

module.exports = Base.extend({

  'new': function (object, options) {
    var parsed = this.parse(object)
    return Base['new'].call(this, parsed, options)
  },

  initialize: function (object, options) {
    this.firstName = "asdf"
    extend(this, object)
  },

  parse: function (object) {
    return object
  },

  serialize: function () {
    return extend({}, this)
  },

  toJSON: function () {
    return this.serialize()
  },

  extend: function () {
    var args = slice(arguments)

    args.forEach(function (arg) {
      if (arg.props) {
        var props = arg.props
        delete arg.props

        Object.keys(props).forEach(function (propName) {
          Object.defineProperty(arg, propName, props[propName])
        })
      }
    })

    return Base.extend.apply(this, args)
  },
})

/*
var Entity = require('entity')
var d = require('describe-property')

module.exports = Entity.extend({

  idAttribute: "@id",
  typeAttribute: "@type",
  pluralAttribute: "plural",

  // get id of model per configuration
  // should *always* be how id is determined by other code
  getId: function () {
    return this[this.idAttribute]
  },

  // get type name of model per configuration
  // should *always* be how type is determined by other code
  getType: function () {
    return this[this.typeAttribute]
  },

  // get plural name of model per configuration
  // should *always* be how plural is determined by other code
  getPlural: function () {
    return this[this.pluralAttribute]
  },

  props: {
    isNew: {
      get: function () {
        return this.getId() == null
      }
    }
  },

})
*/
