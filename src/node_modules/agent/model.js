var debug = require('debug')('holodex:agent:model')
var includes = require('lodash.includes')
var createGraph = require('ngraph.graph')

var Model = require('base/model')
var relationships = require('relationship/store')
var roles = require('role/store')
var store = require('base/store')

module.exports = Model.extend({
  typeName: 'Agent',
  collectionName: 'agents',

  props: {
    name: 'string',
    image: 'url'
  },

  initialize: function (attrs, opts) {
    debug('initialize', this)
    Model.prototype.initialize.apply(this, arguments)

    this._roles = roles
      .addDynamicView(this.getId() + '/roles')
      .applyFind({
        agent: this.getId()
      })

    this._contextRelationships = relationships
      .addDynamicView(this.getId() + '/contextRelationships')
      .applyFind({
        context: this.getId()
      })
  },

  derived: {
    roles: {
      cache: false,
      fn: function () {
        return this._roles.data()
          .map(function (role) {
            return store.findById(role['@id'])
          })
      }
    },
    relationships: {
      cache: false,
      fn: function () {
        debug('roles', this.roles)
        return this.roles.map(function (role) {
          return role.relationship
        })
          .filter(function (i) { return i })
          .concat(
            this._contextRelationships.data()
              .map(function (relationship) {
                return store.findById(relationship['@id'])
              })
        )
      }
    },
    relationshipGraph: {
      cache: false,
      fn: function () {
        debug('relationships', this.relationship)

        var graph = createGraph()
        graph.beginUpdate()

        this.relationships.forEach(function (relationship) {
          // add agents to graph (if not already)
          relationship.agents.forEach(function (agent) {
            if (!graph.getNode(agent.getId())) {
              graph.addNode(agent.getId(), agent)
            }
          })

          // add relationship as link between agents
          relationship.agents.forEach(function (source) {
            relationship.agents.forEach(function (target) {
              if (source === target) { return }
              graph.addLink(source.getId(), target.getId(), relationship)
            })
          })
        })

        graph.endUpdate()
        debug('relationshipGraph ->', graph)
        return graph
      }
    },
    relsByType: {
      cache: false,
      fn: function () {
        var relsGraph = this.relationshipGraph
        var relsByType = {}
        var seen = []

        relsGraph.forEachLinkedNode(
          this.getId(),
          function (linkedNode, link) {
            if (includes(seen, linkedNode.id)) {
              return
            }
            seen.push(linkedNode.id)

            var rel = link.data
            var relTypeId = rel.type.getId()

            if (relsByType[relTypeId] == null) {
              relsByType[relTypeId] = []
            }

            relsByType[relTypeId].push(rel)
          }
        )

        return relsByType
      }
    }
  }
})
