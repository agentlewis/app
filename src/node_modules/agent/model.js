var debug = require('debug')('holodex:agent:model')
var includes = require('lodash.includes')
var createGraph = require('ngraph.graph')

var Model = require('base/model')
var relationships = require('relationship/store')
var roles = require('role/store')
var store = require('base/store')

module.exports = Model.extend({
  typeName: 'Agent',
  collectionName: 'agents',

  props: {
    name: 'string',
    image: 'url'
  },

  initialize: function (attrs, opts) {
    // debug('initialize', this)
    Model.prototype.initialize.apply(this, arguments)

    this._roles = roles
      .addDynamicView(this.getId() + '/roles')
      .applyFind({
        agent: this.getId()
      })

    this._contextRelationships = relationships
      .addDynamicView(this.getId() + '/contextRelationships')
      .applyFind({
        context: this.getId()
      })
  },

  derived: {
    roles: {
      cache: false,
      fn: function () {
        return this._roles.data()
          .map(function (role) {
            return store.findById(role['@id'])
          })
      }
    },
    relationships: {
      cache: false,
      fn: function () {
        // debug('roles', this.roles)
        return this.roles.map(function (role) {
          return role.relationship
        })
          .filter(function (i) { return i })
          .concat(
            this._contextRelationships.data()
              .map(function (relationship) {
                return store.findById(relationship['@id'])
              })
        )
      }
    },
    relationshipGraph: {
      cache: false,
      fn: function () {
        // debug('relationships', this.relationship)

        var graph = createGraph()
        graph.beginUpdate()

        this.relationships.forEach(function (relationship) {
          // debug('relationship', relationship)
          // add agents to graph (if not already)
          relationship.agents.forEach(function (agent) {
            // debug('agent', agent)
            if (agent && !graph.getNode(agent.getId())) { //?
              graph.addNode(agent.getId(), agent)
            }
          })

          // add role as link between agents
          relationship.roles.forEach(function (sourceRole) {
            relationship.roles.forEach(function (targetRole) {
              if (!sourceRole || !targetRole || sourceRole === targetRole ) { return }
              if (!sourceRole.agent || !targetRole.agent ) { return }
              graph.addLink(sourceRole.agent.getId(), targetRole.agent.getId(), sourceRole)
            })
          })
        })

        graph.endUpdate()
        // debug('relationshipGraph ->', graph)
        return graph
      }
    },
    relsByType: {
      cache: false,
      deps: ['relationships'],
      fn: function () {
        var relsByType = {}
        this.relationships.forEach(function (relationship) {
          var relTypeId = relationship.type.getId()
          if (relsByType[relTypeId] == null) {
            relsByType[relTypeId] = []
          }
          relsByType[relTypeId].push(relationship)
        })
        return relsByType
      }
    },
    rolesByType: {
      cache: false,
      deps: ['roles'],
      fn: function () {
        var rolesByType = {}
        this.roles.forEach(function (role) {
          var roleTypeId = role.type.getId()
          if (rolesByType[roleTypeId] == null) {
            rolesByType[roleTypeId] = []
          }
          rolesByType[roleTypeId].push(role)
        })
        return rolesByType
      }
    }
  }
})
