var debug = require('debug')('holodex:agent:model')
var includes = require('lodash.includes')
var createGraph = require('ngraph.graph')

var Model = require('base/model')
var relationships = require('relationship/store')
var roles = require('role/store')
var store = require('base/store')
var vars = require('ui/vars')
var keys = require('lodash.keys')

var setDefaultAgentFilters = require('./set-default-agent-filters')

module.exports = Model.extend({
  typeName: 'Agent',
  collectionName: 'agents',

  props: {
    name: 'string',
    image: 'url'
  },

  initialize: function (attrs, opts) {
    // debug('initialize', this)
    Model.prototype.initialize.apply(this, arguments)

    this._roles = roles
      .addDynamicView(this.getId() + '/roles')
      .applyFind({
        agent: this.getId()
      })

    this._contextRelationships = relationships
      .addDynamicView(this.getId() + '/contextRelationships')
      .applyFind({
        context: this.getId()
      })
  },

  derived: {
    roles: {
      cache: false,
      fn: function () {
        return this._roles.data()
          .map(function (role) {
            return store.findById(role['@id'])
          })
      }
    },
    relationships: {
      cache: false,
      fn: function () {
        // debug('roles', this.roles)
        return this.roles.map(function (role) {
          return role.relationship
        })
          .filter(function (i) { return i })
          .concat(
            this._contextRelationships.data()
              .map(function (relationship) {
                return store.findById(relationship['@id'])
              })
        )
      }
    },
    relationshipGraph: {
      cache: false,
      fn: function () {
        // debug('relationships', this.relationship)

        var graph = createGraph()
        graph.beginUpdate()

        this.relationships.forEach(function (relationship) {
          // debug('relationship', relationship)
          // add agents to graph (if not already)
          relationship.agents.forEach(function (agent) {
            // debug('agent', agent)
            if (agent && !graph.getNode(agent.getId())) { //?
              graph.addNode(agent.getId(), agent)
            }
          })

          // add role as link between agents
          relationship.roles.forEach(function (sourceRole) {
            relationship.roles.forEach(function (targetRole) {
              if (!sourceRole || !targetRole || sourceRole === targetRole ) { return }
              if (!sourceRole.agent || !targetRole.agent ) { return }
              graph.addLink(sourceRole.agent.getId(), targetRole.agent.getId(), sourceRole)
            })
          })
        })

        graph.endUpdate()
        // debug('relationshipGraph ->', graph)
        return graph
      }
    },
    relsByType: {
      cache: false,
      deps: ['relationships'],
      fn: function () {
        var relsByType = {}
        this.relationships.forEach(function (relationship) {
          var relTypeId = relationship.type.getId()
          if (relsByType[relTypeId] == null) {
            relsByType[relTypeId] = []
          }
          relsByType[relTypeId].push(relationship)
        })
        return relsByType
      }
    },
    rolesByType: {
      cache: false,
      deps: ['roles'],
      fn: function () {
        var rolesByType = {}
        this.roles.forEach(function (role) {
          var roleTypeId = role.type.getId()
          if (rolesByType[roleTypeId] == null) {
            rolesByType[roleTypeId] = []
          }
          rolesByType[roleTypeId].push(role)
        })
        return rolesByType
      }
    },
    filtersByType: {
      cache: false,
      deps: ['roles', 'relationships', 'agent', 'name'],
      fn: function () {
        var agentId = this.getId()
        var type = this['@type']
        var name = this.name
        var hasChildren = (this['@type'] === 'Group' && this.childGroups.length > 0)
        var colorMap = {}
        var filterMap = {}
        var filtersByType = {}
        filtersByType.targetAgent = this.relationships.reduce(function (memo, relationship) {
          if (!relationship.context || relationship.context['@id'] !== agentId) { //not a context relationship
            relationship.roles.forEach(function (role) {
              if (role.agent && role.agent.getId() !== agentId) { //its the pair
                                //BUG role.agent == null?
                var id = role.agent['@type']  + '-' + role.type.getId()
                if (!filterMap[id]) {
                  var preDefault = {
                    id: id,
                    agentType: { id: role.agent['@type'], active: false },
                    roleType: { id: role.type.getId(), active: false },
                    linkType: { id: role.linkTypeId, active: false },
                    targetAgent: { id: agentId, '@type': type, name: name, active: false },
                    contextAgentId: null,
                    color: vars.colors.mediumGray
                  }
                  var filter = setDefaultAgentFilters(preDefault, hasChildren)
                  memo.push(filter)
                  filterMap[id] = true
                  colorMap[role.type.getId()] =true
                }
              }
            })
          }
          return memo
        }, [])
        filtersByType.context = this._contextRelationships.data()
            .map(function (relationship) {
              return store.findById(relationship['@id'])
            })
            .reduce(function (memo, relationship) {
              var id0 = 'context-' + relationship.roles[0].agent['@type'] + '-' + relationship.roles[0].type.getId()
              var id1 = 'context-' + relationship.roles[1].agent['@type'] + '-' + relationship.roles[1].type.getId()

              ;[id0, id1].forEach(function (id, i) {
                if (!filterMap[id]) {
                  memo.push({
                    id: id,
                    agentType: { id: relationship.roles[i].agent['@type'], active: false },
                    roleType: { id: relationship.roles[i].type.getId(), active: false },
                    linkType: { id: relationship.roles[i].linkTypeId, active: false },
                    targetAgent: { id: null, active: null },
                    contextAgentId: agentId,
                    color: vars.nodesAndLinks[keys(colorMap).length]
                  })
                  filterMap[id] = true
                }
              })
              return memo
            }, [])
        return filtersByType
      }
    }
  }
})
