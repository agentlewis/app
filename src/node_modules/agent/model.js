var debug = require('debug')('holodex:agent:model')
var union = require('lodash/array/union')
var flatten = require('lodash/array/flatten')
var isArray = require('lodash/lang/isArray')
var forEach = require('lodash/collection/forEach')

var Model = require('base/model')
var relationships = require('relationship/store')
var roles = require('role/store')
var store = require('base/store')

module.exports = Model.extend({
  typeName: 'Agent',
  collectionName: 'agents',

  props: {
    name: 'string',
    image: 'url'
  },

  initialize: function (attrs, opts) {
    debug('initialize', this)
    Model.prototype.initialize.apply(this, arguments)

    this._roles = roles
    .addDynamicView(this.getId() + '/roles')
    .applyFind({
      agent: this.getId()
    })
  },

  derived: {
    roles: {
      cache: false,
      fn: function () {
        return this._roles.data()
        .map(function (role) {
          return store.findById(role['@id'])
        })
      }
    },
    relationships: {
      cache: false,
      fn: function () {
        debug("roles", this.roles)
        return this.roles.map(function (role) {
          return role.relationship
        })
        .filter(function (i) { return i })
      }
    },
    relsByType: {
      deps: ['relationships'],
      cache: false,
      fn: function () {
        debug('relationships', this.relationships)

        var rels = {}
        this.relationships.forEach(function (rel) {
          var relType = rel.type
          if (!relType) return
          var relType = relType.getId()
          if (!rels[relType]) {
            rels[relType] = []
          }
          rels[relType].push(rel)
        })

        debug('relsByType ->', rels)
        return rels
      },
    },

    relatedTypes: {
      deps: ['relsByType'],
      cache: false,
      fn: function () {
        var relatedTypes = Object.keys(this.relsByType)
        debug('relatedTypes ->', relatedTypes)
        return relatedTypes
      },
    },

    relatedNodes: {
      deps: ['relsByType'],
      cache: false,
      fn: function () {
        var relatedNodes = union(flatten(
          this.relationships.map(function (rel) {
            return rel.roles.map(function (role) {
              return role.agent
            })
          })
        ))
        debug('relatedNodes ->', relatedNodes)
        return relatedNodes
      },
    },

    relatedEdges: {
      deps: ['relsByType'],
      cache: false,
      fn: function () {
        var relatedEdges = {}
        
        forEach(this.relatedTypes, function (relType) {
          relatedEdges[relType] = {}
        })

        this.relationships.forEach(function (rel) {
          var relType = rel.type
          if (!relType) return
          relType = relType.getId()

          var relEdges = relatedEdges[relType]
          
          var relIs = rel.is.getId()
          var relHas = rel.has.getId()

          if (!isArray(relEdges[relIs])) {
            relEdges[relIs] = []
          }
          relEdges[relIs].push(relHas)
        })

        debug('relatedEdges ->', relatedEdges)
        return relatedEdges
      },
    },
  },

})
