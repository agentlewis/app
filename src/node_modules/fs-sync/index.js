var Base = require('selfish')
var dirToObj = require('dir-to-obj')
var traverse = require('traverse')
var forEach = require('lodash').forEach

var jsonCodec = require('./codecs/json')

Base.extend({
  initialize: function (options) {
    this.location = options.location
    this.codec = options.codec || jsonCodec
    this.atom = options.atom
  },

  fetch: function (callback) {

    var atom = this.atom
    var codec = this.codec

    dirToObj({
      root: this.location,
    }, function (err, dirObj) {
      forEach(dirObj, function (collection, collectionId) {
        forEach(collection, function (entity, entityId) {

          var entities = []

          // TODO try catch
          var decoded = codec.decode(entity)

          // identify nodes
          traverse(decode, function (node) {
            if (!typeof node === 'object') {
              return
            }

            if (!node.$id && this.isRoot) {
              node.$id = entityId
            } else if (!node.$id) {
              node.$id = Path.join(
                entityId,
                toJsonPointer(this.path)
              )
            }

            // if a relationship
            // parse nested roles and have them reference the relationship
            if (_.isArray(node.roles)) {
              node.roles.forEach(function (role) {
                role.relationship = node.$id
              })
            }

            entities.push(node)
          })

          atom.set(entities)
        })
      })
    })
  },
})
