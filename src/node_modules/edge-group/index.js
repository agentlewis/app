// main
import component from 'virtual-component'
const svg = require('virtual-dom/virtual-hyperscript/svg')
const vars = require('ui/vars')

//debug
var debug = require('debug')('edge-group')


const render = props => {
  const { queries, nodes } = props


  debug('queries', queries, nodes)

  return svg('g', { class: 'query-group' })

}


const EdgeGroup = {
  render
}

module.exports = (props, children) => component(EdgeGroup, props, children)

//
// module.exports = React.createClass({
//
//   propTypes: {
//     nodes: React.PropTypes.array,
//     edges: React.PropTypes.array,
//     queries: React.PropTypes.array,
//     model: React.PropTypes.object
//   },
//
//   getInitialState: function () {
//     return {
//       activeHalos: {}
//     }
//   },
//
//   render: function () {
//     debug(this.props)
//
//     return (
//       r.g({ className: 'query-group' },
//         this.props.queries.active.reduce(function (memo, query) {
//           var edges, halos
//           if (query.showHalo) {
//             halos = this.props.nodes.filter(function (node) {
//               return node.activeHalosById && node.activeHalosById[query.id]
//             })
//           }
//           if (query.showLink) {
//             edges = this.props.edges.filter(function (edge) {
//               return edge.query.id === query.id
//             })
//           }
//
//           if (halos || edges) {
//             debug('halos', halos)
//             memo.push(r.g({ key: query.id, className: 'query-layer' }, [
//               halos ? r.g({ className: 'halos' },
//                 halos.map(function (node) {
//                   return this.renderHalos(node, query.id)
//                 }.bind(this))) : null,
//               edges ? r.g({ className: 'edges' },
//                 edges.map(function (edge) {
//                   return r(Edge, { edge: edge })
//                 })) : null
//             ]))
//           }
//
//           debug('memo', memo)
//
//           return memo
//         }.bind(this), [])
//
//       )
//     )
//   },
//
//   renderHalos: function (node, queryId) {
//     var w = node.w
//     var x = node.x
//     var y = node.y
//     var i = node.activeHalos.length - node.activeHalos.indexOf(queryId)
//     return r.circle({
//       cx: x,
//       cy: y,
//       r: w / 2 + (i * vars.haloWidth) + 2,
//       fill: node.activeHalosById[queryId].component.color,
//       stroke: 'white',
//       strokeWidth: 1
//     })
//   }
// })
