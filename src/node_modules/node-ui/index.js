//main
import component from 'virtual-component'
const svg = require('virtual-dom/virtual-hyperscript/svg')


// utils
const R = require('ramda')
const coordTransform = require('util/coordinate-transform')
const getScreenCoords = require('util/get-screen-coords')

//debug
const debug = require('debug')('node-ui')

const style = {
  avatar: {
    cursor: 'pointer',
    border: '2px solid white',
    WebkitBoxShadow: '0px 0px 5px rgba(48,48,48,0.9)',
    boxShadow: '0px 0px 5px rgba(48,48,48,0.9)'
  },
  node: {
    position: 'absolute'
  }
}

function render (props) {
  debug('render', props)
  const { x, y, width, height, image, id } = props

  return svg('g', { class: 'node' }, [
    svg('circle', { attributes: {
      cx: x,
      cy: y,
      r: Math.max(width / 2) + 2,
      fill: '#ECEFF1'
    }}),
    svg('clipPath', { id: id + '/node-clip-path' }, [
      svg('circle', { attributes: {
        cx: x,
        cy: y,
        r: Math.max(width, height) / 2
      }})
    ]),
    svg('image', {
      "xlink:href": image,
      // onClick: this.handleClick,
      // onMouseOver: this.handleMouseOver,
      // onMouseOut: this.handleMouseOut,
      height: `${height}px`,
      width: `${width}px`,
      x: x - width / 2,
      y: y - height / 2,
      style: { ...style.avatar, clipPath: `url(#${id}/node-clip-path)` }
    })
  ])
}

const Node = {
  render
}

module.exports = (props, children) => component(Node, props, children)


//
//   // handleClick: function () {
//   //   var model = this.props.node.data
//   //   this.props.handleClick(model)
//   // },
//
//   // handleMouseOver: function (e) {
//   //   debug('handleMouseOver(this.context)
//   //   //convert mouse coordinates to svg coordinates
//   //   //convert mouse coordinates to svg coordinates
//   //   var DOMNode = React.findDOMNode(this.context.svg)
//   //   var layer = DOMNode.getElementById('transform-layer')
//   //
//   //   var elem = React.findDOMNode(this)
//   //
//   //
//   //
//   //   var corners = getScreenCoords(DOMNode, elem)
//   //
//   //
//   //   debug('corners(corners)
//   //   var svgGlobal = coordTransform({
//   //     DOMNode: DOMNode,
//   //     layer: layer,
//   //     coords: [this.props.node.x, this.props.node.y]
//   //   })
//   //
//   //   // var p = m(
//   //   //   this.props.vector,
//   //   //   [svgGlobal.x, svgGlobal.y, 1]
//   //   // )
//   //   // debug(p, svgGlobal)
//   //
//   //   this.props.handleMouseOver(corners)
//   //   // this.props.handleMouseOver([svgGlobal.x, svgGlobal.y], this.props.node.w)
//   // },
//
//   // handleMouseOut: function () {
//   //   debug('handleMouseOut')
//   //   this.props.handleMouseOut()
//   // }
//
//
// })
