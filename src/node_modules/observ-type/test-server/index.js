var test = require('tape')
var extend = require('xtend')
var Observ = require('observ')
var forEach = require('for-each')
var ObservGraph = require('observ-graph')
var createType = require('../')

test('type and version', function (t) {
  var Resource = createType({
    type: "Resource",
    version: "1.0.0",
  })
  var resource = Resource()
  t.equal(resource.getType(), "Resource")
  t.equal(resource.getVersion(), "1.0.0")
  t.end()
})

test('props', function (t) {
  var defaultProps = {
    name: 'A Thing',
    description: "It's really shiny.",
  }

  var Thing = createType({
    props: {
      name: Observ(defaultProps.name),
      description: Observ(defaultProps.description),
    },
  })

  var thing = Thing()

  var vals = []
  thing(function (val) {
    vals.push(val)
  })

  assertObs(thing, defaultProps)

  var firstProps = {
    name: 'A Computer',
    description: 'It beeps and boops.'
  }
  
  thing.set(firstProps)

  assertObs(thing, firstProps)

  var secondProps = {
    name: 'Some Tea',
    description: "It's warm and delicious."
  }

  thing.set('name', secondProps.name)

  assertObs(thing, {
    name: secondProps.name,
    description: firstProps.description,
  })

  thing.set('description', secondProps.description)

  assertObs(thing, secondProps)

  t.deepEqual(vals, [
    firstProps,
    {
      name: secondProps.name,
      description: firstProps.description,
    },
    secondProps,
  ])

  t.end()

  function assertObs (obs, expected) {
    t.deepEqual(obs.get(), expected)
    t.deepEqual(obs(), expected)
    Object.keys(expected).forEach(function (propName) {
      t.equal(obs.get(propName), obs['$'+propName])
      t.equal(obs.get(propName)(), expected[propName])
    })
  }
})

test('derived props', function (t) {

  var Person = createType({
    props: {
      firstName: Observ(),
      lastName: Observ(),
    },
    derived: {
      fullName: ['firstName', 'lastName', function (firstName, lastName) {
        return firstName + ' ' + lastName
      }],
    },
  })

  var person = Person()

  var personProps = {
    firstName: 'Michael',
    lastName: 'Williams',
  }
  var personDerived = {
    fullName: 'Michael Williams',
  }

  var vals = []
  person(function (val) {
    vals.push(val)
  })

  person.set(personProps)

  t.equal(person.get('firstName')(), personProps.firstName)
  t.equal(person.get('lastName')(), personProps.lastName)
  t.equal(person.get('fullName')(), personDerived.fullName)
  t.deepEqual(person.get(), extend(personProps, personDerived))

  t.deepEqual(vals, [
    personProps,
  ])

  t.end()
})

test('ignore undefined props', function (t) {
  var Thing = createType({
    props: {
      name: Observ(),
    },
  })
  var human = {
    type: 'Thing',
    name: 'human',
    description: 'a being on Earth.'
  }
  var humanObserv = Thing()
  humanObserv.set(human)
  t.equal(humanObserv().description, human.description)
  t.equal(humanObserv.get('description'), undefined)
  t.end()
})

test('extend model', function (t) {
  var SimpleThing = createType({
    type: "SimpleThing",
    props: {
      name: Observ(),
    },
  })
  var ComplexThing = createType({
    type: "ComplexThing",
    extend: SimpleThing,
    props: {
      description: Observ(),
    },
  })
  var thing = {
    type: 'Thing',
    name: 'human',
    description: 'a being on Earth.'
  }
  var simpleThing = SimpleThing()
  t.equal(simpleThing.getType(), "SimpleThing")
  simpleThing.set(thing)
  t.equal(simpleThing().name, thing.name)
  t.equal(simpleThing.get('name')(), thing.name)
  t.equal(simpleThing().description, thing.description)
  t.equal(simpleThing.get('description'), undefined)
  var complexThing = ComplexThing()
  t.deepEqual(complexThing.getType(), ["SimpleThing", "ComplexThing"])
  complexThing.set(thing)
  t.equal(complexThing().name, thing.name)
  t.equal(complexThing.get('name')(), thing.name)
  t.equal(complexThing().description, thing.description)
  t.equal(complexThing.get('description')(), thing.description)
  t.end()
})
