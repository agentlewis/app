'use strict';

import { createSelector } from 'reselect'
import indexBy from 'lodash.indexby'
import pluck from 'lodash.pluck'
import pick from 'lodash.pick'
import mapValues from 'lodash.mapvalues'
import values from 'lodash.values'
import groupBy from 'lodash.groupby'

import { relationshipTypesById, relationshipDirections } from 'relationship-type/getters'

export const queryTypes = state => state.queryTypes

export const queryTypesById = createSelector(
  [queryTypes], queryTypes => indexBy(queryTypes, 'id')
)

export const queryTypeIds = createSelector(
  [queryTypes], queryTypes => pluck(queryTypes, 'id')
)

export const queryTypesByRelationshipTypeId = createSelector(
  [queryTypesById, relationshipTypesById],
  (queryTypesById, relationshipTypesById) => {
    return mapValues(relationshipTypesById, (relationshipType, relationshipTypeId) => {
      return pick(queryTypesById, (queryType, queryTypeId) => {
        return queryType.relationshipType === relationshipTypeId
      })
    })
  }
)

export const queryTypesByRelationshipTypeIdAndDirection = createSelector(
  [queryTypesByRelationshipTypeId],
  (queryTypesByRelationshipTypeId) => {
    return mapValues(queryTypesByRelationshipTypeId, (queryTypes, relationshipTypeId) => {
      let queryTypesByDirection = groupBy(values(queryTypes), 'direction')
      return mapValues(queryTypesByDirection, (queryTypes, direction) => {
        return indexBy(queryTypes, 'id')
      })
    })
  }
)
