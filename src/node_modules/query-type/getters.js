'use strict';

import { createSelector } from 'reselect'
import indexBy from 'lodash.indexby'
import pluck from 'lodash.pluck'
import pick from 'lodash.pick'
import mapValues from 'lodash.mapvalues'
import uniq from 'lodash.uniq'
import values from 'lodash.values'
import groupBy from 'lodash.groupby'
import map from 'lodash.map'
import zipObject from 'lodash.zipobject'
import get from 'lodash.get'
import findKey from 'lodash.findkey'
import reduce from 'lodash.reduce'

import { relationshipTypesById, relationshipDirections, relationshipTypesByAgentId } from 'relationship-type/getters'
import { relationshipsByAgentId, relationshipsByAgentIdAndDirection } from 'relationship/getters'


export const queryTypes = state => state.queryTypes

export const queryTypesById = createSelector(
  [queryTypes], queryTypes => indexBy(queryTypes, 'id')
)

export const queryTypeIds = createSelector(
  [queryTypes], queryTypes => pluck(queryTypes, 'id')
)

export const queryTypesByRelationshipTypeId = createSelector(
  [queryTypesById, relationshipTypesById],
  (queryTypesById, relationshipTypesById) => {
    return mapValues(relationshipTypesById, (relationshipType, relationshipTypeId) => {
      return pick(queryTypesById, (queryType, queryTypeId) => {
        return queryType.relationshipType === relationshipTypeId
      })
    })
  }
)

export const queryTypesByRelationshipTypeIdAndDirection = createSelector(
  [queryTypesByRelationshipTypeId],
  (queryTypesByRelationshipTypeId) => {
    return mapValues(queryTypesByRelationshipTypeId, (queryTypes, relationshipTypeId) => {
      let queryTypesByDirection = groupBy(values(queryTypes), 'direction')
      console.log('relationshipTypeId', relationshipTypeId)

      console.log('queryTypesByDirection', queryTypesByDirection)
      return mapValues(queryTypesByDirection, (queryTypes, direction) => {
        return indexBy(queryTypes, 'id')
      })
    })
  }
)

export const queryTypesByAgentId = createSelector(
  [queryTypesById, relationshipsByAgentIdAndDirection, relationshipTypesById],
  (queryTypesById, relationshipsByAgentIdAndDirection, relationshipTypesById) => {
    return mapValues(relationshipsByAgentId, (relationships, agentId) => {
      return reduce(relationships, (memo, relationship) => {
        let direction = findKey(relationship, agentId)
        filter(queryTypesById, queryType => {
          return (
            queryType.relationshipType === relationship.type &&
            queryType.direction === direction
          )
        })
      }, [])
    })
  }
)

export const queryTypesByAgentIdAndDirection = createSelector(
  [relationshipsByAgentIdAndDirection, queryTypesByRelationshipTypeIdAndDirection],
  (relationshipsByAgentIdAndDirection, queryTypesByRelationshipTypeIdAndDirection) => {
    return mapValues(relationshipsByAgentIdAndDirection, (relationshipsByDirection, agentId) => {
      return mapValues(relationshipsByDirection, (relationships, direction) => {
        let relationshipTypeIds = uniq(pluck(relationships, 'type'))
        console.log('relationshipTypeIds', relationshipTypeIds)
        return map(relationshipTypeIds, relationshipTypeId => {
          console.log('queryTypes', queryTypesByRelationshipTypeIdAndDirection[relationshipTypeId])
          return get(queryTypesByRelationshipTypeIdAndDirection, [relationshipTypeId, direction])
        })
      })
    })
  }
)
