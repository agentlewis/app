import test from 'tape'
import state from 'state'
import { queryTypesByRelationshipTypeId, queryTypesByRelationshipTypeIdAndDirection, queryTypesByAgentIdAndDirection } from './getters'

const expected0 = {
  'stewards/person/source': {
    agentType: 'Person',
    direction: 'target',
    id: 'stewards/person/source',
    label: 'People who steward {target}',
    relationshipType: 'stewards'
  }
}


const expected1 = [
  {
    'stewards/person/context': {
      agentType: 'Person',
      direction: 'context',
      id: 'stewards/person/context',
      label: 'People who steward in {context}',
      relationshipType: 'stewards'
    }
  }
]


const expected2 = {
'stewards/person/context': {
  agentType: 'Person',
  direction: 'context',
  id: 'stewards/person/context',
  label: 'People who steward in {context}',
  relationshipType: 'stewards'
},
'stewards/person/source': {
  agentType: 'Person',
  direction: 'target',
  id: 'stewards/person/source',
  label: 'People who steward {target}',
  relationshipType: 'stewards'
},
'stewards/person/target': {
  agentType: 'Person',
  direction: 'source',
  id: 'stewards/person/target',
  label: 'People stewarded by {source}',
  relationshipType: 'stewards'
  }
}

test('it gets an object of query types indexed by relationship-id and directions', t => {
  let actual = queryTypesByRelationshipTypeIdAndDirection(state)['stewards']['target']

  t.deepEqual(actual, expected0)
  t.end()
})

test('it gets an object of query types indexed by agent id and direction', t => {
  let actual = queryTypesByAgentIdAndDirection(state)['enspiral']['context']

  t.deepEqual(actual, expected1)
  t.end()
})

test('it gets an object of query types indexed by relationship-id', t => {
  let actual = queryTypesByRelationshipTypeId(state)['stewards']

  t.deepEqual(actual, expected2)
  t.end()
})
