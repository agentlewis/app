var store = require('base/store')
var Labels = require('./labels')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isArray = require('lodash.isarray')
var pluck = require('lodash.pluck')
var extend = require('xtend')
var filter = require('lodash.filter')
var find = require('lodash.find')
var dot = require('dot-object')
var obj   = require('lodash.zipobject')
var debug = require('debug')('graph-view:get-queries')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var parentGroup = prefix + '/roleTypes/parent-group'

var sortActiveQueries = require('./sort-active-queries')

//HACK
function composeQueryLabels (qlbls) {
  var queryLabels = {}

  var qlbls = qlbls.split(',')
  ;['source', 'target', 'context'].forEach(function (nodeText) {
    var qlabels = filter(qlbls, function (label) {
      return label.indexOf(nodeText) !== -1
    })
    if (qlabels) {
      queryLabels[nodeText] = qlabels
    }
  })

  return queryLabels
}

function makeLabels (options) {
  var relation = options.source ? 'source' : options.target ? 'target' : 'context'
  var componentLabels = options.component.labels.split(',') //HACK
  var queryLabels = composeQueryLabels(options.component.queryLabels) //HACK
  var labels = []
  debug('makeLabels', relation, options)
  var counter = 0

  if (options[relation] && queryLabels[relation]) {
    queryLabels[relation].forEach(function (label) {
      var format = {}
      format[relation] = options[relation].name
      labels.push({
        id: options.id + '-' + counter,
        showHalo: options.showHalo,
        queryId: options.id,
        type: 'QueryLabel',
        label: label.format(format),
        color: options.component.color
      })

      counter ++
    })
  }

  if (options.showLink) {
    componentLabels.forEach(function (label) {
      if (label.indexOf(relation) !== -1) { //HACK
        labels.push({
          id: options.id + '-' + counter,
          queryId: options.id,
          type: 'LinkLabel',
          label: label.format({
            source: dot.pick('source.name', options),
            target: dot.pick('target.name', options),
            context: dot.pick('context.name', options)
          }),
          color: options.component.color
        })

        counter ++
      }
    })
  }

  return labels
}

function getQuery (options) {
  debug('getQuery', options)

    return {
      'type': 'Query',
      component: options.component,
      id: options.id,
      source: options.source,
      target: options.target,
      context: options.context,
      labels: makeLabels(options),
      showHalo: options.showHalo,
      showLink: options.showLink,
      isParent: options.component.id === '/linkTypes/is-part-of'
    }
}

module.exports = function (model, queryMap) {
  var active = []
  var inactive = []
  var contextRelationshipTypes = {}
  var roleTypes = {}
  var contextLinkTypes = {}
  var asSource = {}
  var asTarget = {}

  debug('queryMap', queryMap)

  model.linkTypesByDirection.asSource.forEach(function (linkType) {
    if (!asSource[linkType.id]) {
      var id = linkType.id + '.src.' + model.id
      var queryStub = queryMap[id]
      if (queryStub) {
        var activeQuery = getQuery({
          id: id,
          source: model,
          component: linkType,
          showLink: queryStub.showLink,
        })
        queryMap[id] = activeQuery
        active.push(activeQuery)
      }
      else {
        inactive.push(getQuery({
          id: id,
          source: model,
          component: linkType,
          showLink: true
        }))
      }

      asSource[linkType.id] = linkType
    }
  })

  model.linkTypesByDirection.asTarget.forEach(function (linkType) {
    if (!asTarget[linkType.id]) {
      var id = linkType.id + '.tgt.' + model.id
      var queryStub = queryMap[id]
      if (queryStub) {
        var activeQuery = getQuery({
          id: id,
          target: model,
          component: linkType,
          showLink: queryStub.showLink,
          showHalo: queryStub.showHalo
        })
        queryMap[id] = activeQuery
        active.push(activeQuery)
      }
      else {
        inactive.push(getQuery({
          id: id,
          target: model,
          component: linkType,
          showLink: true
        }))
      }

      asTarget[linkType.id] = linkType
    }
  })
  model.contextRelationships.forEach(function (relationship) {
    if (!contextRelationshipTypes[relationship.type.id]) {
      relationship.type.linkTypes.forEach(function (linkType) {
        if (!contextLinkTypes[linkType.id]) {
          var id = linkType.id + '.ctx.' + model.id
          var queryStub = queryMap[id]
          debug('queryStub', queryStub)
          if (queryStub) {
            var activeQuery = getQuery({
              id: id,
              context: model,
              component: linkType,
              showLink: queryStub.showLink,
              showHalo: queryStub.showHalo
            })
            queryMap[id] = activeQuery
            active.push(activeQuery)
          }
          else {
            inactive.push(getQuery({
              id: id,
              context: model,
              component: linkType,
              showLink: true
            }))
          }
          contextLinkTypes[linkType.id] = linkType
        }

      })

      contextRelationshipTypes[relationship.type.getId()] = relationship.type
    }
  })

  debug('inactive', inactive, active, model)



  return { inactive: inactive, active: active.sort(sortActiveQueries), queryMap: queryMap }
}
