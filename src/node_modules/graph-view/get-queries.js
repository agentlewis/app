var filter = require('lodash.filter')
var format = require('format-text')
var dot = require('dot-object')
var debug = require('debug')('graph-view:get-queries')

// HACK
function composeQueryLabels (qlbls) {
  var queryLabels = {}

  qlbls = qlbls.split(',')
  ;['source', 'target', 'context'].forEach(function (nodeText) {
    var qlabels = filter(qlbls, function (label) {
      return label.indexOf(nodeText) !== -1
    })
    if (qlabels) {
      queryLabels[nodeText] = qlabels
    }
  })

  return queryLabels
}

function makeLabels (options) {
  var relation = options.source ? 'source' : options.target ? 'target' : 'context'
  var componentLabels = options.component.labels.split(',') // HACK
  var queryLabels = composeQueryLabels(options.component.queryLabels) // HACK
  var labels = []
  var counter = 0

  if (options[relation] && queryLabels[relation]) {
    queryLabels[relation].forEach(function (label) {
      debug('label', label)
      var labelArgs = {}
      labelArgs[relation] = options[relation].name
      labels.push({
        id: options.id + '-' + counter,
        showHalo: options.showHalo,
        queryId: options.id,
        type: 'QueryLabel',
        label: format(label, labelArgs),
        color: options.component.color
      })

      counter++
    })
  }

  if (options.showLink) {
    componentLabels.forEach(function (label) {
      if (label.indexOf(relation) !== -1) { // HACK
        var labelArgs = {}
        var source = dot.pick('source.name', options) || ' '
        var target = dot.pick('target.name', options) || ' '
        var context = dot.pick('context.name', options) || ' '
        if (source) labelArgs.source = source
        if (target) labelArgs.target = target
        if (context) labelArgs.context = context
        labels.push({
          id: options.id + '-' + counter,
          queryId: options.id,
          type: 'LinkLabel',
          label: format(label, labelArgs),
          color: options.component.color
        })

        counter++
      }
    })
  }

  return labels
}

function getQuery (options) {
  debug('getQuery', options)
  return {
    'type': 'Query',
    component: options.component,
    id: options.id,
    source: options.source,
    target: options.target,
    context: options.context,
    labels: makeLabels(options),
    showHalo: options.showHalo,
    showLink: options.showLink,
    isParent: options.component.id === '/linkTypes/is-subgroup-of',
    nodes: []
  }
}

module.exports = function (model, queryMap) {
  var inactive = []
  var contextRelationshipTypes = {}
  var contextLinkTypes = {}
  var asSource = {}
  var asTarget = {}

  debug('queryMap', queryMap)

  model.linkTypesByDirection.asSource.forEach(function (linkType) {
    if (!asSource[linkType.id]) {
      var id = linkType.id + '.src.' + model.id
      var queryStub = queryMap[id]
      if (queryStub) {
        queryMap[id] = getQuery({
          id: id,
          source: model,
          component: linkType,
          showLink: queryStub.showLink
        })
      } else {
        inactive.push(getQuery({
          id: id,
          source: model,
          component: linkType,
          showLink: true
        }))
      }

      asSource[linkType.id] = linkType
    }
  })

  model.linkTypesByDirection.asTarget.forEach(function (linkType) {
    if (!asTarget[linkType.id]) {
      var id = linkType.id + '.tgt.' + model.id
      var queryStub = queryMap[id]
      if (queryStub) {
        queryMap[id] = getQuery({
          id: id,
          target: model,
          component: linkType,
          showLink: queryStub.showLink,
          showHalo: queryStub.showHalo
        })
      } else {
        inactive.push(getQuery({
          id: id,
          target: model,
          component: linkType,
          showLink: true
        }))
      }

      asTarget[linkType.id] = linkType
    }
  })
  model.contextRelationships.forEach(function (relationship) {
    if (!contextRelationshipTypes[relationship.type.id]) {
      relationship.type.linkTypes.forEach(function (linkType) {
        if (!contextLinkTypes[linkType.id]) {
          var id = linkType.id + '.ctx.' + model.id
          var queryStub = queryMap[id]
          debug('queryStub', queryStub)
          if (queryStub) {
            queryMap[id] = getQuery({
              id: id,
              context: model,
              component: linkType,
              showLink: queryStub.showLink,
              showHalo: queryStub.showHalo
            })
          } else {
            inactive.push(getQuery({
              id: id,
              context: model,
              component: linkType,
              showLink: true
            }))
          }
          contextLinkTypes[linkType.id] = linkType
        }

      })

      contextRelationshipTypes[relationship.type.getId()] = relationship.type
    }
  })

  return { inactive: inactive, queryMap: queryMap }
}
