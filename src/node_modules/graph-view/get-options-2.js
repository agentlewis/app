var store = require('base/store')
var Labels = require('./labels')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isArray = require('lodash.isarray')
var pluck = require('lodash.pluck')
var dot = require('dot-object')
var obj   = require('lodash.zipobject')
var debug = require('debug')('graph-view:get-options-2')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var parentGroup = prefix + '/roleTypes/parent-group'

module.exports = function (model, activeQueries) {
  var options = []

  debug('activeQueries', activeQueries, Labels)

  keys(model.pairRoleTypes).forEach(function (pairRoleTypeId) {
    var pairRoleType = model.pairRoleTypes[pairRoleTypeId]
    var source = pairRoleType.relationship.type.source
    var target = pairRoleType.relationship

    debug('pairRoleTypeId', pairRoleType.id)
    if (!activeQueries[pairRoleType.id]) {
      //target role is inactive -> make options for role and link
      debug('inactive target', pairRoleType.id)
      options.push({
        type: 'Role',
        id: pairRoleType.getId() + '-' + model.getId(),
        roleTypeId: pairRoleType.id,
        agentId: model.getId(),
        label: Labels.targetAgent[pairRoleType.getId()].template.format(model.name),
      })

      options.push({
        type: 'Link',
        id: pairRoleType.linkTypeId + '-' + model.getId(),
        linkTypeId: pairRoleType.linkTypeId,
        agentId: model.getId(),
        label: Labels.links[pairRoleType.linkTypeId].template.format(model.name),
      })

    }


  })


  debug('options', options, model)
  //option: role + target; link + target; role + context; agentType + target;
    //agentType
    //roleType
      //halo
    //linkType
    //agentType
    //context || target


  return options
}


//people that follow charlie "role: follower target: charlie"
//people that charlie follows "role: follower", source: charlie"
