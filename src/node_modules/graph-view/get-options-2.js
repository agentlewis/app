var store = require('base/store')
var Labels = require('./labels')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isArray = require('lodash.isarray')
var pluck = require('lodash.pluck')
var dot = require('dot-object')
var obj   = require('lodash.zipobject')
var debug = require('debug')('graph-view:get-options-2')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var parentGroup = prefix + '/roleTypes/parent-group'

module.exports = function (model, activeQueries) {
  var options = []
  var contextRelationshipTypes = {}
  var roleTypes = {}
  var contextLinkTypes = {}
  var linkTypes = {}

debug('activeQueries', activeQueries)


  model.roles.forEach(function (role) {
    if (
      role.type.linkType //role has source link
      && !linkTypes[role.type.linkType.id] //haven't done this link yet
      && !dot.pick(role.type.linkType.id + '.targets.' + model.id, activeQueries) //not active
    ) {
      options.push({
        type: 'Link',
        id: model.getId()  + '-' + role.type.linkType.id,
        agentId: model.getId(),
        linkTypeId: role.type.linkType.id,
        label: role.type.linkType.withSourceLabel.format({ source: model.name })
      })
      linkTypes[role.type.linkType.id] = role.type.linkType
    }

  })


  model.sourceRoles.forEach(function (sourceRole) {
    if (
      !roleTypes[sourceRole.type.id]
      && !dot.pick(sourceRole.type.id + '.targets.' + model.id, activeQueries) //not active
    ) {
      debug('sourceRole', sourceRole.type.id, sourceRole)
      options.push({
        type: 'Role',
        id: sourceRole.type.getId() + '-' + model.getId(),
        roleTypeId: sourceRole.type.id,
        agentId: model.getId(),
        label: sourceRole.label.format({ source: sourceRole.agent.name, target: model.name })
      })

      if (
        sourceRole.type.linkType
        && !linkTypes[sourceRole.type.linkType.id]
        && !dot.pick(sourceRole.type.linkType.id + '.targets.' + model.id, activeQueries) //not active
        ) {
        options.push({
          type: 'Link',
          id: model.getId()  + '-' + sourceRole.type.getId(),
          linkTypeId: sourceRole.type.linkType.id,
          label: sourceRole.type.linkType.withTargetLabel.format({ target: model.name })
        })
        linkTypes[sourceRole.type.linkType.id] = sourceRole.type.linkType
      }


      roleTypes[sourceRole.type.id] = sourceRole.type
    }
  })

  //TODO logic not quite right
  model.targetRoles.forEach(function (targetRole) {
    if (
      !roleTypes[targetRole.type.id]
      && !dot.pick(targetRole.id + '.sources.' + model.id, activeQueries) //not active
    ) {
      debug('targetRole', targetRole.type.name, targetRole)
      options.push({
        type: 'Role',
        id: targetRole.type.getId() + '-' + model.getId(),
        roleTypeId: targetRole.type.id,
        agentId: model.getId(),
        label: targetRole.label.format({source: model.name, target: targetRole.agent.name })
      })

      if (
        targetRole.type.linkType
        && !linkTypes[targetRole.type.linkType.id]
        && !dot.pick(targetRole.type.linkType.id + '.sources.' + model.id, activeQueries) //not active
      ) {
        options.push({
          type: 'Link',
          id: targetRole.type.getId()   + '-' +  model.getId(),
          linkTypeId: targetRole.type.linkType.id,
          label: targetRole.type.linkType.withTargetLabel.format({ target: model.name })
        })
        linkTypes[targetRole.type.linkType.id] = targetRole.type.linkType
      }


      roleTypes[targetRole.type.id] = targetRole.type
    }
  })

  model.contextRelationships.forEach(function (relationship) {
    if (!contextRelationshipTypes[relationship.type.id]) {
      relationship.roles.forEach(function (role) {
        if (!roleTypes[role.type.id] && !dot.pick(role.type.id + '.contexts.' + model.id, activeQueries)) {
          options.push({
            type: 'Role',
            id: role.type.getId() + '-context-' + model.getId(),
            roleTypeId: role.type.id,
            contextAgentId: model.getId(),
            label: role.type.inContextLabel.format({ context: model.name })
          })
        }
        roleTypes[role.type.id] = role.type
      })

      relationship.type.linkTypes.forEach(function (linkType) {
        if (
          !contextLinkTypes[linkType.id]
          && !dot.pick(linkType.id + '.contexts.' + model.id, activeQueries) //not active
        ) {
          options.push({
            type: 'Link',
            id: linkType.id + '-context-' + model.getId(),
            linkTypeId: linkType.id,
            contextAgentId: model.getId(),
            label: linkType.inContextLabel.format({ context: model.name })
          })
          contextLinkTypes[linkType.id] = linkType
        }
      })

      contextRelationshipTypes[relationship.type.getId()] = relationship.type
    }
  })







  debug('options', options, model)
  //option: role + target; link + target; role + context; agentType + target;
    //agentType
    //roleType
      //halo
    //linkType
    //agentType
    //context || target


  return options
}


//people that follow charlie "role: follower target: charlie"
//people that charlie follows "role: follower", source: charlie"
