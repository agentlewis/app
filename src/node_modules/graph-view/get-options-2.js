var store = require('base/store')
var Labels = require('./labels')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isArray = require('lodash.isarray')
var pluck = require('lodash.pluck')
var dot = require('dot-object')
var obj   = require('lodash.zipobject')
var debug = require('debug')('graph-view:get-options-2')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var parentGroup = prefix + '/roleTypes/parent-group'

module.exports = function (model, activeQueries) {
  var options = []
  var sourceTypes = {}
  var targetTypes = {}

  debug('activeQueries', activeQueries, Labels)

  model.sourceRoles.forEach(function (sourceRole) {
    if (!sourceTypes[sourceRole.type.getId()] && !activeQueries[sourceRole.type.id]) {
      options.push({
        type: 'Role',
        id: sourceRole.type.getId() + '-' + model.getId(),
        roleTypeId: sourceRole.type.id,
        agentId: model.getId(),
        label: sourceRole.label.format({ source: sourceRole.agent.name, target: model.name })
      })
      sourceTypes[sourceRole.type.getId()] = sourceRole.type
    }
  })

  model.targetRoles.forEach(function (targetRole) {
    if (!targetTypes[targetRole.type.getId()] && !activeQueries[targetRole.type.id]) {
      debug('targetRole', targetRole.type.name, targetRole)
      options.push({
        type: 'Role',
        id: targetRole.type.getId() + '-' + model.getId(),
        roleTypeId: targetRole.type.id,
        agentId: model.getId(),
        label: targetRole.label.format({source: model.name, target: targetRole.agent.name })
      })
      targetTypes[targetRole.type.getId()] = targetRole.type
    }
  })

  // keys(model.pairRoleTypes).forEach(function (pairRoleTypeId) {
  //   var pairRoleType = model.pairRoleTypes[pairRoleTypeId]
  //   // var source = pairRoleType.relationship.type.source
  //   // var target = pairRoleType.relationship
  //
  //   debug('pairRoleTypeId', pairRoleType)
  //   if (!activeQueries[pairRoleType.id]) {
  //     //target role is inactive -> make options for role and link
  //     debug('inactive target', pairRoleType.id)
  //     options.push({
  //       type: 'Role',
  //       id: pairRoleType.getId() + '-' + model.getId(),
  //       roleTypeId: pairRoleType.id,
  //       agentId: model.getId(),
  //       label: pairRoleType,
  //     })
  //
  //     // options.push({
  //     //   type: 'Link',
  //     //   id: pairRoleType.linkTypeId + '-' + model.getId(),
  //     //   linkTypeId: pairRoleType.linkTypeId,
  //     //   agentId: model.getId(),
  //     //   label: Labels.links[pairRoleType.linkTypeId].template.format(model.name),
  //     // })
  //
  //   }
  //
  //
  // })


  debug('options', options, model)
  //option: role + target; link + target; role + context; agentType + target;
    //agentType
    //roleType
      //halo
    //linkType
    //agentType
    //context || target


  return options
}


//people that follow charlie "role: follower target: charlie"
//people that charlie follows "role: follower", source: charlie"
