var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')

var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:format-graph-data2')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')
var clone = require('lodash.clone')
var keys = require('lodash.keys')

var config = require('config')
var prefix = Url.format(config.api)
var vars = require('ui/vars')

var dot = require('dot-object')

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberLinkTypeId = prefix + '/roleTypes/member/link'
var group = prefix + '/roleTypes/group'
var groupLinkTypeId = group + '/link'
var member = prefix + '/roleTypes/member'
var subgroup = prefix + '/roleTypes/subgroup'

function getLinkLength (n, l) {
  return (1+(n-1)*0.2)*l
}

function shortId (longId) {
  return longId.slice(prefix.length)
}

function setActiveHalosMap (nodeIds, query, activeHalosMap) {
  nodeIds.forEach(function (nodeId) {
    if (activeHalosMap[nodeId]) { activeHalosMap[nodeId][query.id] = query }
    else {
      activeHalosMap[nodeId] = {}
      activeHalosMap[nodeId][query.id] = query
    }
  })
}

module.exports = function (model, queries, centerCoords, optionsMap) {
  var optionsMap = optionsMap || {}
  var queryMap = queries.queryMap
  var nodes = []
  var links = []
  var nodeIds = {}
  var idToIndex = {}
  idToIndex[model.getId()] = 0
  var activeHalosMap = {}
  var counter = 1

  debug('queries', queries)

  model.relationshipGraph.forEachLink(function (link) {
  //NOTE link.data is currently the sourceRole
  //NOTE [performance]  don't need to build links which don't actually exist stewardee -> steward
  debug('link', link)
    if (link.data.type.linkType && queryMap[link.data.type.linkType.id]) {
      var query

      if (queryMap[link.data.type.linkType.id].contexts
            && queryMap[link.data.type.linkType.id].contexts[link.data.relationship.context.id]) {
        query = queryMap[link.data.type.linkType.id].contexts[link.data.relationship.context.id]

        if (query.showHalo) {
          setActiveHalosMap([link.fromId, link.toId], query, activeHalosMap)
        }
      }
      else if (queryMap[link.data.type.linkType.id].sources
                && queryMap[link.data.type.linkType.id].sources[shortId(link.fromId)]) {
        query = queryMap[link.data.type.linkType.id].sources[shortId(link.fromId)]

        if (query.showHalo) {
          setActiveHalosMap([link.toId], query, activeHalosMap)
        }
      }
      else if (queryMap[link.data.type.linkType.id].targets
                && queryMap[link.data.type.linkType.id].targets[shortId(link.toId)]) {
        query = queryMap[link.data.type.linkType.id].targets[shortId(link.toId)]

        if (query.showHalo) {
          setActiveHalosMap([link.fromId], query, activeHalosMap)
        }
      }

      if (query) {
        if (typeof idToIndex[link.fromId] !== 'number') {
          idToIndex[link.fromId] = counter
          counter ++
        }
        if (typeof idToIndex[link.toId] !== 'number') {
          idToIndex[link.toId] = counter
          counter ++
        }

        link.query = query
        link.length = getLinkLength(1, 120)
        link.source = idToIndex[link.fromId]
        link.target = idToIndex[link.toId]
        links.push(link)
      }
    }
  })


  model.relationshipGraph.forEachNode(function (node) {
    if (typeof idToIndex[node.id] === 'number') {
      node.fixed = (model.getId() === node.id
        || (
          model.parentGroups
          && model.parentGroups.length > 0
          && model.parentGroups[0].getId() === node.id
        ))

      if (optionsMap[node.id]) {
        node.x = optionsMap[node.id].x
        node.y = optionsMap.y
      }
      node.activeHalosById = activeHalosMap[node.id]
      node.activeHalos = keys(node.activeHalosById)
      node.w = vars.nodeSizes.default
      node.h = vars.nodeSizes.default
      nodes[idToIndex[node.id]] = node
    }

  })

  debug('links', links, nodes, idToIndex)
  return [nodes, links, activeHalosMap]
}
