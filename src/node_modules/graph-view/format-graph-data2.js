var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')

var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:format-graph-data2')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')
var clone = require('lodash.clone')

var config = require('config')
var prefix = Url.format(config.api)
var vars = require('ui/vars')

var dot = require('dot-object')

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberLinkTypeId = prefix + '/roleTypes/member/link'
var group = prefix + '/roleTypes/group'
var groupLinkTypeId = group + '/link'
var member = prefix + '/roleTypes/member'
var subgroup = prefix + '/roleTypes/subgroup'

function getLinkLength (n, l) {
  return (1+(n-1)*0.2)*l
}

function shortId (longId) {
  return longId.slice(prefix.length)
}

module.exports = function (model, queryMap, centerCoords, options) {
  var nodes = []
  var links = []
  var nodeIds = {}
  var idToIndex = {}

  model.relationshipGraph.forEachLink(function (link) {
  //NOTE link.data is currently the sourceRole
  //NOTE [performance]  don't need to build links which don't actually exist stewardee -> steward
  debug('link', link)
    if (link.data.type.linkType && queryMap[link.data.type.linkType.id]) {
      if (
        (
          queryMap[link.data.type.linkType.id].contexts
          && queryMap[link.data.type.linkType.id].contexts[link.data.relationship.context.id]
        ) ||
        (
          queryMap[link.data.type.linkType.id].sources
          && queryMap[link.data.type.linkType.id].sources[shortId(link.fromId)]
        ) ||
        (
          queryMap[link.data.type.linkType.id].targets
          && queryMap[link.data.type.linkType.id].targets[shortId(link.toId)]
        )
      ) {
        links.push(link)
        nodeIds[link.fromId] = true
        nodeIds[link.toId] = true
      }
    }

  })


  model.relationshipGraph.forEachNode(function (node) {
    if (nodeIds[node.id]) {
      nodes.push(node)
    }
    debug('node', node)
  })

  debug('links', links)


  return [nodes, links, idToIndex]
}
