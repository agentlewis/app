var React = require('react')
var debug = require('debug')('holodex:graph-view:node-ui')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')
var vars = require('ui/vars')

function circumference (r) {
  return Math.PI*r
}

// TODO dynamic styles
var style = {
  circleClip20: {
    cursor: 'pointer',
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    nodes: React.PropTypes.array,
    links: React.PropTypes.array,
    filter: React.PropTypes.object
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    // debug('node', d)
    var d = this.props.node
    var offset = d.w / 2
    var x = d.x - offset
    var y = d.y - offset
    var r = d.w/2
    var activeRoleTypes = this.props.node.activeRoleTypes || []
    activeRoleTypes = activeRoleTypes.filter(function (roleTypeId) {
      return roleTypeId !== memberTypeId
    })

    debug('node', d)

    var halos = (activeRoleTypes.length > 0) ? this.renderHalos(activeRoleTypes) : null
    // var roleIcons = (activeRoleTypes.length > 0) ? this.renderRoleIcons(activeRoleTypes, r) : null

    // debug('node', this.props)

    return (
      React.createElement('g', { className: 'halos' },
        halos
    )

    )
  },



  renderHalos: function (activeRoleTypes) {
    var self = this
    var w = self.props.node.w
    var x = self.props.node.x
    var y = self.props.node.y
    return activeRoleTypes.map(function (roleTypeId, i) {
      return React.createElement('circle', {
        cx: x,
        cy: y,
        r: w/2+((i+1)*vars.haloWidth),
        fill: self.props.node.IdMap[roleTypeId].color,
        stroke: 'white',
        strokeWidth: 1
      })
    }).reverse()
  },


})
