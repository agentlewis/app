var React = require('react')
var debug = require('debug')('holodex:graph-view:filter-group')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var Edge = require('./edge-ui')
var groupBy = require('lodash.groupby')

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')
var vars = require('ui/vars')

function circumference (r) {
  return Math.PI*r
}

// TODO dynamic styles
var style = {
  circleClip20: {
    cursor: 'pointer',
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    nodes: React.PropTypes.array,
    edges: React.PropTypes.array,
    filterByType: React.PropTypes.object,
    model: React.PropTypes.object
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    debug(this.props)

    var groupedByRole = groupBy(this.props.filtersByType.targetAgent, function (filter) {
      return filter.roleType.id
    })

    var targetEdgesGroupedByType = groupBy(this.props.edges.filter(function (edge) {
      return edge.target.id === this.props.model.getId() }.bind(this)), function (edge) {
        return edge.model.linkTypeId
    })

    var contextEdgesGroupedByType = groupBy(this.props.edges.filter(function (edge) {
      return edge.target.id !== this.props.model.getId() }.bind(this)), function (edge) {
        return edge.model.linkTypeId
    })

    var nodesByActiveRole = {}

    this.props.nodes.forEach(function (node) {
      node.activeRoleTypes.forEach(function (roleType) {
        if (!nodesByActiveRole[roleType]) { nodesByActiveRole[roleType] = [node] }
        else { nodesByActiveRole[roleType].push(node) }
      })
    })

    return (
      r.g({ className: 'filters-group' }, [
        this.props.filtersByType.targetAgent
          .map(function (filter) {
            var edges
            if (filter.linkType.active) {
              edges = r.g({ className: 'edges'},
                targetEdgesGroupedByType[filter.linkType.id] ? targetEdgesGroupedByType[filter.linkType.id].map(function (edge) {
                  return r(Edge, {
                    edge: edge
                  })
                }) : null
              )
            }
            return r.g({ className: 'test' }, edges)
          }),
        this.props.filtersByType.context
          .map(function (filter) {
            var edges, halos
            if (filter.linkType.active) {
              edges = r.g({ className: 'edges'},
                contextEdgesGroupedByType[filter.linkType.id] ? contextEdgesGroupedByType[filter.linkType.id].map(function (edge) {
                  return r(Edge, {
                    edge: edge
                  })
                }) : null
              )
            }
            if (filter.roleType.active) {
              halos = r.g({ className: 'halos'},
                nodesByActiveRole[filter.roleType.id] ? nodesByActiveRole[filter.roleType.id].map(function (node) {
                  return this.renderHalos(node, filter.roleType.id)
                }.bind(this)) : null
              )
            }
            return r.g({ className: 'context-filter' }, [halos, edges])
        }.bind(this))
      ])
    )
  },



  renderHalos: function (node, roleTypeId) {
    var self = this
    var w = node.w
    var x = node.x
    var y = node.y
    var i = node.activeRoleTypes.length - node.activeRoleTypes.indexOf(roleTypeId)
    return r.circle({
      cx: x,
      cy: y,
      r: w/2+(i*vars.haloWidth)+2,
      fill: node.IdMap[roleTypeId].color,
      stroke: 'white',
      strokeWidth: 1
    })
  },


})
