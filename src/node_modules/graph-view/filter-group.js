var React = require('react')
var debug = require('debug')('holodex:graph-view:filter-group')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var Edge = require('./edge-ui')

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')
var vars = require('ui/vars')

function circumference (r) {
  return Math.PI*r
}

// TODO dynamic styles
var style = {
  circleClip20: {
    cursor: 'pointer',
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    nodes: React.PropTypes.array,
    edges: React.PropTypes.array,
    filters: React.PropTypes.array
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    debug(this.props.filters)


    return (
      React.createElement('g', { className: 'filters-group' }, [
        filters
          .filter(function (filter) {
            return !filter.contextAgentId
          })
          .map(function (filter) {
            return r(Edge, {

            })
          })
      ])

    )
  },



  renderHalos: function (node, activeRoleTypes) {
    var self = this
    var w = node.w
    var x = node.x
    var y = node.y
    return activeRoleTypes.map(function (roleTypeId, i) {
      return React.createElement('circle', {
        cx: x,
        cy: y,
        r: w/2+((i+1)*vars.haloWidth),
        fill: self.props.node.IdMap[roleTypeId].color,
        stroke: 'white',
        strokeWidth: 1
      })
    }).reverse()
  },


})
