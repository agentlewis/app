var r = require('r-dom')
var React = require('react')
var debug = require('debug')('tag-select')
var keys = require('lodash.keys')
var each = require('lodash.foreach')
var Typeahead = require('simple-react-typeahead')

module.exports = React.createClass({
  propTypes: {
    style: React.PropTypes.object,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired
  },

  getInitialState: function () {
    this.props.tagData
    return {
      Map: {}
    }
  },

  componentWillReceiveProps: function (nextProps) {
    var options = []
    var labelToTypeMap = {}
    var labelToDataMap = {}
    var tagData = this.props.tagData
    var withPred = tagData.triple.predicate.active
    each(tagData.triple, function (expression) {
      if(!expression.active) {
        var label = withPred ? expression.withPredLabel : expression.label
        options.push(label)
        labelToTypeMap[label] = 'triple'
        labelToDataMap[label] = expression
      }
    })

    each(tagData.filters, function (filter) {
      if (!filter.active) {
        var label = filter.label
        options.push(label)
        labelToTypeMap[label] = 'filters'
        labelToDataMap[label] = filter
      }
    })

    this.setState({ labelToTypeMap: labelToTypeMap, labelToDataMap: labelToDataMap, options: options })
  },

  render: function () {
    return r.div({ className: 'tag-select' }, [
      r(Typeahead, {
          id: 'test',
          style: this.props.style,
          array: this.state.options,
          placeholder: 'Boo',
          onSelect: this.handleSelect
        }
      )
    ])
  },

  handleSelect: function (label) {
    var type = this.state.labelToTypeMap[label]
    var id = this.state.labelToDataMap[label].id

    this.props.updateTag(type, id, true)()
  }
})
