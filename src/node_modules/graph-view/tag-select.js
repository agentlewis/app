var r = require('r-dom')
var React = require('react')
var debug = require('debug')('tag-select')
var keys = require('lodash.keys')
var each = require('lodash.foreach')
var Typeahead = require('simple-react-typeahead')

module.exports = React.createClass({
  propTypes: {
    style: React.PropTypes.object,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired
  },

  getInitialState: function () {
    var state = this.processTagData(this.props.tagData)
    return state
  },

  processTagData: function (tagData) {
    var options = []
    var idToTypeMap = {}
    each(tagData.triple, function (expression, key) {
      debug('all expressions', expression)
      if(!expression.active) {
        debug('expression for options', expression)
        options.push({id: expression.id, label: expression.label})
        idToTypeMap[expression.id] = 'triple'
      }
    })

    each(tagData.filters, function (filter) {
      if (!filter.active) {
        options.push({id: filter.id, label: filter.label})
        idToTypeMap[filter.id] = 'filters'
      }
    })
    return { idToTypeMap: idToTypeMap, options: options }
  },

  componentWillReceiveProps: function (nextProps) {
    var state = this.processTagData(nextProps.tagData)
    this.setState(state)
  },

  render: function () {
    return r.div({ className: 'tag-select' }, [
      r(Typeahead, {
          id: 'test',
          style: this.props.style,
          array: this.state.options,
          placeholder: 'Select filters',
          onSelect: this.handleSelect
        }
      )
    ])
  },

  handleSelect: function (id) {
    var type = this.state.idToTypeMap[id]
    this.props.updateTag(type, id, true)()
  }
})
