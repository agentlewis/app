// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:graph-view')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')

var Tag = require('sidebar/tag')
var IconFactory = require('react-icon-factory')
var TagGroup = require('./tag-group')


var config = require('config')

var Graph = require('./graph')
var RelationshipButton = require('./relationship-button')

var prefix = Url.format(config.api)

// use some basic colors
var palleteColors = require('./colors')
var getLinkTypes = require('./get-link-types')
var getDefaultLinkTypes = require('./get-default-link-types')
var getRelationshipObj = require('./get-relationship-obj')

var Icon = IconFactory({
  'long-arrow-left': r.g([
    r.path(
      { d: "M20 8h-12.17l5.59-5.59-1.42-1.41-8 8 8 8 1.41-1.41-5.58-5.59h12.17v-2z" }
    )
  ]),
  'add-circle-outline': r.g([
    r.path({ d: "M13 7h-2v4h-4v2h4v4h2v-4h4v-2h-4v-4zm-1-5c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" }
    )
  ]),
  'clear': r.g([
    r.path(
      { d:"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" }
    )
  ])
})



module.exports = React.createClass({
  getInitialState: function (options) {

    var initialState = {
      linkTypes: getLinkTypes(
        getDefaultLinkTypes(),
        this.props.model.relationshipGraph
      ),
      relationshipTags: getRelationshipObj(this.props.model.relationshipGraph)
    }
    debug('getInitialState() -> ', initialState)
    return initialState
  },

  render: function () {
    debug('rendering', { props: this.props, state: this.state })
    var linkTypes = this.state.linkTypes
    var linkLabels = this.props.linkLabels
    var roleTypes = this.props.roleTypes
    var cancelIcon = r(
      this.props.Icon,
      { className: 'cancel-tag', icon: 'cancel-circle', onClick: null }
    )



    debug('roletypes', this.props.roleTypes)

    var roleTags = reduce(roleTypes, function (memo, roleType) {
      if (roleType.active ) {
        var memberLabel = (!roleType.model || roleType.model.name === 'member') ? 'people in ' + this.props.model.name : null
        var label = memberLabel ? memberLabel : roleType.model.pluralName //hack 'cos model aint there
        memo.push(
          r(Tag, {
            label: label,
            icon: cancelIcon,
            color: roleType.color,
            onIconClick: this.props.clearTag('roleTypes', label)
          })
        )
      }
      return memo
    }.bind(this), [])

    var linkTags = reduce(linkLabels, function (memo, linkLabel, key) {
      if (linkLabel.active ) {
        debug('linkTags', key)
        memo.push(
          r(Tag, {
            label: key,
            icon: clearIcon,
            color: linkLabel.color,
            onIconClick: this.props.clearTag('linkLabels', key)
          })
        )
      }
      return memo
    }.bind(this), [])

    var tags = linkTags.concat(roleTags)



    return (
    r.div({
        className: 'graph-view '
      }, [
        r.div({ className: 'tag-control'}, [
          r.div({ className: 'tag-list' }, [
            r(TagGroup, {
              relationships: this.props.relationshipTags,
              clearTag: this.props.clearTag,
              model: this.props.model,
              cancelIcon: cancelIcon
            })
          ])
        ]),
        r(Graph, {
          //TODO replace with this.props?
          linkTypes: linkTypes,
          linkLabels: this.props.linkLabels,
          model: this.props.model,
          actions: this.props.actions,
          roleTypes: this.props.roleTypes,
          Icon: this.props.Icon
        })
      ])
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})

    var relationshipTags = getRelationshipObj(nextProps.model.relationshipGraph)


    var nextLinkTypes = getLinkTypes(
      this.state.linkTypes,
      nextProps.model.relationshipGraph
    )

    this.setState({
      relationshipTags: relationshipTags,
      linkTypes: nextLinkTypes,
    })
  },

  componentWillUpdate: function (nextProps, nextState) {
    debug('componentWillUpdate', {nextProps: nextProps, nextState: nextState})
  },

  createRelationshipToggler: function (relTypeId) {
    return function (evt) {
      var linkTypes = this.state.linkTypes
      linkTypes[relTypeId].active = !linkTypes[relTypeId].active
      this.setState({linkTypes: linkTypes })
    }.bind(this)
  }
})
