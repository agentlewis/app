//takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var h = require('create-element')
var r = require('r-dom')
var assign = require('lodash.assign')
var map = require('lodash.map')
var forEach = require('lodash.foreach')
var includes = require('lodash.includes')
var mapValues = require('lodash.mapvalues')
var debug = require('debug')('holodex:graph-view')

var store = require('base/store')
var config = require('config')

var Cola = require('./webcola-adaptor')()
var Node = require('./node-ui')
var Edge = require('./edge-ui')
var Graph = require('./graph')
var RelationshipButton = require('./relationship-button')

var prefix = Url.format(config.api)

// use some basic colors
// TODO move
var palleteColors = [
  '#d04437',
  '#205081',
  '#f6c342',
  '#3572b0',
  '#14892c',
  '#333333',
  '#707070'
]

// set steward as active by default
// TODO move
function getDefaultLinkTypes () {
  var stewardshipTypeId = prefix + '/relationshipTypes/stewardship'
  var defaultLinkTypes = {}
  defaultLinkTypes[stewardshipTypeId] = {
    active: true,
  }
  return defaultLinkTypes
}

module.exports = React.createClass({
  getInitialState: function (options) {

    var linkTypes = assign({}, getDefaultLinkTypes())

    var index = 0
    forEach(linkTypes, function (linkType) {
      linkType.color = palleteColors[index++]
    })

    var initialState = {
      linkTypes: linkTypes
    }
    debug("getInitialState() -> ", initialState)
    return initialState
  },

  render: function () {
    debug('rendering', { props: this.props , state: this.state })
    var linkTypes = this.state.linkTypes

    return(
      r.div(
        {
          className: 'graph-view'
        },
        [
          r.div(
            {
              className: 'relationship-filters'
            },
            map(linkTypes, function (linkType, linkTypeId) {
              return r(RelationshipButton, {
                active: linkType.active,
                model: linkType.model,
                color: linkType.color,
                toggleRelationship: this.createRelationshipToggler(linkTypeId)
              })
            }, this)
          ),
          r(Graph, { 
            linkTypes: linkTypes,
            model: this.props.model, 
            actions: this.props.actions
          })
        ]
      )
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})
    var linkTypes = this.state.linkTypes

    var nextLinkTypes = mapValues(linkTypes, function (linkType, linkTypeId) {
      return assign({}, linkType, {
        model: store.findById(linkTypeId)
      })
    })

    this.setState({
      linkTypes: nextLinkTypes
    })
  },

  componentWillUpdate: function (nextProps, nextState) {
    debug('componentWillUpdate', {nextProps: nextProps, nextState: nextState})
  },

  createRelationshipToggler: function (relTypeId) {
    return function (evt) {
      var linkTypes = this.state.linkTypes
      linkTypes[relTypeId].active = !linkTypes[relTypeId].active
      this.setState({linkTypes: linkTypes })
    }.bind(this)
  }
})
