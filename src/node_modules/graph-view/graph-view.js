// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:graph-view')

var config = require('config')

var Graph = require('./graph')
var RelationshipButton = require('./relationship-button')

var prefix = Url.format(config.api)

// use some basic colors
var palleteColors = require('./colors')
var getLinkTypes = require('./get-link-types')

// set steward as active by default
// TODO move
function getDefaultLinkTypes () {
  var stewardshipTypeId = prefix + '/relationshipTypes/stewardship'
  var defaultLinkTypes = {}
  defaultLinkTypes[stewardshipTypeId] = {
    active: true,
    color: palleteColors[0]
  }
  return defaultLinkTypes
}

module.exports = React.createClass({
  getInitialState: function (options) {
    var initialState = {
      linkTypes: getLinkTypes(
        getDefaultLinkTypes(),
        this.props.model.relationshipGraph
      )
    }
    debug('getInitialState() -> ', initialState)
    return initialState
  },

  render: function () {
    debug('rendering', { props: this.props, state: this.state })
    var linkTypes = this.state.linkTypes

    return (
    r.div({
        className: 'graph-view'
      }, [
        r.div(
          {
            className: 'relationship-filters'
          },
          map(linkTypes, function (linkType, linkTypeId) {
            return r(RelationshipButton, {
              active: linkType.active,
              model: linkType.model,
              color: linkType.color,
              toggleRelationship: this.createRelationshipToggler(linkTypeId)
            })
          }, this)
        ),
        r(Graph, {
          linkTypes: linkTypes,
          model: this.props.model,
          actions: this.props.actions
        })
      ])
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})

    var nextLinkTypes = getLinkTypes(
      this.state.linkTypes,
      nextProps.model.relationshipGraph
    )

    this.setState({
      linkTypes: nextLinkTypes
    })
  },

  componentWillUpdate: function (nextProps, nextState) {
    debug('componentWillUpdate', {nextProps: nextProps, nextState: nextState})
  },

  createRelationshipToggler: function (relTypeId) {
    return function (evt) {
      var linkTypes = this.state.linkTypes
      linkTypes[relTypeId].active = !linkTypes[relTypeId].active
      this.setState({linkTypes: linkTypes })
    }.bind(this)
  }
})
