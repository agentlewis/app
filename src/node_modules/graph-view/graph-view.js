// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')
var debug = require('debug')('holodex:graph-view')
var extend = require('xtend')
var reduce = require('lodash.reduce')
var Actions = require('actions')
var colaStore = require('stores/cola-store')
var TimerMixin = require('react-timer-mixin')

var TagGroup = require('./tag-group')
var Graph = require('./graph')
var LegendWidget = require('legend-widget')
var LegendItem = require('legend-item')
var Tooltip = require('tooltip')


var style = {
  index: {
    position: 'static',
    display: 'flex'
  },
  tagControl: {
    position: 'absolute',
    zIndex: 1
  },
  graphContainer: {
    width: '100%',
    height: '100%'
  }
}

module.exports = React.createClass({

  mixins: [
    Reflux.listenTo(colaStore, 'onColaUpdate'),
    TimerMixin
  ],

  contextTypes: {
    muiTheme: React.PropTypes.any
  },

  propTypes: {
    Icon: React.PropTypes.object
  },

  getInitialState: function (options) {
    return {
      nodes: colaStore.getNodes(),
      links: colaStore.getLinks(),
      queries: { active: [], inactive: [], queryMap: {} },
      width: colaStore.getWidth(),
      height: colaStore.getHeight(),
      vector: colaStore.getVector(),
      client: { x: null, y: null },
      center: [colaStore.getWidth() / 2, colaStore.getHeight() / 2],
      showTooltip: false,
      // focusAgent: { coords: [0, 0], size: null, data: null }
      focusAgent: { corners: null , data: null }
    }
  },

  onColaUpdate: function (payload) {
    debug('payload:', payload)
    this.setState(reduce(payload, function (memo, val, key) {
      memo[key] = val
      return memo
    }, {}))
  },

  render: function () {
    debug('state', this.state)
    var cancelIcon = r(
      this.props.Icon,
      { className: 'cancel-tag', icon: 'clear', onClick: null }
    )

    var props = extend(this.props, {
      cancelIcon: cancelIcon,
      handleAgentMouseOver: this.handleAgentMouseOver,
      handleAgentMouseOut: this.handleAgentMouseOut
    })
    props = extend(props, this.state)


    var legendItems = props.queries.active.reduce(function (memo, query) {
      if (query.context) {
        memo.push(r(LegendItem, { data: query }))
      }
      return memo
    }, [])

    return (
    r.div({
        className: 'graph-view ',
        style: style.index
      }, [
        r.div({ className: 'tag-control', style: style.tagControl }, [
          r.div({ className: 'tag-group' }, [
            r(TagGroup, props)
          ])
        ]),
        r.div({ className: 'graph-container', style: style.graphContainer }, [
          r(Graph, props)
        ]),
        legendItems.length > 0 ? r(LegendWidget, {
          legendItems: legendItems
        }) : null,
        this.state.showTooltip ? r(Tooltip, {
          focusAgent: this.state.focusAgent,
          center: this.state.center,
          screenWidth: this.state.width,
          screenHeight: this.state.height
        }) : null
      ])
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', { nextProps: nextProps, state: this.state })
  },

  componentWillUpdate: function (nextProps, nextState) {
    debug('componentWillUpdate', { nextProps: nextProps, nextState: nextState })
    debug('componentWillUpdate', { props: this.props, state: this.state })

  },

  componentDidMount: function () {
    debug('window', window)
    Actions.setWindowSize({
      width: window.screen.availWidth,
      height: window.screen.availHeight
    })
  },

  handleAgentMouseOver: function (data, size) {
    var self = this
    return function (corners) {
      if (!self.state.showTooltip) {
          self.setState({
            showTooltip: true,
            focusAgent: {
              corners: corners,
              data: data
            }
          })
      }
    }.bind(this)
  },

  handleAgentMouseOut: function (data) {
    var self = this
    return function () {
      if (data.id === self.state.focusAgent.data.id) {
        self.setState({
          showTooltip: false,
          focusAgent: { corners: null, data: null }
        })
      }
    }
  }

})
