//takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var h = require('create-element')
var r = require('r-dom')
var clone = require('lodash.clone')
var assign = require('lodash.assign')
var map = require('lodash.map')
var forEach = require('lodash.foreach')
var debug = require('debug')('holodex:graph-view')

var store = require('base/store')
var config = require('config')

var Cola = require('./webcola-adaptor')()
var Node = require('./node-ui')
var Edge = require('./edge-ui')
var Graph = require('./graph')
var RelationshipButton = require('./relationship-button')

var prefix = Url.format(config.api)

// use some basic colors
// TODO move
var palleteColors = [
  '#d04437',
  '#205081',
  '#f6c342',
  '#3572b0',
  '#14892c',
  '#333333',
  '#707070'
]

// set steward as active by default
// TODO move
var stewardshipTypeId = prefix + '/relationshipTypes/stewardship'
var DEFAULT_TYPES = {}
DEFAULT_TYPES[stewardshipTypeId] = {
  active: true,
  data: store.findById(stewardshipTypeId)
}

module.exports = React.createClass({
  getInitialState: function (options) {

    var linkTypes = assign({}, DEFAULT_TYPES)

    var index = 0
    forEach(linkTypes, function (linkType) {
      linkType.color = palleteColors[index++]
    })

    return {
      linkTypes: linkTypes,
    }
  },

  render: function () {
    debug('rendering', { props: this.props , state: this.state })
    var linkTypes = this.state.linkTypes

    return(
      r.div({ id: 'graph-view' }, 
        r.div(
          { id: 'relationship-filters' },
          map(linkTypes, function (linkType, linkTypeId) {
            return r(RelationshipButton, {
              active: linkType.active,
              data: linkType.data
              color: linkType.color
              toggleRelationship: this.createRelationshipToggler(linkTypeId)
            })
          }, this)
        ),
        r(Graph, { 
          linkTypes: linkTypes,
          model: this.props.model, 
          actions: this.props.actions,
          prefix: this.state.prefix
        })
      )
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})
  },

  componentWillUpdate: function (nextProps, nextState) {
    debug('componentWillUpdate', {nextProps: nextProps, nextState: nextState})
  },

  createRelationshipToggler: function (relTypeId) {
    return function (evt) {
      var linkTypes = this.state.linkTypes
      linkTypes[relTypeId].active = !linkTypes[relTypeId].active
      this.setState({linkTypes: linkTypes })
    }
  }
})
