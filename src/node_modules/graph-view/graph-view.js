//takes node and edge data and out node and edge svgs
//main
var React               = require('react');

//libraries and components
var Url = require('url')
var Cola                = require('graph-view/webcola-adaptor')();
var Node                = require('graph-view/node-ui');
var Edge                = require('graph-view/edge-ui');
var Graph               = require('graph-view/graph');
var RelationshipButton  = require('graph-view/relationship-button');
var config              = require('config');
var pallete             = [
    '#d04437',
    '#205081',
    '#f6c342',
    '#3572b0',
    '#14892c',
    '#333333',
    '#707070'
]

//helpers
var clone = require('lodash.clone')
var h                   = require('create-element');
var xtend               = require('xtend');
var map = require('lodash.map')

//debug
var debug     = require('debug')("graph-view");

//hardcoded label verbs
var labelMap = {
  steward: 'stewards',
  stewardee: 'stewarded by',
  group: 'member'
}

module.exports = React.createClass({
  getInitialState: function (options) {

    //set steward as active by default
    var prefix = Url.format(config.api)
    var stewardType = prefix + '/relationshipTypes/stewardship';

    var relationshipObj = {}
    relationshipObj[stewardType] = true;

    return {
      // not used
      prefix: prefix,
      relationshipObj: relationshipObj,
      palleteMap: {}
    }
  },

  render: function () {
    debug('rendering', { props: this.props , state: this.state })
    var relationshipObj = this.state.relationshipObj;
    var palleteMap = this.state.palleteMap

    var predicates = Object.keys(relationshipObj).map(function (rel) {
      var label = rel.split('/').pop();
      return { 
        active: relationshipObj[rel], 
        relationshipId: rel, 
        label: labelMap[label] 
      };
    });

    return(
      React.createElement("div", { id: 'graph-view' }, 
          React.createElement('div', { id: 'relationship-filters' },
            predicates.map(function (pred, i) {
              return React.createElement(
                RelationshipButton, 
                { 
                  active: relationshipObj[pred.relationshipId],
                  ref: 'filter-' + (i+1),
                  datum: pred, 
                  toggleRelationship: this.toggleRelationship,
                  color: this.state.palleteMap[pred.relationshipId]
                }
              )
            }.bind(this))
          ),
        React.createElement(
          Graph, 
          { 
            predicates: predicates, 
            model: this.props.model, 
            actions: this.props.actions,
            palleteMap: palleteMap,
            prefix: this.state.prefix
          }
        )
      )
    );
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state});
    var relationshipTypes = map(this.props.model.relationships, function (rel) {
      return rel.type.getId()
    })
    var relationshipObj = this.state.relationshipObj;
    var nextPalleteMap = clone(this.state.palleteMap);
    var nextRelationshipObj = clone(relationshipObj);
   
    for (var i=0;i<relationshipTypes.length;i++) { 
      //TODO only handles 7 colors with pale background
      var rel = relationshipTypes[i];
      nextPalleteMap[rel] = pallete[i];
      nextRelationshipObj[rel] = (relationshipObj[rel]) ? true : false;
    }

    debug('palleteMap', relationshipTypes, nextPalleteMap)
    this.setState({ relationshipObj: nextRelationshipObj, palleteMap: nextPalleteMap })
  },

  componentWillUpdate: function (nextProps, nextState) {
  },

  toggleRelationship: function (evt) {
    var relId = evt.target.getAttribute("data-relationshipid");
    var relationshipObj = this.state.relationshipObj;
    relationshipObj[relId] = !relationshipObj[relId];
    this.setState({relationshipObj: relationshipObj });
  }
})

