//takes node and edge data and out node and edge svgs
//main
var React 		= require('react');

//libraries and components
var Cola 			= require('graph-view/webcola-adaptor')();
var Node 			= require('graph-view/node-ui');
var Edge 			= require('graph-view/edge-ui');

//helpers
var makeLinks	= require('graph-view/make-links');
var _ 				= require('lodash');
var h 				= require('create-element');

//debug
var debug 		= require('debug')("graph-view");

module.exports = React.createClass({

	getInitialState: function (options) {
		debug('getInitialState')
		var predicates		= this.props.predicates || []
		 , 	model 				= this.props.model
		 , 	width 				= 700
		 ,	height 				= 700;

		 var nodes				= model.relatedNodes
		 ,	edgeObj 			= model.relatedEdges
		 ,	relationships	= model.relationships.models
		 ,	links
		 ,  cola;

		nodes.forEach(function (entity, i) { entity.index = i });

		//compute links
		links = makeLinks(predicates, edgeObj, nodes);

		cola = Cola
			.size([width, height])
			.avoidOverlaps(true)
			.linkDistance(70)
			// .nodes(nodes)
			// .links(links)

		return {
			width: width,
			height: height,
			cola: cola,
			rect: {
				top: null,
				left: null				
			}
		}
	},

	render: function () {
		var nodes = this.state.cola.nodes();
		var edges = this.state.cola.links();
		var actions = this.props.actions;

		debug('rendering', { props: this.props })
		debug('rendering nodes', { nodes: nodes })
		return(
			React.createElement("div", null, 
				React.createElement('div', { className: 'node-group' },
					this.state.rect
						? nodes.map(function (node) {
							return React.createElement(Node, { datum: node, actions: actions, key: node.id, rect: this.state.rect })
							}.bind(this))
						: null
				),
				React.createElement("svg", 
					{
						id: 'graph-view-svg',
						width: this.state.width, 
						height: this.state.height 
					}, 
					React.createElement("defs"),
					// React.createElement("g", {className: "node-group"}, 
					// 	nodes.map(function (node) {
					// 		return React.createElement(Node, { datum: node, actions: actions, key: node.id })
					// 	})
					// ), 
					React.createElement("g", {className: "edge-group"}, 
						edges.map(function (edge) {
							return React.createElement(Edge, { datum: edge, actions: actions, key: edge.id })
						})
					)
				)
			)
		);
	},

	componentDidMount: function () {
		debug('componentDidMount')
		var DOMNode = this.getDOMNode();
		var rect = DOMNode.getBoundingClientRect();
		var defs = DOMNode.getElementsByTagName('defs')[0];
		var marker = h('marker', 
			{ 
				id: 'arrowhead',
        viewBox:"0 0 10 10", 
        refX:"1", refY:"5",
        markerWidth:"6", 
        markerHeight:"6",
        orient:"auto"
			},
			h('path', { d: "M 0 0 L 10 5 L 0 10 z", fill: 'grey' })
		);

		//tick listener triggers setState, triggers re-render
		this.state.cola.on('tick', function () {
			this.setState({ nodes: this.state.cola.nodes() })
		}.bind(this));

		//trigger force graph
		this.state.cola.start();

		// find the svg coordinates in relation to the window
		this.setState({ rect: { top: rect.top, 	left: rect.left } });

		//insert our arrowhead marker 'cos React doesn't support it? :(
		defs.insertAdjacentHTML('beforeend', marker)
	},

	componentWillReceiveProps: function (nextProps) {
		debug('componentWillReceiveProps', {nextProps: nextProps});
		var predicates		= nextProps.predicates || []
		 , 	model 				= nextProps.model;

		 var nodes				= model.relatedNodes
		 ,	edgeObj 			= model.relatedEdges
		 ,	relationships	= model.relationships.models
		 ,	links
		 , 	cola;

		if (nodes.length > 0) {
			nodes.forEach(function (entity, i) { entity.index = i });

			//compute links
			links = makeLinks(predicates, edgeObj, nodes);

			cola = this.state.cola.nodes(nodes).links(links);
			this.setState({ cola: cola })
			this.state.cola.start()

		}

		debug({links: links})
	},

	// shouldComponentUpdate: function (nextProps, nextState) {
	// 	//TODO use immutable.js
	// 	//Test if new data recieved, if true rerender
	// 	// if (nextProps.nodes === this.props.nodes 
	// 	// 		|| nextProps.edges === this.props.edges) return false;
	// 	// else return true;
	// 	return true;
	// },

	componentWillUpdate: function (nextProps, nextState) {




	}





})

