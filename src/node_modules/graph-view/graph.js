// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')

var colaStore = require('stores/cola-store')

var h = require('create-element')
var debug = require('debug')('holodex:graph-view:graph')
var Transform = require('d3-transform')

var router = require('router')
var Node = require('./node-ui')
var EdgeGroup = require('./edge-group')
var vars = require('ui/vars')

var transform = Transform()
  .translate(function (d) { return [d.x, d.y]})
  .scale(function (d) { return d.scale  })

module.exports = React.createClass({
  mixins: [
    Reflux.listenTo(colaStore, 'onColaUpdate')
  ],

  propTypes: {
    model: React.PropTypes.object,
    route: React.PropTypes.object,
    Icon: React.PropTypes.object
  },

  getInitialState: function (options) {
    return {
      nodes: colaStore.getNodes(),
      links: colaStore.getLinks(),
      queries: { active: [], inactive: [], queryMap: {} },
      width: colaStore.getWidth(),
      height: colaStore.getHeight(),
      dragging: false,
      dragStart: false,
      client: { x: null, y: null },
      dragOffset: { x: 0, y: 0 },
      scale: 1,
      scaleRange: [0.41, 0.51, 0.64, 0.8, 1, 1.2, 1.44, 1.73, 2.07]
    }
  },

  onColaUpdate: function (graph) {
    // debug('graph:', graph)
    if (graph.nodes) {
      this.setState({
        nodes: graph.nodes,
        links: graph.links,
        queries: graph.queries
      })
    } else if (graph.width) {
      this.setState({
        width: graph.width,
        height: graph.height
      })
    }
  },

  render: function () {
    // debug('props', this.props, this.state)
    var nodes = this.state.nodes
    var edges = this.state.links
    var transformString = transform({
        x: this.state.dragOffset.x,
        y: this.state.dragOffset.y,
        scale: this.state.scale
    })
    debug('transformString', transformString)

    return (
      r.div({ id: 'graph' }, [
        r.svg({
          // draggable: true, //NOTE React does not support native drag events on svgs
          className: 'graph-svg',
          width: this.state.width,
          height: this.state.height,
          style: { cursor: this.state.dragging ? 'move' : 'auto' },
          onMouseDown: this.handleMouseDown,
          onMouseMove: this.handleMouseMove,
          onMouseUp: this.handleMouseUp,
          onWheel: this.handleWheel
          // onDragStart: this.handleDragStart,


        }, [
          r.g(
            {
              className: 'transform-layer',
              transform: transformString
            },
            [
              r.g({className: 'halo-group'}, [
                r(EdgeGroup,
                    {
                      queries: this.state.queries,
                      nodes: nodes,
                      edges: edges,
                      model: this.props.model,
                      route: this.props.route
                    }
                  )
                ]
              ),
              r.g({className: 'node-group'}, [
                nodes.map(function (node) {
                  // debug('node', node)
                  return r(Node,
                    {
                      node: node,
                      key: node.id,
                      Icon: this.props.Icon,
                      handleClick: this.handleAgentClick(node.data)
                    }
                  )
                }.bind(this))
              ]
            )
          ])
        ])
      ])
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps}, this.state)
  },

  getHref: function (model) {
    return router.format({ id: model.id })
  },

  navigate: router.navigate.bind(router),

  handleAgentClick: function (model) {
    var self = this
    return function () {
      // self.props.setColaTick(false)
      debug('handleClick', model)
      self.navigate(self.getHref(model))
    }
  },

  handleMouseDown: function (e) {
    debug('mousedown', e.target.className.baseVal)
    if (e.target.className.baseVal === 'graph-svg') {
      this.setState({
        dragging: true,
        // dragStart: true,
        client: { x: e.clientX, y: e.clientY }
      })
    }
  },

  handleMouseMove: function (e) {
    if (this.state.dragging) {
      var dx = (e.clientX - this.state.client.x)
      var dy = (e.clientY - this.state.client.y)

      this.setState({
        dragOffset: {
          x: this.state.dragOffset.x + dx,
          y: this.state.dragOffset.y + dy
        },
        client: { x: e.clientX, y: e.clientY },
      })
    }
  },

  handleMouseUp: function (e) {
    debug('mouseup', e)
    this.setState({
      dragging: false,
      client: { x: null, y: null },
    })
  },

  handleWheel: function (e) {
    debug('wheel', e.deltaMode, e.deltaX, e.deltaY, e.deltaZ)
    var scaleIndex = this.state.scaleRange.indexOf(this.state.scale)

    if (e.deltaY > 0) {
      this.setState({
        scale: (scaleIndex === this.state.scaleRange.length-1) ?
          this.state.scaleRange[scaleIndex] :
          this.state.scaleRange[scaleIndex + 1]
      })
    } else {
      this.setState({
        scale: (scaleIndex === 0) ?
          this.state.scaleRange[0] :
          this.state.scaleRange[scaleIndex - 1]
      })
    }

  }

})
