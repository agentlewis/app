// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')

var colaStore = require('stores/cola-store')
var filtersStore = require('stores/filters-store')
var Actions = require('actions')

var h = require('create-element')
var debug = require('debug')('holodex:graph-view:graph')

var formatGraphData = require('./format-graph-data')

var router = require('router')
var Cola = require('./webcola-adaptor')()
var Node = require('./node-ui')
var Edge = require('./edge-ui')
var FilterGroup = require('./filter-group')
var vars = require('ui/vars')

module.exports = React.createClass({
  mixins: [
    Reflux.listenTo(colaStore, 'onColaUpdate'),
    Reflux.listenTo(filtersStore, 'onFiltersUpdate'),
  ],

  propTypes: {
    model: React.PropTypes.object,
  },

  getInitialState: function (options) {

    return {
      nodes: colaStore.getNodes(),
      links: colaStore.getLinks(),
      filtersByType: filtersStore.getFiltersByType()
    }
  },

  onColaUpdate: function (graph) {
    debug('graph:', graph)
    this.setState({
      nodes: graph.nodes,
      links: graph.links,
    })
  },

  onFiltersUpdate: function (update) {
    this.setState({ filtersByType: update.filtersByType })
  },


  render: function () {
    debug('props', this.props, this.state)
    var nodes = this.state.nodes
    var edges = this.state.links
    var filtersByType = this.state.filtersByType
    

    return (
      r.div({ id: 'graph' }, [
        r.svg({
          className: 'graph-svg',
            width: vars.graphSize.width,
            height: vars.graphSize.height
        }, [
          r.defs(),
          r.g({className: 'halo-group'}, [
            r(FilterGroup,
                {
                  filtersByType: filtersByType,
                  nodes: nodes,
                  edges: edges,
                  model: this.props.model
                }
              )
            ]
          ),
          // r.g({className: 'edge-group'}, [
          //   edges.map(function (edge) {
          //     return r(Edge,
          //       {
          //         edge: edge,
          //         key: edge.id
          //       }
          //     )
          //   })
          //   ]
          // ),
          r.g({className: 'node-group'}, [
            nodes.map(function (node) {
              // debug('node', node)
              return r(Node,
                {
                  node: node,
                  key: node.id,
                  Icon: this.props.Icon,
                  handleClick: this.handleClick(node.model)
                }
              )
            }.bind(this))
          ]),

        ])
      ])
    )
  },

  componentDidMount: function () {
    debug('componentDidMount', this.props)
    var defs = this.getDOMNode().getElementsByTagName('defs')[0]
    var marker = h('marker',
      {
        id: 'arrowhead',
        viewBox:"0 0 10 10",
        refX:"1", refY:"5",
        markerWidth:"6",
        markerHeight:"6",
        orient:"auto"
      },
      h('path', { d: 'M 0 0 L 10 5 L 0 10 z', fill: 'grey' })
    )

    var circleClip20 = h('clipPath', { id: 'circle-clip-20' },
      h('circle', { cx: '20', cy: '20', r: '20' })
    )

    // insert our arrowhead marker and clip-path 'cos React doesn't support it? :(
    defs.insertAdjacentHTML('beforeend', marker)
    defs.insertAdjacentHTML('beforeend', circleClip20)
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps}, this.state)
  },

  getHref: function (model) {
    return router.format({ id: model.id })
  },

  navigate: router.navigate.bind(router),

  handleClick: function (model) {
    var self = this
    return function () {
      // self.props.setColaTick(false)
      debug('handleClick', model)
      self.navigate(self.getHref(model))
    }
  }
})
