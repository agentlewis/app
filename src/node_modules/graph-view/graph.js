//takes node and edge data and out node and edge svgs
//main
var React               = require('react')
var r                   = require('r-dom')

//libraries and components
var Cola                = require('graph-view/webcola-adaptor')()
var Node                = require('graph-view/node-ui')
var Edge                = require('graph-view/edge-ui')

//helpers
var makeLinks           = require('graph-view/make-links')
var h                   = require('create-element')
var xtend               = require('xtend')

//debug
var debug     = require('debug')("graph-view:graph")

module.exports = React.createClass({
  propTypes: {
    predicates: React.PropTypes.array,
    model:      React.PropTypes.object,
    actions:    React.PropTypes.object
  },

  getInitialState: function (options) {
    debug('getInitialState')
    var predicates    = this.props.predicates || []
     ,  model         = this.props.model
     ,  width         = 700
     ,  height        = 700

     var nodes        = model.relatedNodes
     ,  edgeObj       = model.relatedEdges
     ,  relationships = model.relationships.models
     ,  links
     ,  cola

    nodes.forEach(function (entity, i) { entity.index = i })

    //compute links
    links = makeLinks(predicates, edgeObj, nodes)

    cola = Cola
      .size([width, height])
      .avoidOverlaps(true)
      .linkDistance(80)
      .convergenceThreshold(1e-4)
      // .nodes(nodes)
      // .links(links)

    return {
      width: width,
      height: height,
      cola: cola
    }
  },

  render: function () {
    var nodes           = this.state.cola.nodes()
    var edges           = this.state.cola.links()
    var actions         = this.props.actions
    var palleteMap      = this.props.palleteMap
    var prefix          = this.props.prefix

    return(
      r.div({ id: 'graph' }, [
        r.svg( 
          {
            id: 'graph-svg',
            width: this.state.width, 
            height: this.state.height 
          },
          [ 
            r.defs(),
            r.g({className: "edge-group"}, [
              edges.map(function (edge) {
                return r(Edge, 
                  {   
                    datum: edge, 
                    actions: actions, 
                    key: edge.model.getId(),    
                    color: palleteMap[(prefix + edge.model.get('relationshipType').id)]
                  }
                )
              }.bind(this)) ]
            ),
            r.g({className: "node-group"}, [
             nodes.map(function (node) {
                return r(Node, 
                  { 
                    datum: node, 
                    actions: actions, 
                    key: node.id 
                  }
                )
             })
            ]), 
          ]
        )
      ])
    )
  },

  componentDidMount: function () {
    debug('componentDidMount')
    var defs = this.getDOMNode().getElementsByTagName('defs')[0]
    var marker = h('marker', 
      { 
        id: 'arrowhead',
        viewBox:"0 0 10 10", 
        refX:"1", refY:"5",
        markerWidth:"6", 
        markerHeight:"6",
        orient:"auto"
      },
      h('path', { d: "M 0 0 L 10 5 L 0 10 z", fill: 'grey' })
    )

    var cirlceClip20 = h('clipPath', { id: 'circle-clip-20' },
      h('circle', { cx: '20', cy: '20', r: '20' })
    )

    //tick listener triggers setState, triggers re-render
    this.state.cola.on('tick', function () {
      this.setState({ nodes: this.state.cola.nodes() })
    }.bind(this))

    //trigger force graph
    this.state.cola.start(10, 15, 20)

    //insert our arrowhead marker and clip-path 'cos React doesn't support it? :(
    defs.insertAdjacentHTML('beforeend', marker)
    defs.insertAdjacentHTML('beforeend', cirlceClip20)
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps})
    var model         = nextProps.model
    var predicates    = nextProps.predicates.reduce(function (result, pred) {
      //array of active relationShip Ids
      if (pred.active) result.push(pred.relationshipId)
      return result
    }, [])

    // //TEMP HACK
    // predicates.push("http://localhost:3000/api/relationshipTypes/steward")

    var nodes         = model.relatedNodes
     ,  edgeObj       = model.relatedEdges
     ,  links
     ,  cola

    if (nodes.length > 0) {
      nodes.forEach(function (entity, i) { entity.index = i })

      //compute links
      links = makeLinks(predicates, edgeObj, nodes)
      debug('links', links, edgeObj, predicates)

      cola = this.state.cola.nodes(nodes).links(links)
      this.setState({ cola: cola })
      this.state.cola.start(10, 15, 20)
    }
  }

  //componentDidUpdate: function () {
  //},

  // shouldComponentUpdate: function (nextProps, nextState) {
  //  //TODO use immutable.js
  //  //Test if new data recieved, if true rerender
  //  // if (nextProps.nodes === this.props.nodes 
  //  //    || nextProps.edges === this.props.edges) return false
  //  // else return true
  //  return true
  // },

  //componentWillUpdate: function (nextProps, nextState) {
  //}

})

