// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')

var colaStore = require('stores/cola-store')

var h = require('create-element')
var debug = require('debug')('holodex:graph-view:graph')

var router = require('router')
var Node = require('./node-ui')
var EdgeGroup = require('./edge-group')
var vars = require('ui/vars')

module.exports = React.createClass({
  mixins: [
    Reflux.listenTo(colaStore, 'onColaUpdate')
  ],

  propTypes: {
    model: React.PropTypes.object,
    route: React.PropTypes.object,
    Icon: React.PropTypes.object
  },

  getInitialState: function (options) {
    return {
      nodes: colaStore.getNodes(),
      links: colaStore.getLinks(),
      queries: { active: [], inactive: [], queyMap: {} },
      width: colaStore.getWidth(),
      height: colaStore.getHeight()
    }
  },

  onColaUpdate: function (graph) {
    debug('graph:', graph)
    if (graph.nodes) {
      this.setState({
        nodes: graph.nodes,
        links: graph.links,
        queries: graph.queries
      })
    } else if (graph.width) {
      this.setState({
        width: graph.width,
        height: graph.height
      })
    }
  },

  render: function () {
    debug('props', this.props, this.state)
    var nodes = this.state.nodes
    var edges = this.state.links

    debug('nodes', nodes)
    debug('edges', edges)

    return (
      r.div({ id: 'graph' }, [
        r.svg({
          className: 'graph-svg',
            width: this.state.width,
            height: this.state.height
        }, [
          r.defs(),
          r.g({className: 'halo-group'}, [
            r(EdgeGroup,
                {
                  queries: this.state.queries,
                  nodes: nodes,
                  edges: edges,
                  model: this.props.model,
                  route: this.props.route
                }
              )
            ]
          ),
          r.g({className: 'node-group'}, [
            nodes.map(function (node) {
              // debug('node', node)
              return r(Node,
                {
                  node: node,
                  key: node.id,
                  Icon: this.props.Icon,
                  handleClick: this.handleClick(node.data)
                }
              )
            }.bind(this))
          ])
        ])
      ])
    )
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps}, this.state)
  },

  getHref: function (model) {
    return router.format({ id: model.id })
  },

  navigate: router.navigate.bind(router),

  handleClick: function (model) {
    debug('model', model)
    var self = this
    return function () {
      // self.props.setColaTick(false)
      debug('handleClick', model)
      self.navigate(self.getHref(model))
    }
  }
})
