// takes node and edge data and out node and edge svgs

var React = require('react')
var r = require('r-dom')
var h = require('create-element')
var debug = require('debug')('holodex:graph-view:graph')

var Cola = require('./webcola-adaptor')()
var Node = require('./node-ui')
var Edge = require('./edge-ui')
var formatGraphData = require('./format-graph-data')

module.exports = React.createClass({
  propTypes: {
    model: React.PropTypes.object,
    actions: React.PropTypes.object,
    roleTypes: React.PropTypes.object
  },

  getInitialState: function (options) {
    debug('getInitialState')
    //TODO these as props
    var width = 700
    var height = 700
    var defaultLength = 90
    var centerCoords = [width/2, height/2]
    var self = this

    var cola = Cola
      .size([width, height])
      .avoidOverlaps(true)
      .linkDistance(function (l) { if (l.length) { return l.length } else { return defaultLength }})
      .convergenceThreshold(1e-4)

    cola.on('tick', function () {
      debug('tick')
      self.setState({ nodes: cola.nodes() })
    })

    // trigger force graph
    cola.start(10, 15, 20)

    return {
      nodes: null,
      width: width,
      height: height,
      cola: cola,
      constraints: [],
      centerCoords: centerCoords,
      contextAgentIndex: null
    }
  },

  render: function () {
    var nodes = this.state.nodes || this.state.cola.nodes()
    var edges = this.state.cola.links()
    var actions = this.props.actions

    if (nodes.length > 0) debug('nodes', nodes[1])

    return (
      r.div({ id: 'graph' }, [
        r.svg({
          className: 'graph-svg',
            width: this.state.width,
            height: this.state.height
        }, [
          r.defs(),
          r.g({className: 'edge-group'}, [
            edges.map(function (edge) {
              return r(Edge,
                {
                  edge: edge,
                  key: edge.id,
                  actions: actions
                }
              )
            })]
          ),
          r.g({className: 'node-group'}, [
            nodes.map(function (node) {
              return r(Node,
                {
                  node: node,
                  key: node.id,
                  actions: actions
                }
              )
            })
          ])
        ])
      ])
    )
  },

  componentDidMount: function () {
    debug('componentDidMount')
    var defs = this.getDOMNode().getElementsByTagName('defs')[0]
    var marker = h('marker',
      {
        id: 'arrowhead',
        viewBox: '0 0 10 10',
        refX: '1', refY: '5',
        markerWidth: '6',
        markerHeight: '6',
        orient: 'auto'
      },
      h('path', { d: 'M 0 0 L 10 5 L 0 10 z', fill: 'grey' })
    )

    var circleClip20 = h('clipPath', { id: 'circle-clip-20' },
      h('circle', { cx: '20', cy: '20', r: '20' })
    )

    // insert our arrowhead marker and clip-path 'cos React doesn't support it? :(
    defs.insertAdjacentHTML('beforeend', marker)
    defs.insertAdjacentHTML('beforeend', circleClip20)
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps})

    var model = nextProps.model
    var linkTypes = nextProps.linkTypes
    var linkLabels = nextProps.linkLabels
    var graph = model.relationshipGraph
    var roleTypes = nextProps.roleTypes
    var contextAgentId = model.getId()
    var centerCoords = this.state.centerCoords

    // compute links
    var nodesAndLinks = formatGraphData(linkLabels, graph, roleTypes, contextAgentId, centerCoords)
    var nodes = nodesAndLinks[0]
    var links = nodesAndLinks[1]
    var idToIndex = nodesAndLinks[2]
    debug('idToIndex', idToIndex)


    if (nodes.length > 0) {
      nodes.forEach(function (entity, i) { entity.index = i })

      var cola = this.state.cola
        .nodes(nodes)
        .links(links)

      // if (this.state.constraints.length < 1) {
      //   cola.constraints(constraints)
      //   this.setState({ constraints: constraints })
      // }

      this.setState({ cola: cola, contextAgentIndex: idToIndex[contextAgentId]  })
      this.state.cola.start(10, 15, 20)
    }
  }
})
