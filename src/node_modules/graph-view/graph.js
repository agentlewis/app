// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')


var h = require('create-element')
var debug = require('debug')('holodex:graph-view:graph')

var router = require('router')
var Cola = require('./webcola-adaptor')()
var Node = require('./node-ui')
var Edge = require('./edge-ui')
var vars = require('ui/vars')

var getTagData = require('./get-tag-data')
var formatGraphData = require('./format-graph-data')

var contains = require('lodash.contains')
var raf = require('raf')
var interpolate = require('util/interpolate')
var ease = require('eases/cubic-in-out')


function ensurePostioning (model, nodes) {
  if (model['@type'] === 'Group' && model.parentGroups.length > 0) {
    return nodes.reduce(function (memo, node) {
      if (model.parentGroups[0].getId() === node.id) { node.y = 0 } //assumes 1 parent
      memo.push(node)
      return memo
    }, [])
  }
  else {
    return nodes
  }
}

module.exports = React.createClass({
  propTypes: {
    model: React.PropTypes.object,
    actions: React.PropTypes.object,
  },

  getInitialState: function (options) {
    return {
      start: false
    }
  },

  render: function () {
    debug('nodes', this.props.nodes)
    var nodes = this.props.nodes || []
    var edges = this.props.links || []
    // debug('nodes', nodes)
    return (
      r.div({ id: 'graph' }, [
        r.svg({
          className: 'graph-svg',
            width: vars.graphSize.width,
            height: vars.graphSize.height
        }, [
          r.defs(),
          r.g({className: 'edge-group'}, [
            edges.map(function (edge) {
              return r(Edge,
                {
                  edge: edge,
                  key: edge.id
                }
              )
            })]
          ),
          r.g({className: 'node-group'}, [
            nodes.map(function (node) {
              debug('node', node)
              return r(Node,
                {
                  node: node,
                  key: node.id,
                  Icon: this.props.Icon,
                  handleClick: this.handleClick(node.model)
                }
              )
            }.bind(this))
          ])
        ])
      ])
    )
  },

  componentDidMount: function () {
    debug('componentDidMount', this.props)
    var defs = this.getDOMNode().getElementsByTagName('defs')[0]
    var marker = h('marker',
      {
        id: 'arrowhead',
        viewBox:"0 0 10 10",
        refX:"1", refY:"5",
        markerWidth:"6",
        markerHeight:"6",
        orient:"auto"
      },
      h('path', { d: 'M 0 0 L 10 5 L 0 10 z', fill: 'grey' })
    )

    var circleClip20 = h('clipPath', { id: 'circle-clip-20' },
      h('circle', { cx: '20', cy: '20', r: '20' })
    )

    // insert our arrowhead marker and clip-path 'cos React doesn't support it? :(
    defs.insertAdjacentHTML('beforeend', marker)
    defs.insertAdjacentHTML('beforeend', circleClip20)

    this.props.cola.start(10, 15, 20)
    this.setState({start: true })

  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps})
    if (!this.state.start) {
      nextProps.cola.start(10, 15, 20) 
      this.setState({ start: true })
    }

  },

  animateGraph: require('animate/animate-graph'),

  getHref: function (model) {
    return router.format({ id: model.id })
  },

  navigate: router.navigate.bind(router),

  handleClick: function (model) {
    var self = this
    return function () {
      debug('handleClick', model)
      self.navigate(self.getHref(model))
    }
  }
})
