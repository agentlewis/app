//takes node and edge data and out node and edge svgs
//main
var React               = require('react');

//libraries and components
var Cola                = require('graph-view/webcola-adaptor')();
var Node                = require('graph-view/node-ui');
var Edge                = require('graph-view/edge-ui');
var config              = require('uiconfig');

//helpers
var makeLinks           = require('graph-view/make-links');
var _                   = require('lodash');
var h                   = require('create-element');
var xtend               = require('xtend');

//debug
var debug     = require('debug')("graph-view:graph");

module.exports = React.createClass({
  getInitialState: function (options) {
    debug('getInitialState')
    var predicates    = this.props.predicates || []
     ,  model         = this.props.model
     ,  width         = 700
     ,  height        = 700;

     var nodes        = model.relatedNodes
     ,  edgeObj       = model.relatedEdges
     ,  relationships = model.relationships.models
     ,  links
     ,  cola

    nodes.forEach(function (entity, i) { entity.index = i });

    //compute links
    links = makeLinks(predicates, edgeObj, nodes);

    cola = Cola
      .size([width, height])
      .avoidOverlaps(true)
      .linkDistance(80)
      .convergenceThreshold(1e-4)
      // .nodes(nodes)
      // .links(links)

    return {
      width: width,
      height: height,
      cola: cola
    }
  },

  render: function () {
    var nodes           = this.state.cola.nodes();
    var edges           = this.state.cola.links();
    var actions         = this.props.actions;

    debug('rendering', { props: this.props , state: this.state })
    return(
      React.createElement("div", { id: 'graph' }, 
        React.createElement('div', { className: 'node-group' },
          this.props.svgRect.top
            ? nodes.map(function (node) {
              return React.createElement(
                Node, 
                { 
                  datum: node, 
                  actions: actions, 
                  key: node.id, 
                  svgRect: this.props.svgRect 
                }
              )
              }.bind(this))
            : null
        ),
        React.createElement("svg", 
          {
            id: 'graph-svg',
            width: this.state.width, 
            height: this.state.height 
          }, 
          React.createElement("defs"),
          // React.createElement("g", {className: "node-group"}, 
          //  nodes.map(function (node) {
          //    return React.createElement(Node, { datum: node, actions: actions, key: node.id })
          //  })
          // ), 
          React.createElement("g", {className: "edge-group"}, 
            edges.map(function (edge) {
              return React.createElement(
                Edge, 
                { 
                  datum: edge, 
                  actions: actions, 
                  key: edge.model._values['@id'],
                  color: this.props.palleteMap[edge.model._values.relationshipType]
                }
              )
            }.bind(this))
          )
        )
      )
    );
  },

  componentDidMount: function () {
    debug('componentDidMount')
    var defs = this.getDOMNode().getElementsByTagName('defs')[0];
    var marker = h('marker', 
      { 
        id: 'arrowhead',
        viewBox:"0 0 10 10", 
        refX:"1", refY:"5",
        markerWidth:"6", 
        markerHeight:"6",
        orient:"auto"
      },
      h('path', { d: "M 0 0 L 10 5 L 0 10 z", fill: 'grey' })
    );

    //tick listener triggers setState, triggers re-render
    this.state.cola.on('tick', function () {
      this.setState({ nodes: this.state.cola.nodes() })
    }.bind(this));

    //trigger force graph
    this.state.cola.start(10, 15, 20);

    //insert our arrowhead marker 'cos React doesn't support it? :(
    defs.insertAdjacentHTML('beforeend', marker)
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps});
    var model         = nextProps.model;
    var predicates    = nextProps.predicates.reduce(function (result, pred) {
      //array of active relationShip Ids
      if (pred.active) result.push(pred.relationshipId)
      return result;
    }, []);

    // //TEMP HACK
    // predicates.push("http://localhost:3000/api/relationshipTypes/steward")

    var nodes         = model.relatedNodes
     ,  edgeObj       = model.relatedEdges
     ,  links
     ,  cola;

    if (nodes.length > 0) {
      nodes.forEach(function (entity, i) { entity.index = i });

      //compute links
      links = makeLinks(predicates, edgeObj, nodes);
      debug('links', links, edgeObj, predicates)

      cola = this.state.cola.nodes(nodes).links(links);
      this.setState({ cola: cola })
      this.state.cola.start(10, 15, 20)
    }
  }

  //componentDidUpdate: function () {
  //},

  // shouldComponentUpdate: function (nextProps, nextState) {
  //  //TODO use immutable.js
  //  //Test if new data recieved, if true rerender
  //  // if (nextProps.nodes === this.props.nodes 
  //  //    || nextProps.edges === this.props.edges) return false;
  //  // else return true;
  //  return true;
  // },

  //componentWillUpdate: function (nextProps, nextState) {
  //}

})

