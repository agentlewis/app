var Node = require('graph-view/node-ui')
var test = require('tape')
var React = require('react')
var r = require('r-dom')
var _ = require('lodash')
var random = require('rnd')
var Graph = require('graph-view/graph')
var Node = require('graph-view/node-ui')
var makeLinks = require('graph-view/make-links')

// var ReactTestUtils = require('react-test-utils')
require('react-svg-patch')


//setup objects
var nodes = []
var relationshipType = 'relType-1'
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
var entityIds = arr.map(function (i) { return 'entity-'+i })
var edgeObj = {}


var datum = {
    image: 'http://i.imgur.com/AGprhft.jpg',
    name: 'Malkovich',
    x: 50,
    y: 50
}

var node = r(Node, { datum: datum })
var div = r.div()

test('create a node-ui element in the dom', function (t) {
  React.render(node, document.body, function () {
    //react-svg-patch works with real DOM, not here ?
    var el = document.getElementsByTagName('image')[0] || document.getElementsByTagName('img')[0]  
    console.log('el', el.tagName)

    t.ok(el)
    t.equal(el.className, 'node circle-clip-20')
    t.equal(el.getAttribute('xlink:href'), datum.image)

    el.parentNode.removeChild(el)

    t.end()
  })

})

//WIP
edgeObj[relationshipType] = arr.reduce(function (acc, i) {
  var shuffledIds = _.shuffle(_.clone(entityIds)) 
  acc[shuffledIds[0]] = shuffledIds.splice(random(1,entityIds.length-1))
  return acc
}, {})

for (var i=0;i<entityIds.length;i++) {
  var id = entityIds[i]
  var objectIds = edgeObj[relationshipType][id]
  var models = []

  if (objectIds) {
    for (var j=0;j<objectIds.length;j++) {
      var objectId = objectIds[j]
      models.push({ 
        is: {
          '@id': id
        },
        has: {
          '@id': objectId
        },
        relationshipType: {
          '@id': relationshipType
        }
      })
    }

    nodes.push({
      image: 'http://i.imgur.com/AGprhft.jpg',
      name: 'Malkovich',
      '@id': id,
      relationships: {
        models: models
      }
    })    
  }
}

var links = makeLinks([relationshipType], edgeObj, nodes)
test('makeLinks', function (t) {

  t.comment('WORK IN PROGRESS')

  t.end()
})