var React = require('react')
var r = require('r-dom')
var extend = require('xtend')
var vars = require('ui/vars')

var style = {
  tagIcon: {
    cursor: 'pointer',
    textAlign: 'center',
    color: 'white',
    width: '2.57142em',
    height: '100%',
    borderRadius: '.2857rem 0 0 .2857rem',
    lineHeight: 1,
    boxShadow: '-1px 0 0 0 transparent inset',
    top: 0,
    left: 0,
    backgroundColor: vars.overlay.darken,
    paddingTop: 9,
    paddingBottom: 12,
    paddingRight: vars.gutterWidth / 2,
    paddingLeft: vars.gutterWidth / 2
  },
  index: {
    display: 'inline-block',
    minHeight: '1em',
    outline: 0,
    border: 'none',
    verticalAlign: 'baseline',
    fontFamily: vars.font,
    margin: '0 .25em 0 0',
    paddingTop: vars.gutterWidth / 4,
    paddingBottom: vars.gutterWidth / 4,
    textTransform: 'none',
    color: 'white',
    textShadow: 'none',
    fontSize: vars.fontSize.button.medium,
    fontWeight: 'normal',
    lineHeight: 1,
    fontStyle: 'normal',
    textAlign: 'center',
    textDecoration: 'none',
    backgroundImage: 'none',
    borderRadius: '.2857rem',
    boxShadow: '0 0 0 1px transparent inset,0 0 0 0 rgba(39,41,43,.15)inset',
    '-webkit-user-select': 'none'
  },
  label: {
    color: 'inherit',
    textDecoration: 'none',
    marginLeft: vars.gutterWidth / 2,
    marginRight: vars.gutterWidth / 2
  },
  clearIcon: {
    top: 9,
    position: 'absolute'
  }
}

module.exports = React.createClass({

  propTypes: {
    color: React.PropTypes.string,
    icon: React.PropTypes.node,
    label: React.PropTypes.string,
    onIconClick: React.PropTypes.func,
    trailingCancel: React.PropTypes.bool
  },

  render: function () {
    var label = this.props.label
    var color = { backgroundColor: this.props.color }
    var iconContainer = r.i({
      className: 'tag-icon',
      onClick: this.props.onIconClick,
      style: style.tagIcon
    }, this.props.icon)

    var elements = [
      r.span({ className: 'tag-label', style: style.label }, [
        r.span({ className: 'tag-label-a'}, label)
      ])
    ]

    if (this.props.trailingCancel) {
      elements.push(iconContainer)
    } else { elements.unshift(iconContainer) }

    return r.div({
      className: 'tag-active',
      style: extend(style.index, color)
    }, elements)
  }
})
