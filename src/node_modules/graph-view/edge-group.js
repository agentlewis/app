var React = require('react')
var debug = require('debug')('graph-view:edge-group')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var Edge = require('./edge-ui')
var groupBy = require('lodash.groupby')
var traverse = require('traverse')
var keys = require('lodash.keys')

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')
var vars = require('ui/vars')

function circumference (r) {
  return Math.PI*r
}

// TODO dynamic styles
var style = {
  circleClip20: {
    cursor: 'pointer',
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    nodes: React.PropTypes.array,
    edges: React.PropTypes.array,
    queryMap: React.PropTypes.object,
    queries: React.PropTypes.array,
    model: React.PropTypes.object
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    debug(this.props)

    var directComponents = {}
    var contextComponents = {}



    return (
      r.g({ className: 'edges-group' },
        this.props.queries.active.reduce(function (memo, query) {
          if (query.source || query.target) {
            var edges, halos

            if (query.showHalo) {
              halos = this.props.nodes.filter(function (node) {
                return node.activeHalos && node.activeHalos[query.id]
              }.bind(this))
            }
            if (query.showLink) {
              edges = this.props.edges.filter(function (edge) {
                return edge.query.id === query.id
              })
            }

            if (halos) {
              memo.push(r.g({ className: 'query-layer' },
                halos.map(function (node) {
                  return this.renderHalos(node, query.id)
                }.bind(this))
              ))
            }




          }

          return memo

        }.bind(this), [])

        //first layer: context agent is target of edge
        // this.props.filtersByType.targetAgent
        //   .map(function (filter) {
        //     var edges
        //     if (filter.linkType.active) {
        //       edges = r.g({ className: 'edges'},
        //         targetEdgesGroupedByType[filter.linkType.id] ? targetEdgesGroupedByType[filter.linkType.id].map(function (edge) {
        //           return r(Edge, {
        //             edge: edge
        //           })
        //         }) : null
        //       )
        //     }
        //     return r.g({ className: 'test' }, edges)
        //   }),
          //second layer: halos and edges with contextAgent as context
        // this.props.filtersByType.context
        //   .map(function (filter) {
        //     var edges, halos
        //     if (filter.linkType.active) {
        //       edges = r.g({ className: 'edges'},
        //         contextEdgesGroupedByType[filter.linkType.id] ? contextEdgesGroupedByType[filter.linkType.id].map(function (edge) {
        //           return r(Edge, {
        //             edge: edge
        //           })
        //         }) : null
        //       )
        //     }
        //     if (filter.roleType.active) {
        //       halos = r.g({ className: 'halos'},
        //         nodesByActiveRole[filter.roleType.id] ? nodesByActiveRole[filter.roleType.id].map(function (node) {
        //           return this.renderHalos(node, filter.roleType.id)
        //         }.bind(this)) : null
        //       )
        //     }
        //     return r.g({ className: 'context-filter' }, [halos, edges])
        // }.bind(this))
      )
    )
  },



  renderHalos: function (node, queryId) {
    var self = this
    var w = node.w
    var x = node.x
    var y = node.y
    var ks = keys(node.activeHalos)
    var i = ks.length - ks.indexOf(queryId) //hmmmm order not guaranteed
    return r.circle({
      cx: x,
      cy: y,
      r: w/2+(i*vars.haloWidth)+2,
      fill: node.activeHalos[queryId].component.color,
      stroke: 'white',
      strokeWidth: 1
    })
  },


})
