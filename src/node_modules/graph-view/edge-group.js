var React = require('react')
var debug = require('debug')('graph-view:edge-group')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var Edge = require('./edge-ui')
var groupBy = require('lodash.groupby')
var traverse = require('traverse')
var keys = require('lodash.keys')

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')
var vars = require('ui/vars')

function circumference (r) {
  return Math.PI*r
}

// TODO dynamic styles
var style = {
  circleClip20: {
    cursor: 'pointer',
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    nodes: React.PropTypes.array,
    edges: React.PropTypes.array,
    queries: React.PropTypes.array,
    model: React.PropTypes.object
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    debug(this.props)

    return (
      r.g({ className: 'query-group' },
        this.props.queries.active.reduce(function (memo, query) {
          var edges, halos
          if (query.showHalo) {
            halos = this.props.nodes.filter(function (node) {
              return node.activeHalosById && node.activeHalosById[query.id]
            }.bind(this))
          }
          if (query.showLink) {
            edges = this.props.edges.filter(function (edge) {
              return edge.query.id === query.id
            })
          }

          if (halos || edges) {
            debug('halos', halos)
            memo.push(r.g({ key: query.id,  className: 'query-layer' }, [
              halos ? r.g({ className: 'halos' },
                halos.map(function (node) {
                  return this.renderHalos(node, query.id)
                }.bind(this))) : null,
              edges ? r.g({ className: 'edges' },
                edges.map(function (edge) {
                  return r(Edge, { edge: edge })
                }.bind(this))) : null
            ]))
          }

          debug('memo', memo)

          return memo

        }.bind(this), [])

      )
    )
  },

  renderHalos: function (node, queryId) {
    var self = this
    var w = node.w
    var x = node.x
    var y = node.y
    var i = node.activeHalos.length - node.activeHalos.indexOf(queryId) //hmmmm order not guaranteed
    return r.circle({
      cx: x,
      cy: y,
      r: w/2+(i*vars.haloWidth)+2,
      fill: node.activeHalosById[queryId].component.color,
      stroke: 'white',
      strokeWidth: 1
    })
  },


})
