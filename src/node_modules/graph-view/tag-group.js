// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')

var prefix = Url.format(config.api)


module.exports = React.createClass({

  propTypes: {
    agents: React.PropTypes.array,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node
  },

  render: function () {
    var tagData = this.props.tagData
    var cancelIcon = this.props.cancelIcon
    debug('tagData', tagData)

    return r.div({ className: 'tags' }, [
      r.div({ className: 'tags-triples-container'},
        reduce(tagData.triple, function (memo, expression, key) {
            if (expression.active) {
              var index = Math.min(memo.length, expression.index) //TODO order logic
              memo[index] = r(Tag, {
                color: expression.color,
                icon: cancelIcon,
                label: tagData.triple.predicate.active ? expression.withPredLabel : expression.label,
                onIconClick: this.props.updateTag('triple', expression.id, false),
                trailingCancel: (key === 'object')
              })
            }
            return memo
          }.bind(this), [])
      ),
      r.div({ className: 'tags-filters'},
        tagData.filters.reduce(function (memo, filter, i) {
          if (filter.active) {
            memo.push(r(Tag, {
              color: filter.color,
              icon: cancelIcon,
              label: filter.label,
              onIconClick: this.props.updateTag('filters', filter.id, false),
              trailingCancel: true
            }))
          }
          return memo
        }.bind(this), [])
      ),
      r.div({ className: 'input' }, [
        r(TagSelect, {
          style: this.props.style,
          tagData: this.props.tagData,
          updateTag: this.props.updateTag
        })
      ])
    ])
  },
})
