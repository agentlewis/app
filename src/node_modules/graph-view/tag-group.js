// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var Reflux = require('reflux')

var filtersStore = require('stores/filters-store')
var routeStore = require('stores/route-store')
var Actions = require('actions')

var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var extend = require('xtend')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')
var getHeaders = require('./get-headers')
var getContextTags = require('./get-context-tags')
var getOptions = require('./get-options')
var getQueries = require('./get-queries')
var parseQueryToMap = require('./parse-query-to-map')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth/2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  headerContainer: {
    marginRight: vars.gutterWidth/4,
    order: 0,
    display: 'flex',
    flexDirection: 'column'
  },
  header: {
    display: 'flex',
    flexDirection: 'row'
  },
  headerTag: {
    marginBottom: vars.gutterWidth/4
  },
  filters: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  contextTag: {
    marginTop: vars.gutterWidth/3,
    display: 'flex',
    flexDirection: 'row'
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2
  },
  tagContainer: {
    marginRight: vars.gutterWidth/4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    order: 0,
    lineHeight: '40px',
    marginRight: vars.gutterWidth/4
  }
}

module.exports = React.createClass({

  mixins: [
    Reflux.listenTo(routeStore, 'onRouteUpdate')

  ],

  propTypes: {
    query: React.PropTypes.object,
    style: React.PropTypes.object,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node,
  },

  getInitialState: function () {
    return {
      queryMap: {},
      queries: { active: [], inactive: []}
    }
  },

  onRouteUpdate: function (payload) {
    this.setState({
      queryMap: payload.queryMap,
      queries: payload.queries
    })
  },


  render: function () {
    debug('state', this.state)
    var cancelIcon = this.props.cancelIcon
    this.style = style
    // var headers = getHeaders(this.state.filtersByType.targetAgent)
    var queries = this.state.queries
    debug('queries', queries, this.state.queryMap)

    var tags = queries.active.reduce(function (memo, query) {
      query.labels.forEach(function (label) {
        debug('label', label)
        var iconStyle = { order: memo.length }
        memo.push(r.div({ className: 'context-tag', style: this.style.contextTag }, [
          r.div(
            { className: 'icon-container', style: iconStyle },
            [null] //icon placeholder
          ),
          r(Tag, {
            data: label,
            color: label.color,
            icon: cancelIcon,
            label: label.label,
            trailingCancel: true,
            onIconClick: this.handleTagCancelClick()
          })
        ]))
      }.bind(this))

      return memo
    }.bind(this), [])

    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'header-container', style: this.style.headerContainer }
        // headers.map(function (header, i) {
        //   debug('header', header)
        //   var style = extend(this.style.header, { order: i})
        //   return r.div({ className: 'header', style: style },
        //     header.map(function (tag, i) {
        //       debug('tag', tag)
        //       var style = extend(this.style.headerTag, { order: i })
        //       return r.div({ className: 'header-tag', style: style }, [
        //         r(Tag, {
        //           color: vars.colors.mediumGray,
        //           icon: cancelIcon,
        //           label: tag.label,
        //           onIconClick: this.handleTagCancelClick({ filter: tag.filter, type: tag.type }),
        //           trailingCancel: i === 0 ? false : true
        //         })
        //       ])
        //     }.bind(this))
        //   )
        // }.bind(this))
      ),
      r.div({ className: 'tags-filters', style: this.style.filters },
        tags
      ),
      r.div({ className: 'tag-input', style: this.style.tagInputContainer }, [
        // r(TagSelect, {
        //   style: this.props.style,
        //   options: t,
        //   // updateTag: this.props.updateTag
        // })
      ])
    ])
  },

  handleTagCancelClick: function (payload) {
    return function () {
      debug('actions', Actions)
      Actions.cancelTag(payload)
    }
  }
})
