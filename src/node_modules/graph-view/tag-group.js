// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')
var getHeaders = require('./get-headers')
var getContextTags = require('./get-context-tags')
var getOptions = require('./get-options')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth/2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  triple: {
    order: 0,
    display: 'flex',
    flexDirection: 'row'
  },
  tripleTag: {
  },
  filters: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  filterTag: {
    marginTop: vars.gutterWidth/3
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2
  },
  tagContainer: {
    marginRight: vars.gutterWidth/4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    lineHeight: '40px',
    marginRight: vars.gutterWidth/4
  }
}

module.exports = React.createClass({

  propTypes: {
    style: React.PropTypes.object,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node
  },

  getInitialState: function () {
    var headers
    var contextTags
    var options
    if (this.props.model.filtersByType) {
      headers = getHeaders(this.props.model.filtersByType.targetAgent)
      contextTags = getContextTags(this.props.model)
      options = getOptions(this.props.model)
    }

    return {
      headers: headers,
      contextTags: contextTags,
      options: options
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.model) {
      var headers = getHeaders(this.props.model.filtersByType.targetAgent)
      var contextTags = this.props.model.filtersByType.context ? getContextTags(this.props.model) : []
      var options = getOptions(nextProps.model)
      this.setState({ header: headers, contextTags: contextTags, options: options })
    }
  },

  render: function () {
    debug('state', this.state)
    var tagData = this.props.tagData
    var cancelIcon = this.props.cancelIcon
    var withPred = tagData.triple.predicate.active
    var pluralSubj = tagData.triple.subject.isPlural
    this.style = style

    var filters = tagData.filters.reduce(function (memo, filter, i) {
      if (filter.active) {
        var icon = filter.type === 'Role' ? 'circle-outline' : 'long-arrow-right'
        var iconStyle = clone(this.style.iconStyle)
        iconStyle.color = filter.color
        memo.push(r.div({ className: 'tag-container', style: this.style.tagContainer }, [
          r.div({ className: 'icon-container', style: iconStyle }, [r(this.props.Icon, { icon: icon })]),
          r(Tag, {
            color: filter.color,
            icon: cancelIcon,
            label: filter.label,
            onIconClick: this.props.updateTag('filters', filter.id, false),
            trailingCancel: true
          })
        ])
        )
      }
      return memo
    }.bind(this), [])

    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'triple', style: this.style.triple },
        reduce(tagData.triple, function (memo, expression, key, triple) {
            if (expression.active) {
              debug('expression active', expression)
              var label
              var index
              debug('labeling', key, withPred, pluralSubj)
              if (key === 'subject') {
                index = 0
                label = withPred ? expression.withPredLabel : expression.label
              }
              if (key === 'predicate') {
                index = triple.subject.active ? 1 : 0
                label = pluralSubj ? expression.pluralLabel : expression.label
              }
              if (key === 'object') {
                label = expression.label
                index = triple.subject.active ? triple.predicate.active ? 2 : 1 : 0
              }

              // var style = {
              //   order: index
              // }
              // var style = style.tripleTag
              // style.order = index

              memo[index] = r.div({ className: 'triple-tag', style: {order: index} }, [r(Tag, {
                color: expression.color,
                icon: cancelIcon,
                label: label,
                onIconClick: this.props.updateTag('triple', expression.id, false),
                trailingCancel: (key === 'object')
              })])

            }
            debug('memo', memo)
            return memo
          }.bind(this), [])
      ),
      r.div({ className: 'tags-filters', style: this.style.filters },
        filters.map(function (filter, i) {
          var order = filters.length -1 - i
          var style = {order: order }
          return r.div({ className: 'filter-tag', style: this.style.filterTag }, [
            filter
          ])
        }.bind(this))
      ),
      r.div({ className: 'tag-input', style: this.style.tagInputContainer }, [
        r(TagSelect, {
          style: this.props.style,
          tagData: this.props.tagData,
          updateTag: this.props.updateTag
        })
      ])
    ])
  },
})
