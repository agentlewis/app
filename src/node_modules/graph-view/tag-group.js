// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')

var Tag = require('./tag')
var IconFactory = require('react-icon-factory')

var Icon = IconFactory({
  'clear': r.g([
    r.path(
      { d:"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" }
    )
  ])
})

var clearIcon = r(
  Icon,
  { className: 'clear-tag', icon: 'clear', onClick: null }
)

var config = require('config')

var prefix = Url.format(config.api)

// use some basic colors
var palleteColors = require('./colors')


module.exports = React.createClass({

  propTypes: {
    agents: React.PropTypes.array,
    relationships: React.PropTypes.object.isRequired,
    clear: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node
  },

  render: function () {
    var cancelIcon = this.props.cancelIcon


    var tags = reduce(this.props.relationships, function (memo, role) {
      if (role.active) {
        memo.push({
          type: 'role',
          color: role.color,
          icon: cancelIcon,
          label: role.label,
          onIconClick: this.props.clearTag('role', role.id)
        })
      }
      if (role.link.active) {
        memo.push({
          type: 'link',
          color: role.color,
          icon: cancelIcon,
          label: role.link.label,
          onIconClick: this.props.clearTag('link', role.id)
        })
      }
      return memo
    }, [])

    var contextAgentTag = r(Tag, {
      color: '#707070',
      icon: cancelIcon,
      label: this.props.model.name,
      onIconClick: this.props.clearTag('agent', this.props.model.getId()),
      trailingCancel: false
      })

    return r.div({ className: 'tags' }, [
      contextAgentTag
    ])


  },



})
