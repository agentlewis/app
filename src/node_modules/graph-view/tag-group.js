// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')

var Tag = require('./tag')
var config = require('config')

var prefix = Url.format(config.api)


module.exports = React.createClass({

  propTypes: {
    agents: React.PropTypes.array,
    tagData: React.PropTypes.object.isRequired,
    clearTag: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node
  },

  render: function () {
    var tagData = this.props.tagData
    var cancelIcon = this.props.cancelIcon

    var triples = tagData.triples.map(function (triple) {
      return reduce(triple, function (memo, expression, key) {
        if (expression.active) {
          var index = Math.min(memo.length, expression.index) //TODO order logic
          memo[index] = r(Tag, {
            color: expression.color,
            icon: cancelIcon,
            label: triple.predicate.active ? expression.withPredLabel : expression.label,
            onIconClick: this.props.clearTag('triple', expression.typeId || expression.id),
            trailingCancel: (key === 'object')
          })
        }
        return memo
      }.bind(this), [])

    }.bind(this))

    var filters = tagData.filters.reduce(function (memo, filter, i) {
      if (filter.active) {
        memo.push(r(Tag, {
          color: filter.color
          icon: cancelIcon,
          label: filter.label,
          onIconClick: this.props.clearTag('role', filter.id),
          trailingCancel: true
        }))
      }
      if (filter.link.active) {
        memo.push(r(Tag, {
          color: filter.color
          icon: cancelIcon,
          label: filter.link.label,
          onIconClick: this.props.clearTag('link', filter.id),
          trailingCancel: true
        }))
      }
      return memo
    }, [])

  debug('triples', triples)

    // var tags = reduce(this.props.relationships, function (memo, role) {
    //   if (role.active) {
    //     memo.push({
    //       type: 'role',
    //       color: role.color,
    //       icon: cancelIcon,
    //       label: role.label,
    //       onIconClick: this.props.clearTag('role', role.id)
    //     })
    //   }
    //   if (role.link.active) {
    //     memo.push({
    //       type: 'link',
    //       color: role.color,
    //       icon: cancelIcon,
    //       label: role.link.label,
    //       onIconClick: this.props.clearTag('link', role.id)
    //     })
    //   }
    //   return memo
    // }, [])

    var contextAgentTag = r(Tag, {
      color: '#707070',
      icon: cancelIcon,
      label: this.props.model.name,
      onIconClick: this.props.clearTag('agent', this.props.model.getId()),
      trailingCancel: false
      })

    return r.div({ className: 'tags' },
      triples.map(function (triple) {
        return r.div({ className: 'tags triples'},
          triple.map(function (expression) {
            return expression
          })
        )
      })
    )
  },



})
