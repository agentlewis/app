// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  triple: {
    order: 0,
    display: 'flex',
    flexDirection: 'row'
  },
  tripleTag: {
  },
  filters: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  filterTag: {
    marginTop: vars.gutterWidth/3
  },
  tagInput: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2,
    display: 'block',
    border: 'none',
    color: '#333',
    borderBottom: '1px dotted black',
    padding: '5px 2px 0 2px',
  }
}

module.exports = React.createClass({

  propTypes: {
    style: React.PropTypes.object,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node
  },

  render: function () {
    var tagData = this.props.tagData
    var cancelIcon = this.props.cancelIcon
    debug('tagData', tagData)
    var withPred = tagData.triple.predicate.active
    var pluralSubj = tagData.triple.subject.isPlural
    this.style = style

    var filters = tagData.filters.reduce(function (memo, filter, i) {
      if (filter.active) {
        memo.push(r(Tag, {
          color: filter.color,
          icon: cancelIcon,
          label: filter.label,
          onIconClick: this.props.updateTag('filters', filter.id, false),
          trailingCancel: true
        }))
      }
      return memo
    }.bind(this), [])

    return r.div({ className: 'tags', style: style.index }, [
      r.div({ className: 'triple', style: style.triple },
        reduce(tagData.triple, function (memo, expression, key) {
            if (expression.active) {
              var label
              var index = Math.min(memo.length, expression.index) //TODO order logic
              if (key === 'subject') {
                label = withPred ? expression.withPredLabel : expression.label
              }
              if (key === 'predicate') {
                label = pluralSubj ? expression.pluralLabel : expression.label
              }
              if (key === 'object') {
                label = expression.label
              }

              // var style = {
              //   order: index
              // }
              // var style = style.tripleTag
              // style.order = index

              memo[index] = r.div({ className: 'triple-tag', style: {order: index} }, [r(Tag, {
                color: expression.color,
                icon: cancelIcon,
                label: label,
                onIconClick: this.props.updateTag('triple', expression.id, false),
                trailingCancel: (key === 'object')
              })])

            }
            return memo
          }.bind(this), [])
      ),
      r.div({ className: 'tags-filters', style: style.filters },
        filters.map(function (filter, i) {
          var order = filters.length -1 - i
          var style = {order: order }
          return r.div({ className: 'filter-tag', style: this.style.filterTag }, [
            filter
          ])
        }.bind(this))
      ),
      r.div({ className: 'tag-input', style: this.style.tagInput }, [
        r(TagSelect, {
          style: this.props.style,
          tagData: this.props.tagData,
          updateTag: this.props.updateTag
        })
      ])
    ])
  },
})
