// takes node and edge data and out node and edge svgs
var React = require('react')
var r = require('r-dom')
var Reflux = require('reflux')
var routeStore = require('stores/route-store')
var Actions = require('actions')

var debug = require('debug')('holodex:tag-group')
var clone = require('lodash.clone')
var find = require('lodash.find')
var chunk = require('lodash.chunk')
var reject = require('lodash.reject')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var HeaderContainer = require('./header-container')
var filterOptions = require('./filter-options')

var vars = require('ui/vars')

var style = {
  index: {
    marginTop: vars.gutterWidth / 2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  headerGroup: {
    display: 'flex',
    flexDirection: 'column'
  },
  headerContainer: {
    display: 'flex',
    flexDirection: 'row'
  },
  headerTag: {
    marginBottom: vars.gutterWidth / 4
  },
  queryTags: {
    marginLeft: vars.gutterWidth / 2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  contextTag: {
    marginTop: vars.gutterWidth / 3,
    marginLeft: vars.gutterWidth / 6,
    display: 'flex',
    flexDirection: 'row'
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth / 3,
    marginLeft: vars.gutterWidth / 2
  },
  tagContainer: {
    marginRight: vars.gutterWidth / 4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    order: 0,
    lineHeight: '40px',
    marginRight: vars.gutterWidth / 4
  }
}

function findLabel (labels, type) {
  return find(labels, function (label) {
    return label.type === type
  })
}

module.exports = React.createClass({

  mixins: [
    Reflux.listenTo(routeStore, 'onRouteUpdate')
  ],

  propTypes: {
    query: React.PropTypes.object,
    style: React.PropTypes.object,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node
  },

  getInitialState: function () {
    return { queries: { active: [], inactive: [], queryMap: {} } }
  },

  onRouteUpdate: function (payload) {
    if (!payload.route && payload.queries) {
      this.setState({ queries: payload.queries })
    }
  },

  render: function () {
    debug('state', this.state)
    var cancelIcon = this.props.cancelIcon
    this.style = style
    var headers
    var headerTags = [
      r.div({ className: 'tag', style: this.style.contextTag }, [
        r(Tag, {
          color: vars.colors.mediumGray,
          icon: cancelIcon,
          label: this.props.model.name,
          onIconClick: this.handleTagCancelClick(this.props.model),
          trailingCancel: true
        })
      ])
    ]
    var contextTags = []

    // exclude parent group query
    var active = reject(this.state.queries.active, function (query) {
      return query.isParent || !query.labels
    })

    active.forEach(function (query) {
      var label = findLabel(query.labels, 'QueryLabel')
      var icon
      var iconStyle
      var iconDiv = null
      
      if (query.showHalo) {
        icon = r(this.props.Icon, { icon: 'circle-outline' })
      }


      if (icon && label) {
        iconStyle = clone(this.style.iconStyle)
        iconStyle.color = label.color
        // iconStyle.order = query.source ? 1 : 0
        iconDiv = r.div(
          { className: 'icon-container', style: iconStyle },
          [icon]
        )
      }

      var tag = label ? r.div({ className: 'tag', style: this.style.contextTag }, [
        iconDiv,
        r(Tag, {
          data: label,
          color: label.color,
          icon: cancelIcon,
          label: label.label,
          // trailingCancel: query.target ? true : false,
          trailingCancel: true,
          onIconClick: this.handleTagCancelClick(label)
        })
      ]) : null

      debug('tag', tag)

      if (!query.showHalo && !query.showLink && tag) {
        headerTags.push(tag)
      } else { contextTags.push(tag) }

    }.bind(this))

    // group headertags into rows of 2
    headers = chunk(headerTags, 2)

    debug('tags', contextTags, headers, headerTags)
    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'header-group', style: this.style.headerGroup },
        headers.map(function (header, i) {
          var style = clone(this.style.headerContainer)
          style.order = i
          return r(HeaderContainer, { style: style, tags: header })
        }.bind(this))
      ),
      r.div({ className: 'tags-context', style: this.style.queryTags },
        contextTags
      ),
      this.state.queries.inactive.length > 0 ? r.div(
        {
          className: 'tag-input',
          style: this.style.tagInputContainer
        },
        [
          r(TagSelect, {
            style: this.props.style,
            options: filterOptions(this.state.queries)
          })
        ]
      ) : null
    ])
  },

  handleTagCancelClick: function (payload) {
    return function () {
      debug('actions', Actions)
      Actions.cancelTag(payload)
    }
  }
})
