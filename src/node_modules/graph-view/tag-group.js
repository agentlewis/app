// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var Reflux = require('reflux')

var filtersStore = require('stores/filters-store')
var routeStore = require('stores/route-store')
var Actions = require('actions')

var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var find = require('lodash.find')
var extend = require('xtend')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')
var getHeaders = require('./get-headers')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth/2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  headerContainer: {
    marginRight: vars.gutterWidth/4,
    order: 0,
    display: 'flex',
    flexDirection: 'column'
  },
  header: {
    display: 'flex',
    flexDirection: 'row'
  },
  headerTag: {
    marginBottom: vars.gutterWidth/4
  },
  queryTags: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  contextTag: {
    marginTop: vars.gutterWidth/3,
    display: 'flex',
    flexDirection: 'row'
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2
  },
  tagContainer: {
    marginRight: vars.gutterWidth/4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    order: 0,
    lineHeight: '40px',
    marginRight: vars.gutterWidth/4
  }
}

function findLabel(labels, type) {
  return find(labels, function (label) {
    return label.type === type
  })
}

module.exports = React.createClass({

  mixins: [
    Reflux.listenTo(routeStore, 'onRouteUpdate')
  ],

  propTypes: {
    query: React.PropTypes.object,
    style: React.PropTypes.object,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node,
  },

  getInitialState: function () {
    return { queries: { active: [], inactive: [], queryMap: {} } }
  },

  onRouteUpdate: function (payload) {
    this.setState({ queries: payload.queries })
  },

  render: function () {
    debug('state', this.state)
    var cancelIcon = this.props.cancelIcon
    this.style = style
    var queries = this.state.queries
    debug('queries', queries)

    var tags = queries.active.reduce(function (memo, query) {
      var label, icon, iconStyle, iconDiv = null
      if (query.showLink) {
        label = findLabel(query.labels, 'LinkLabel')
        icon = r(this.props.Icon, { icon: 'long-arrow-right' })
      }
      else {
        label = findLabel(query.labels, 'QueryLabel')
        if (query.showHalo) {
          icon = r(this.props.Icon, { icon: 'circle-outline' })
        }
      }

      if (icon) {
        iconStyle = clone(this.style.iconStyle)
        iconStyle.color = label.color
        // iconStyle.order = query.source ? 1 : 0
        iconDiv = r.div(
          { className: 'icon-container', style: iconStyle },
          [icon]
        )
      }

      memo.push(r.div({ className: 'context-tag', style: this.style.contextTag }, [
        iconDiv,
        r(Tag, {
          data: label,
          color: label.color,
          icon: cancelIcon,
          label: label.label,
          // trailingCancel: query.target ? true : false,
          trailingCancel: true,
          onIconClick: this.handleTagCancelClick(label)
        })
      ]))

      return memo
    }.bind(this), [])

    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'header-container', style: this.style.headerTag }, [
        r(Tag, {
          color: vars.colors.mediumGray,
          icon: cancelIcon,
          label: this.props.model.name,
          onIconClick: this.handleTagCancelClick(this.props.model),
          trailingCancel: true
        })
      ]),
      r.div({ className: 'tags-queries', style: this.style.queryTags },
        tags
      ),
      r.div({ className: 'tag-input', style: this.style.tagInputContainer }, [
        r(TagSelect, {
          style: this.props.style,
          options: queries.inactive.reduce(function (memo, query) {
            query.labels.forEach(function (label) { memo.push(label) })
            return memo
          }, []),
          // updateTag: this.props.updateTag
        })
      ])
    ])
  },

  handleTagCancelClick: function (payload) {
    return function () {
      debug('actions', Actions)
      Actions.cancelTag(payload)
    }
  }
})
