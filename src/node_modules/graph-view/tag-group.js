// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var extend = require('xtend')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')
var getHeaders = require('./get-headers')
var getContextTags = require('./get-context-tags')
var getOptions = require('./get-options')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth/2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  headerContainer: {
    marginRight: vars.gutterWidth/4,
    order: 0,
    display: 'flex',
    flexDirection: 'column'
  },
  header: {
    display: 'flex',
    flexDirection: 'row'
  },
  headerTag: {
  },
  filters: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  filterTag: {
    marginTop: vars.gutterWidth/3
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2
  },
  tagContainer: {
    marginRight: vars.gutterWidth/4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    lineHeight: '40px',
    marginRight: vars.gutterWidth/4
  }
}

module.exports = React.createClass({

  propTypes: {
    style: React.PropTypes.object,
    tagData: React.PropTypes.object.isRequired,
    updateTag: React.PropTypes.func.isRequired,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node
  },

  getInitialState: function () {
    var headers
    var contextTags
    var options
    if (this.props.model.filtersByType) {
      headers = getHeaders(this.props.model.filtersByType.targetAgent)
      contextTags = getContextTags(this.props.model)
      options = getOptions(this.props.model)
    }

    return {
      headers: headers,
      contextTags: contextTags,
      options: options
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.model) {
      var headers = getHeaders(this.props.model.filtersByType.targetAgent)
      var contextTags = this.props.model.filtersByType.context ? getContextTags(this.props.model) : []
      var options = getOptions(nextProps.model)
      this.setState({ headers : headers, contextTags: contextTags, options: options })
    }

  },

  render: function () {
    debug('state', this.state)
    var tagData = this.props.tagData
    var cancelIcon = this.props.cancelIcon
    var withPred = tagData.triple.predicate.active
    var pluralSubj = tagData.triple.subject.isPlural
    this.style = style

    var options = this.state.options.map(function (option) {
      return {
        id: option.filter.id,
        label: option.label
      }
    })

    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'header-container', style: this.style.headerContainer },
        this.state.headers.map(function (header, i) {
          debug('header', header)
          var style = extend(this.style.header, { order: i})
          return r.div({ className: 'header', style: style },
            header.map(function (tag, i) {
              debug('tag', tag)
              var style = extend(this.style.headerTag, { order: i })
              return r.div({ className: 'header-tag', style: style }, [
                r(Tag, {
                  color: tag.filter.color,
                  icon: cancelIcon,
                  label: tag.label,
                  // onIconClick: this.props.updateTag('filters', filter.id, false),
                  trailingCancel: i === 0 ? false : true
                })
              ])
            }.bind(this))
          )
        }.bind(this))
      ),
      // r.div({ className: 'tags-filters', style: this.style.filters },
      //   filters.map(function (filter, i) {
      //     var order = filters.length -1 - i
      //     var style = {order: order }
      //     return r.div({ className: 'filter-tag', style: this.style.filterTag }, [
      //       filter
      //     ])
      //   }.bind(this))
      // ),
      r.div({ className: 'tag-input', style: this.style.tagInputContainer }, [
        r(TagSelect, {
          style: this.props.style,
          options: options,
          updateTag: this.props.updateTag
        })
      ])
    ])
  },
})
