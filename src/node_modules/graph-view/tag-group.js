// takes node and edge data and out node and edge svgs
//
var React = require('react')
var Url = require('url')
var r = require('r-dom')
var Reflux = require('reflux')

var filtersStore = require('stores/filters-store')

var map = require('lodash.map')
var debug = require('debug')('holodex:tag-group')
var keys = require('lodash.keys')
var reduce = require('lodash.reduce')
var clone = require('lodash.clone')
var extend = require('xtend')

var Tag = require('./tag')
var TagSelect = require('./tag-select')
var config = require('config')
var getHeaders = require('./get-headers')
var getContextTags = require('./get-context-tags')
var getOptions = require('./get-options')

var vars = require('ui/vars')

var prefix = Url.format(config.api)

var style = {
  index: {
    marginTop: vars.gutterWidth/2,
    marginLeft: vars.gutterWidth,
    display: 'flex',
    flexDirection: 'column'
  },
  headerContainer: {
    marginRight: vars.gutterWidth/4,
    order: 0,
    display: 'flex',
    flexDirection: 'column'
  },
  header: {
    display: 'flex',
    flexDirection: 'row'
  },
  headerTag: {
    marginBottom: vars.gutterWidth/4
  },
  filters: {
    marginLeft: vars.gutterWidth/2,
    order: 1,
    display: 'flex',
    flexDirection: 'column'
  },
  contextTag: {
    marginTop: vars.gutterWidth/3,
    display: 'flex',
    flexDirection: 'row'
  },
  tagInputContainer: {
    order: 2,
    marginTop: vars.gutterWidth/3,
    marginLeft: vars.gutterWidth/2
  },
  tagContainer: {
    marginRight: vars.gutterWidth/4,
    display: 'flex',
    flexDirection: 'row'
  },
  iconStyle: {
    order: 0,
    lineHeight: '40px',
    marginRight: vars.gutterWidth/4
  }
}

module.exports = React.createClass({

  mixins: [Reflux.listenTo(filtersStore, 'onFilterUpdate')],

  propTypes: {
    style: React.PropTypes.object,
    model: React.PropTypes.object,
    cancelIcon: React.PropTypes.node,
    Icon: React.PropTypes.node,
  },

  getInitialState: function () {
    return {
      filtersByType: filtersStore.getFiltersByType()
    }
  },

  onFilterUpdate: function (payload) {
    this.setState({ filtersByType: payload.filtersByType })
  },

  render: function () {
    debug('state', this.state)
    var cancelIcon = this.props.cancelIcon
    this.style = style
    var headers = getHeaders(this.state.filtersByType.targetAgent)
    var contextTags = getContextTags(this.state.filtersByType, this.props.model.name)
    var options = getOptions(this.state.filtersByType, this.props.model.name)
    debug('options', options)

    return r.div({ className: 'tags', style: this.style.index }, [
      r.div({ className: 'header-container', style: this.style.headerContainer },
        headers.map(function (header, i) {
          debug('header', header)
          var style = extend(this.style.header, { order: i})
          return r.div({ className: 'header', style: style },
            header.map(function (tag, i) {
              debug('tag', tag)
              var style = extend(this.style.headerTag, { order: i })
              return r.div({ className: 'header-tag', style: style }, [
                r(Tag, {
                  color: tag.filter.color,
                  icon: cancelIcon,
                  label: tag.label,
                  // onIconClick: this.props.updateTag('filters', filter.id, false),
                  trailingCancel: i === 0 ? false : true
                })
              ])
            }.bind(this))
          )
        }.bind(this))
      ),
      r.div({ className: 'tags-filters', style: this.style.filters },
        contextTags.map(function (tag, i) {
          var icon, iconStyle, iconContainer
          if (!tag.filter.contextAgentId) {
            icon = tag.type === 'Role' ? 'circle-outline' : 'long-arrow-right'
            iconStyle = clone(this.style.iconStyle)
            iconStyle.color = tag.filter.color
            iconContainer = r.div({ className: 'icon-container', style: iconStyle }, [r(this.props.Icon, { icon: icon })])
          }
          debug('tag', tag)
          var style = { order: contextTags.length -1 - i }

          return r.div({ className: 'context-tag', style: this.style.contextTag }, [
            iconContainer,
            r(Tag, {
              color: tag.filter.color,
              icon: cancelIcon,
              label: tag.label,
              trailingCancel: true
            })
          ])
        }.bind(this))
      ),
      r.div({ className: 'tag-input', style: this.style.tagInputContainer }, [
        r(TagSelect, {
          style: this.props.style,
          options: options,
          updateTag: this.props.updateTag
        })
      ])
    ])
  },

})
