var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')

var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:format-graph-data')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')
var clone = require('lodash.clone')

var config = require('config')
var prefix = Url.format(config.api)
var vars = require('ui/vars')
var Labels = require('./labels')

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberLinkTypeId = prefix + '/roleTypes/member/link'
var groupLinkTypeId = prefix + '/roleTypes/group/link'
var member = prefix + '/roleTypes/member'
var subgroup = prefix + '/roleTypes/subgroup'

function getLinkLength (n, l) {
  return (1+(n-1)*0.2)*l
}

function nodeIsParent(node, model) {
  if (model['@type'] === 'Group' && model.parentGroups.length > 0) {
    return model.parentGroups.reduce(function (memo, parent) {
      if (parent.getId() === node.id) {
        memo = true
      }
      return memo
    }, false)
  }
  else { return false }
}

function linkIsToParentGroup (link, contextAgentId) {
  if (link.fromId === contextAgentId && link.data.agent['@type'] === 'Group') {
    // debug('isGroup')
    return link.data.agent.parentGroups.reduce(function (memo, parent) {
      // debug('linkIsToParentGroup', parent.getId(), link.toId)
      if (parent.getId() === link.toId) memo = true
      return memo
    }, false)
  }
  return false
}

function hiddenLink(link, idToIndex) {
  if (idToIndex[link.data.agent.getId()]
    && (link.data.type.getId() === member
    || link.data.type.getId() === subgroup)) { return true }
  else { return false }
}

function makeUINode (node, options) {
  debug('makeUINode', node, options)
  var coords = options.coords || [0, 0]
  var uiNode = {
    activeRoleTypes: options.activeRoleTypes || [],
    id: node.id,
    model: node.data,
    w: options.size || 40,
    h: options.size || 40,
    fixed: options.fixed || false,
    IdMap: options.IdMap
  }
  if (options.coords) {
    uiNode.x = coords[0]
    uiNode.y = coords[1]
  }
  return uiNode
}

function makeUILink (link, options) {
  if(!options.hidden) debug(link)
  var length = options.length || 100
  var hidden = options.hidden
  var source = options.source
  var target = options.target
  var color = options.color
  debug('color', options)
  return {
    id: link.id,
    hidden: hidden,
    source: source,
    target: target,
    model: link.data,
    color: color,
    length: length
  }
}

function getRoleMatches (node, activeRoleFilters) {
  var nodeRoleTypeIds = map(node.data.roles, function (role) { return role.type.getId() })
  return intersection(activeRoleFilters, nodeRoleTypeIds)
}

module.exports = function (model, filtersByType, centerCoords, options) {
  var graph = model.relationshipGraph
  var filterMap = {}
  var contextAgentId = model.getId()
  var nodes = []
  var links = []
  var filters = filtersByType.context.concat(filtersByType.targetAgent)
  var IdMap = {}
  var idToIndex = {}
  var activeRoles = []
  var activeLinks = []

  for (var i=0, len = filters.length; i<len; i++) {
    var filter = filters[i]
    if (filter.roleType.active && filter.contextAgentId) activeRoles.push(filter.roleType.id)
    if (filter.linkType.active) activeLinks.push(filter.linkType.id)
  }

  graph.forEachNode(function (node) {
    var coords = (options && options[node.id]) ? options[node.id] : null
    if (node.data.getId() === model.getId()) {
      debug('is context agent')
      nodes.push(makeUINode(
        node,
        {
          size: vars.nodeSizes.contextAgent,
          activeRoleTypes: [],
          IdMap: IdMap,
          fixed: true,
          coords:  centerCoords
        })
      )
      idToIndex[node.id] = nodes.length -1
      return
    }
    if (nodeIsParent(node, model)) {
      debug('is parent')
      nodes.push(makeUINode(
        node,
        {
          size: vars.nodeSizes.parent,
          activeRoleTypes: getRoleMatches(node, activeRoles),
          IdMap: IdMap,
          coords: [centerCoords[0], 0],
          fixed: true
        }
      ))
      idToIndex[node.id] = nodes.length -1
      return
    }

    var i = filters.length
    while (i > 0) {
      var filter = filters[i-1]
      debug('FILTER', filter, node)
      if (filter.agentType.active && node.data['@type'] === filter.agentType.id) {
        debug('agentType is active')
        IdMap[filter.roleType.id] = filter
        nodes.push(makeUINode(
          node,
          {
            size: vars.nodeSizes.default,
            activeRoleTypes: getRoleMatches(node, activeRoles),
            IdMap: IdMap,
            coords: coords
          }
        ))
        idToIndex[node.id] = nodes.length -1
        break
      }

      if (filter.contextAgentId === model.getId()
          && node.data.rolesByType[filter.roleType.id]) {
        var activeRole = find(node.data.rolesByType[filter.roleType.id], function (role) {
          return role.pair.agent.getId() === filter.targetAgent.id
        })
        if (activeRole) {
          debug('node has active role in context')
          IdMap[filter.roleType.id] = filter
          nodes.push(makeUINode(
            node,
            {
              size: vars.nodeSizes.default,
              activeRoleTypes: getRoleMatches(node, activeRoles),
              IdMap: IdMap,
              coords: coords
            }
          ))
          idToIndex[node.id] = nodes.length -1
          break
        }
      }

      if (filter.linkType.active) {
        var activeLink = find(node.data.rolesByType[filter.roleType.id], function (role) {
          return (role.linkTypeId === filter.linkType.id
          && role.pair.agent.getId() === filter.targetAgent.id)
              || (role.pair.linkTypeId === filter.linkTypeId)
        })
        if (activeLink) {
          debug('nodes has active link', activeLink)
          nodes.push(makeUINode(
            node,
            {
              size: vars.nodeSizes.default,
              activeRoleTypes: getRoleMatches(node, activeRoles),
              IdMap: IdMap,
              coords: coords
            }
          ))
          idToIndex[node.id] = nodes.length -1
         break
        }
      }

      i --
    }
  })

  debug('nodes', nodes)
  links.length = 0
  graph.forEachLink(function (link) {
    debug('link', link)
    var fromId = link.fromId
    var source = idToIndex[fromId]
    var target = idToIndex[link.toId]
    if (typeof source === 'undefined' || typeof target === 'undefined') { return }
    var linkTypeId = link.data.linkTypeId
    if (linkIsToParentGroup(link, contextAgentId)) {
      debug('isLinkToParent')
      links.push(makeUILink(
        link,
        {
          length: vars.graphSize.height/2,
          hidden: false,
          source: source,
          target: target,
          color: vars.colors.mediumGray
        }))
      debug(links[links.length-1])
      return
    }

    var i = filters.length
    while (i > 0) {
      var filter = filters[i-1]
      if (filter.linkType.active
        && (link.toId === filter.targetAgent.id || link.toId === filter.contextAgentId )
        && link.data.linkTypeId === filter.linkType.id ) {
        debug('filter link', filter, link)
        links.push(makeUILink(
          link,
          {
            length: getLinkLength(activeLinks.length, 120),
            hidden: false,
            source: source,
            target: target,
            color:  Labels[link.data.type.getId()]
          }))
        break
      }
      i --
    }

    if (i === 0 && hiddenLink(link, idToIndex)) {
      debug('hiddenLink', filter, link)
      links.push(makeUILink(
        link,
        {
          length: getLinkLength(activeLinks.length, 120),
          hidden: true,
          source: source,
          target: target,
        }))
    }
    debug('links', links, links.length)
  })


  return [nodes, links, idToIndex]
}
