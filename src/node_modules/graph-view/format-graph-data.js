var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')
var filter = require('lodash.filter')
var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:formatGraphData')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')

var config = require('config')
var palleteColors = require('./colors')
var prefix = Url.format(config.api)

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberTypeId = prefix + '/roleTypes/member'
var memberOfLabel = "is a member of"
var hiddenLinks = {}


module.exports = function (linkLabels, graph, roleTypes, contextAgentId, centerCoords) {
  var nodes = []
  var links = []
  var activeLabels = filter(linkLabels, function (linkLabel) { return linkLabel.active })
  var hasMember = linkLabels['has member']

  debug('linkLabels, graph', linkLabels, activeLabels)

  if (roleTypes[memberTypeId]) hiddenLinks[memberOfLabel] = true
  debug('hiddenLinks[memberOfLabel]', hiddenLinks)
  var idToIndex = {}
  var activeRoleTypeIds = keys(roleTypes).reduce(function (memo, roleTypeId) {
    if (roleTypes[roleTypeId].active) {
      memo.push(roleTypeId)
    }
    return memo
  }, [])

  var activeLinkLabels = keys(linkLabels).reduce(function (memo, linkLabel) {
    if (linkLabels[linkLabel].active) {
      memo.push(linkLabel)
    }
    return memo
  }, [])

  graph.forEachNode(function (node) {
    var nodeRoleTypeIds = map(node.data.roles, function (role) { return role.type.getId() })
    var match = intersection(activeRoleTypeIds, nodeRoleTypeIds)
    var isContextAgent = (node.id === contextAgentId)

    if (match.length > 0 || isContextAgent) {
      var node = {
        activeRoleTypeIds: match,
        id: node.id,
        model: node.data,
        fixed: isContextAgent
      }

      if (isContextAgent) {
        node.x = centerCoords[0]
        node.y = centerCoords[1]
        node.w = 80
        node.h = 80
      }
      else {
        node.w = 40
        node.h = 40
      }

      nodes.push(node)
      idToIndex[node.id] = nodes.length - 1
    }

    debug('node', node )

  })

  graph.forEachLink(function (link) {
    var fromId = link.fromId
    var linkLabel

    //
    var fromRole = find(link.data.roles, function (role) {
      var label = role.label.split(' ').filter(function (word) { return !isUrl(word) }).join(' ')
      linkLabel = linkLabels[label]
      return (
        role.agent.getId() === fromId // == source
        && (
          (linkLabel && linkLabel.active) ||   //active link OR
          (hiddenLinks[label] && activeLabels.length === 0) //hidden link AND no active links
          // (hiddenLinks[label] && //hidden link
          //   (hasMember && !hasMember.active))

      )
      )
    })

      if (fromRole) {
        label = fromRole.label.split(' ').filter(function (word) { return !isUrl(word) }).join(' ')
        debug('fromRoleType', fromRole, label, linkLabels)
        var fromIndex = idToIndex[link.fromId]
        var toIndex = idToIndex[link.toId]
        var isHidden = hiddenLinks[label] ? true : false
        links.push({
          id: link.id,
          hidden: isHidden,
          source: fromIndex,
          target: toIndex,
          model: link.data,
          color: isHidden ? 'white' : linkLabel.color,
          length: (isHidden || hasMember.active) ? 100 : null
        })

      }

  })

  debug('formatGraphData() ->', nodes, activeRoleTypeIds )
  return [nodes, links, idToIndex]
}
