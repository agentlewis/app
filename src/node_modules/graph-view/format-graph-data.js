var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')

var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:formatGraphData')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')

var config = require('config')
var prefix = Url.format(config.api)

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberLinkTypeId = prefix + '/roleTypes/member/link'
var groupLinkTypeId = prefix + '/roleTypes/group/link'


function getSourceRole (roles, sourceId) {
  for (var i=0; i< roles.length; i++) {
    if(roles[i].agent.getId() === sourceId) return roles[i]
  }
}

function getLinkLength (n, l) {
  return Math.sqrt(Math.max(n,1))*l
}

module.exports = function (graph, tagData, contextAgentId, centerCoords) {
  var nodes = []
  var links = []
  var filters = tagData.filters || []
  var triple = tagData.triple || {}
  var IdMap = {}
  var idToIndex = {}
  var activeRoleFilters = []
  var activeLinkFilters = []
  var activeRelationships = {}
  var isMembershipLinkActive
  var hiddenMemberLink

  //extract active Roles and Links and map to a singleton
  keys(triple).forEach(function (key) {
    var expression = triple[key]
    if (expression.active) {
      debug('expression active', expression)
      if (expression.type === 'Role') {
        debug('Role active: ', expression)
        activeRoleFilters.push(expression.id)
      }
      if (expression.type === 'Link') {
        activeLinkFilters.push(expression.id)
        activeRelationships[expression.relationshipType] = true
      }
    }
    IdMap[expression.id] = expression //outside active statement so hiddenlinks can find it
  })

  for (var i=0, len = filters.length; i<len; i++) {
    var filter = filters[i]
    if (filter.active) {
      debug('active filter', filter)
      if (filter.type === 'Role') { activeRoleFilters.push(filter.id) }
      else {
        activeLinkFilters.push(filter.id)
        activeRelationships[filter.relationshipType] = true
      }
      IdMap[filter.id] = filter
    }
  }

  debug('activeRelationships', activeRelationships, activeRoleFilters)

  isMembershipLinkActive = contains(activeLinkFilters, function (id) {
    return memberLinkTypeId || groupLinkTypeId
  })

  hiddenMemberLink = (!isMembershipLinkActive && activeLinkFilters.length === 0)

  graph.forEachNode(function (node) {
    var nodeRoleTypeIds = map(node.data.roles, function (role) { return role.type.getId() })
    var nodeRelationshipTypeIds = map(node.data.relsByType, function (arr, key) { return key })
    var roleMatches = intersection(activeRoleFilters, nodeRoleTypeIds)
    var relMatches = intersection(keys(activeRelationships), nodeRelationshipTypeIds) //link filters/expressions are 'greedy'
    var isContextAgent = (node.id === contextAgentId)

    debug('match', nodeRelationshipTypeIds, activeRelationships)
    if (roleMatches.length > 0 || relMatches.length > 0 || isContextAgent) {
    //the node has an active role or is the contextAgent
      var node = {
        activeRoleTypes: roleMatches,
        activeRelationships: relMatches,
        id: node.id,
        model: node.data,
        fixed: isContextAgent,
        IdMap: IdMap
      }

      if (isContextAgent) {
        debug('isContextAgent')
        node.x = centerCoords[0]
        node.y = centerCoords[1]
        node.w = 80
        node.h = 80
      }
      else {
        node.w = 40
        node.h = 40
      }
      nodes.push(node)
      idToIndex[node.id] = nodes.length -1
    }

  })

  debug('nodes', idToIndex, nodes   )

  graph.forEachLink(function (link) {
    var fromId = link.fromId
    var source = idToIndex[fromId]
    var target = idToIndex[link.toId]
    var sourceRole = getSourceRole(link.data.roles, fromId)
    // var sourceNode = nodes[source]
    // debug('source', source, nodes, sourceNode)
    var linkTypeId = sourceRole.linkTypeId
    var isActive = contains(activeLinkFilters, linkTypeId)
    var isMemberLink = (linkTypeId === memberLinkTypeId)
    var isHidden = ((hiddenMemberLink || !isActive) && isMemberLink)
    // var isHidden = (
    //   (sourceNode && sourceNode.activeRelationships.length === 0)
    //   && fromId !== contextAgentId
    //   && isMemberLink
    // ) // NOTE alternative: only creates a hidden link if the sourceNode has no active links

    var sourceAndTargetPresent = (typeof source !== 'undefined' && typeof target !== 'undefined')
    debug('link', sourceNode, fromId, linkTypeId)

    if ((isActive || isHidden) && sourceAndTargetPresent) {

      links.push({
        id: link.id,
        hidden: isHidden,
        source: source,
        target: target,
        model: link.data,
        color: IdMap[linkTypeId].color,
        length: getLinkLength(keys(activeRelationships).length+1,80),
      })
    }
  })
  debug('links')

  debug(links)


  return [nodes, links]
}
