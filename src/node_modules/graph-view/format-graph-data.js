var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')
var filter = require('lodash.filter')
var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:formatGraphData')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')

var config = require('config')
var prefix = Url.format(config.api)

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberTypeId = prefix + '/roleTypes/member'
var memberOfLabel = "is a member of"
var hiddenLinks = {}


module.exports = function (linkLabels, graph, roleTypes, contextAgentId, centerCoords) {
  var nodes = []
  var links = []
  var activeLabels = filter(linkLabels, function (linkLabel) { return linkLabel.active })
  var activeRoleTypes = keys(roleTypes).reduce(function (memo, roleTypeId) {
    if (roleTypes[roleTypeId].active) {
      memo.push(roleTypeId)
    }
    return memo
  }, [])

  debug('activeRoleTypes', activeRoleTypes, roleTypes)

  var isMembershipActive = contains(activeLabels, function (label) {
    return 'has member' || 'is a member of'
  })

  var hiddenMemberOf = (!isMembershipActive && activeLabels.length === 0) ?
    true :
    false


  debug('isMembershipActive', isMembershipActive, activeLabels, hiddenMemberOf)
  // hiddenLinks[memberOfLabel] = false

  if (roleTypes[memberTypeId] && !linkLabels[memberOfLabel]) {
    hiddenLinks[memberOfLabel] = true
  }


  // else {
  //   hiddenLinks[memberOfLabel] = false
  // }
  debug('hiddenLinks[memberOfLabel]0  ', hiddenLinks)
  var idToIndex = {}


  graph.forEachNode(function (node) {
    var nodeRoleTypeIds = map(node.data.roles, function (role) { return role.type.getId() })
    var match = intersection(activeRoleTypes, nodeRoleTypeIds)
    var isContextAgent = (node.id === contextAgentId)

    debug('node', node, match)
    if (match.length > 0 || isContextAgent) {
    //the node has an active role or is the contextAgent
      var node = {
        activeRoleTypes: match,
        id: node.id,
        model: node.data,
        fixed: isContextAgent,
        roleTypes: roleTypes
      }

      if (isContextAgent) {
        node.x = centerCoords[0]
        node.y = centerCoords[1]
        node.w = 80
        node.h = 80
      }
      else {
        node.w = 40
        node.h = 40
      }

      nodes.push(node)
      idToIndex[node.id] = nodes.length - 1
    }

    debug('node', node.id )

  })

  debug('idToIndex', idToIndex)
  graph.forEachLink(function (link) {
    var fromId = link.fromId
    var linkLabel

    var fromRole = find(link.data.roles, function (role) {
      if (role.agent.getId() !== fromId) return false // not the source!
      var label = role.label.split(' ').filter(function (word) { return !isUrl(word) }).join(' ')
      linkLabel = linkLabels[label]
      debug('linkLabel', linkLabel)
      return (linkLabel && linkLabel.active) || //active link OR
        (hiddenMemberOf && label === 'is a member of') //
    })

      if (fromRole) {
        var typeId = fromRole.type.getId()
        label = fromRole.label.split(' ').filter(function (word) { return !isUrl(word) }).join(' ')

        var fromIndex = idToIndex[link.fromId]
        var toIndex = idToIndex[link.toId]
        debug('indices', fromIndex, toIndex, link.fromId, idToIndex)
        var isHidden = (hiddenMemberOf && label === 'is a member of') ? true : false

        links.push({
          id: link.id,
          hidden: isHidden,
          source: fromIndex,
          target: toIndex,
          model: link.data,
          color: roleTypes[typeId].color,
          length: (isHidden || isMembershipActive) ? 100 : null,
        })

      }

  })

  debug('formatGraphData() ->', nodes, activeRoleTypes )
  return [nodes, links, idToIndex]
}
