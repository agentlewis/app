var keys = require('lodash.keys')
var pluck = require('lodash.pluck')
var contains = require('lodash.contains')
var map = require('lodash.map')

var intersection = require('lodash.intersection')
var debug = require('debug')('graph-view:formatGraphData')
var Url = require('url')
var find = require('lodash.find')
var isUrl = require('is-url-superb')

var config = require('config')
var prefix = Url.format(config.api)

//DEFAULTS
var membershipTypeId = prefix + '/relationshipTypes/membership'
var memberLinkTypeId = prefix + '/roleTypes/member/link'
var groupLinkTypeId = prefix + '/roleTypes/group/link'




module.exports = function (linkLabels, graph, roleTypes, contextAgentId, centerCoords, tagData) {
  var nodes = []
  var links = []
  var filters = tagData.filters || []
  var triple = tagData.triple || {}
  var IdMap = {}
  var idToIndex = {}
  var activeRoleFilters = []
  var activeLinkFilters = []
  var isMembershipLinkActive
  var hiddenMemberLink

  //extract active Roles and Links and map to a singleton
  keys(triple).forEach(function (key) {
    var expression = triple[key]
    if (expression.active) {
      if (expression.typeId === 'Role') activeRoleFilters.push(expression.id)
      if (expression.typeId === 'Link') activeLinkFilters.push(expression.id)
      IdMap[expression.id] = expression
    }
  })

  for (var i=0, len = filters.length; i<len; i++) {
    var filter = filters[i]
    if (filter.active) {
      if (filter.type === 'Role') { activeRoleFilters.push(filter.id) }
      else { activeLinkFilters.push(filter.id)}
      IdMap[filter.id] = filter
    }
  }


  isMembershipLinkActive = contains(activeLinkFilters, function (id) {
    return prefix + '/roleTypes/member/link' || prefix + '/roleTypes/group/link'
  })

  hiddenMemberLink = (!isMembershipLinkActive && activeLinkFilters.length === 0)

  graph.forEachNode(function (node) {
    var nodeRoleTypeIds = map(node.data.roles, function (role) { return role.type.getId() })
    var match = intersection(activeRoleFilters, nodeRoleTypeIds)
    var isContextAgent = (node.id === contextAgentId)

    if (match.length > 0 || isContextAgent) {
    //the node has an active role or is the contextAgent
      var node = {
        activeRoleTypes: match,
        id: node.id,
        model: node.data,
        fixed: isContextAgent,
        IdMap: IdMap
      }

      if (isContextAgent) {
        node.x = centerCoords[0]
        node.y = centerCoords[1]
        node.w = 80
        node.h = 80
      }
      else {
        node.w = 40
        node.h = 40
      }

      nodes.push(node)
      idToIndex[node.id] = nodes.length - 1
    }
  })

  graph.forEachLink(function (link) {
    var fromId = link.fromId
    var activeLinkTypeId
    var isMemberLink
    var isHidden
    for (var i=0, len = link.data.roles.length; i < len; i++) {
      var role = link.data.roles[i]
      if (role.agent.getId() === fromId ) { //its the sourec role
        var linkTypeId = role.type.getId() + '/link'
        if (
          contains(activeLinkFilters, linkTypeId) || //its active OR
          (hiddenMemberLink && linkTypeId === memberLinkTypeId) //its hidden
        ) {
          activeLinkTypeId = linkTypeId
          if (linkTypeId === memberLinkTypeId) {
            isMemberLink = true
            if (hiddenMemberLink) isHidden = true
          }
        }
      }
    }

    if (activeLinkTypeId || isHidden) {
      links.push({
        id: link.id,
        hidden: isHidden,
        source: idToIndex[fromId],
        target: idToIndex[link.toId],
        model: link.data,
        color: IdMap[activeLinkTypeId] ? IdMap[activeLinkTypeId].color : null,
        length: (isHidden || isMemberLink) ? 100 : null,
      })
    }
  })

  return [nodes, links]
}
