var React = require('react')
var debug = require('debug')('holodex:graph-view:node-ui')
var r = require('r-dom')
var extend = require('xtend')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')

function circumference (r) {
  return Math.PI*r
}

var style = {
  circleClip: {
    cursor: 'pointer',
    border: '2px solid white',
    borderRadius: '50%',
    MozBorderRadius: '50%',
    BebkitBorderRadius: '50%',
    boxShadow: '0px 0px 5px rgba(48,48,48,0.9)',
    WebkitBoxShadow: '0px 0px 5px rgba(48,48,48,0.9)',
  },
  
  squareClip: {
    // TODO
    //'-webkit-clip-path': 'rectangle(0% 0% 100% 100%)',
    //'clip-path': 'rectangle(0% 0% 100% 100%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    node: React.PropTypes.object.isRequired,
    handleClick: React.PropTypes.func
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      haloWidth: 5,
      // roleIconRatio: 10,
      // startAngle: Math.PI/3 //radians
    }
  },

  render: function () {
    // debug('node', d)
    var d = this.props.node
    var offset = d.w / 2
    var x = d.x - offset
    var y = d.y - offset
    var r = d.w/2
    var activeRoleTypes = this.props.node.activeRoleTypes || []
    activeRoleTypes = activeRoleTypes.filter(function (roleTypeId) {
      return roleTypeId !== memberTypeId
    })

    debug('node', d)

    // var halos = (activeRoleTypes.length > 0) ? this.renderHalos(activeRoleTypes) : null
    // var roleIcons = (activeRoleTypes.length > 0) ? this.renderRoleIcons(activeRoleTypes, r) : null

    // debug('node', this.props)
    var isPerson = d.model.getType() === 'Person'
    var imageStyle = isPerson ? style.circleClip : style.squareClip

    return (
      React.createElement('g', { className: 'node' }, [
        isPerson && React.createElement('circle', {
          cx: x+d.w/2,
          cy: y+d.w/2,
          r: d.w/2+2,
          fill: '#ECEFF1'
        }),
        React.createElement('clipPath', {
          id: d.model.getId() + '/node-clip-path',
        }, [
          isPerson && React.createElement('circle', {
            cx: x+d.w/2,
            cy: y+d.w/2,
            r: d.w/2,
            fill: 'transparent'
          })
        ]),
        React.createElement('image', {
          'xlink:href': d.model.image,
          onClick: this.handleClick,
          style: extend(imageStyle, {
            clipPath: isPerson && 'url(#' + d.model.getId() + '/node-clip-path)'
          }),
          height: String(d.h),
          width: String(d.w),
          x: String(x),
          y: String(y)
        })
      ])
    )
  },

  handleClick: function () {
    this.props.handleClick(this.props.node.model)
  },

  // renderHalos: function (activeRoleTypes) {
  //   var self = this
  //   var w = self.props.node.w
  //   var x = self.props.node.x
  //   var y = self.props.node.y
  //   return activeRoleTypes.map(function (roleTypeId, i) {
  //     return React.createElement('circle', {
  //       cx: x,
  //       cy: y,
  //       r: w/2+((i+1)*self.state.haloWidth),
  //       fill: self.props.node.IdMap[roleTypeId].color
  //     })
  //   }).reverse()
  // },

  // renderRoleIcons: function (activeRoleTypes, radius) {
  //   var roleIconWidth = circumference(radius)/this.state.roleIconRatio
  //   var hypotenuse = radius + roleIconWidth/2
  //   var w = this.props.node.w
  //   var x = this.props.node.x
  //   var y = this.props.node.y
  //   return activeRoleTypes.map(function (roleTypeId, i) {
  //     var startAngle = this.state.startAngle
  //     var angle = startAngle + (i*startAngle)
  //
  //     return React.createElement('circle', {
  //       cx: x+Math.cos(angle)*hypotenuse,
  //       cy: y-Math.sin(angle)*hypotenuse,
  //       r: roleIconWidth,
  //       fill: this.props.node.IdMap[roleTypeId].color
  //     })
  //   }.bind(this))
  //
  // },


})
