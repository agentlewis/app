var React = require('react')
var debug = require('debug')('holodex:graph-view:node-ui')
var r = require('r-dom')
var extend = require('xtend')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)

var memberTypeId = prefix + '/roleTypes/member'
var router = require('router')

function circumference (r) {
  return Math.PI*r
}

var style = {
  avatar: {
    cursor: 'pointer',
    border: '2px solid white',
    WebkitBoxShadow: '0px 0px 5px rgba(48,48,48,0.9)',
    boxShadow: '0px 0px 5px rgba(48,48,48,0.9)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    node: React.PropTypes.object.isRequired,
    handleClick: React.PropTypes.func
  },
  //
  // getInitialState: function () {
  //   return {
  //     activeHalos: {},
  //     haloWidth: 5,
  //     // roleIconRatio: 10,
  //     // startAngle: Math.PI/3 //radians
  //   }
  // },

  render: function () {
    var node = this.props.node

    return (
      React.createElement('g', { className: 'node' }, [
        React.createElement('circle', {
          cx: node.x,
          cy: node.y,
          r: Math.max(node.w / 2) + 2,
          fill: '#ECEFF1'
        }),
        /* isPerson ? React.createElement('circle', {
          cx: d.x,
          cy: d.y,
          r: Math.max(d.w / 2) + 2,
          fill: '#ECEFF1'
        }) : React.createElement('rect', {
          x: d.x - d.w / 2 - 1,
          y: d.y - d.h / 2 - 1,
          width: d.w + 2,
          height: d.h + 2,
          fill: '#ECEFF1'
        })*/,
        React.createElement('clipPath', {
          id: node.data.getId() + '/node-clip-path',
        }, [
          React.createElement('circle', {
            cx: node.x,
            cy: node.y,
            r: Math.max(node.w, node.h) / 2
          })
          /*isPerson ? React.createElement('circle', {
            cx: d.x,
            cy: d.y,
            r: Math.max(d.w, d.h) / 2
          }) : React.createElement('rect', {
            x: d.x - d.w / 2,
            y: d.y - d.h / 2,
            width: d.w,
            height: d.h
          })*/
        ]),
        React.createElement('image', {
          'xlink:href': node.data.image,
          onClick: this.handleClick,
          style: extend(style.avatar, {
            clipPath: 'url(#' + node.data.getId() + '/node-clip-path)'
          }),
          height: String(node.h),
          width: String(node.w),
          x: String(node.x - node.w / 2),
          y: String(node.y - node.h / 2)
        })
      ])
    )
  },

  handleClick: function () {
    var model = this.props.node.data
    this.props.handleClick(model)
  }
})
