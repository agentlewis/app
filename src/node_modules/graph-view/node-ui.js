var React = require('react')
var debug = require('debug')('holodex:graph-view:node-ui')
// var r = require('r-dom')
var extend = require('xtend')
var coordTransform = require('util/coordinate-transform')
var getScreenCoords = require('util/get-screen-coords')

var style = {
  avatar: {
    cursor: 'pointer',
    border: '2px solid white',
    WebkitBoxShadow: '0px 0px 5px rgba(48,48,48,0.9)',
    boxShadow: '0px 0px 5px rgba(48,48,48,0.9)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({

  contextTypes: {
    svg: React.PropTypes.any
  },

  propTypes: {
    vector: React.PropTypes.array,
    node: React.PropTypes.object.isRequired,
    handleClick: React.PropTypes.func
  },

  render: function () {
    var node = this.props.node
    debug(this.props)

    return (
      React.createElement('g', { className: 'node' }, [
        React.createElement('circle', {
          cx: node.x,
          cy: node.y,
          r: Math.max(node.w / 2) + 2,
          fill: '#ECEFF1'
        }),
        React.createElement('clipPath', {
          id: node.data.getId() + '/node-clip-path'
        }, [
          React.createElement('circle', {
            cx: node.x,
            cy: node.y,
            r: Math.max(node.w, node.h) / 2
          })
        ]),
        React.createElement('image', {
          'xlink:href': node.data.image,
          onClick: this.handleClick,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          style: extend(style.avatar, {
            clipPath: 'url(#' + node.data.getId() + '/node-clip-path)'
          }),
          height: String(node.h),
          width: String(node.w),
          x: String(node.x - node.w / 2),
          y: String(node.y - node.h / 2)
        }),
        // React.createElement('circle', {
        //   cx: node.x,
        //   cy: node.y,
        //   r: Math.max(node.w, node.h) / 2,
        //   opacity: 0,
        //   onMouseOver:
        // })
      ])
    )
  },

  handleClick: function () {
    var model = this.props.node.data
    this.props.handleClick(model)
  },

  handleMouseOver: function (e) {
    debug('handleMouseOver', this.context)
    //convert mouse coordinates to svg coordinates
    //convert mouse coordinates to svg coordinates
    var DOMNode = React.findDOMNode(this.context.svg)
    var layer = DOMNode.getElementById('transform-layer')

    var elem = React.findDOMNode(this)



    var corners = getScreenCoords(DOMNode, elem)


    debug('corners', corners)
    var svgGlobal = coordTransform({
      DOMNode: DOMNode,
      layer: layer,
      coords: [this.props.node.x, this.props.node.y]
    })

    // var p = m(
    //   this.props.vector,
    //   [svgGlobal.x, svgGlobal.y, 1]
    // )
    // debug(p, svgGlobal)

    this.props.handleMouseOver(corners)
    // this.props.handleMouseOver([svgGlobal.x, svgGlobal.y], this.props.node.w)
  },

  handleMouseOut: function () {
    debug('handleMouseOut')
    this.props.handleMouseOut()
  }


})
