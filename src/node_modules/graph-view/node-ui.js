var React = require('react')
var debug = require('debug')('holodex:graph-view:node-ui')
var r = require('r-dom')

var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)

var memberTypeId = prefix + '/roleTypes/member'

var router = require('router')

// TODO dynamic styles
var style = {
  circleClip20: {
    'border': '2px solid white',
    'borderRadius': 20,
    '-mozBorderRadius': 20,
    '-webkitBorderRadius': 20,
    'boxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkitBoxShadow': '0px 0px 5px rgba(48,48,48,0.9)',
    '-webkit-clip-path': 'circle(50% at 50% 50%)',
    'clip-path': 'circle(50% at 50% 50%)'
  },

  node: {
    position: 'absolute'
  }
}

module.exports = React.createClass({
  propTypes: {
    node: React.PropTypes.object.isRequired
  },

  getInitialState: function () {
    return {
      activeHalos: {},
      haloWidth: 5
    }
  },

  render: function () {
    var d = this.props.node
    var offset = d.w / 2
    var x = d.x - offset
    var y = d.y - offset
    var activeRoleTypes = this.props.node.activeRoleTypes
    activeRoleTypes = activeRoleTypes.filter(function (roleTypeId) {
      return roleTypeId !== memberTypeId
    })

    debug('node data', d)
    var halos = (activeRoleTypes.length > 0) ? this.renderHalos(activeRoleTypes) : null

    debug('halos', halos)

    return (
      React.createElement('g', { className: 'node' }, [
        halos,
        React.createElement('image', {
          'xlink:href': d.model.image,
          height: String(d.h),
          width: String(d.w),
          x: String(x),
          y: String(y),
          clipPath: 'url(#circle-clip-20)',
          className: 'node circle-clip-20',
          style: style.circleClip20,
          onClick: this.handleClick
        })
      ]
    )

    )
  },

  getHref: function () {
    var node = this.props.node
    return router.format({ id: node.model.id })
  },

  navigate: router.navigate.bind(router),

  handleClick: function () {
    this.navigate(this.getHref())
  },

  renderHalos: function (activeRoleTypes) {
    debug('rendering halos', activeRoleTypes)
    var self = this
    var w = self.props.node.w
    var x = self.props.node.x
    var y = self.props.node.y
    return activeRoleTypes.map(function (roleTypeId, i) {
      debug('halo', roleTypeId  )
      return React.createElement('circle', {
        cx: x,
        cy: y,
        r: w/2+((i+1)*self.state.haloWidth),
        fill: self.props.node.roleTypes[roleTypeId].color
      })
    }).reverse()





    }


})
