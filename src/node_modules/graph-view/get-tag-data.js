var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isUrl = require('is-url-superb')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var vars = require('ui/vars')
var colors = vars.nodesAndLinks

//helpers
var keys = require('lodash.keys')

//logging
var debug = require('debug')('graph-view:get-relationship-obj')

//Defaults
var membership = prefix + '/relationshipTypes/membership'
var stewardship = prefix + '/relationshipTypes/stewardship'
var steward = prefix + '/roleTypes/steward'
var stewardee = prefix + '/roleTypes/stewardee'
var member = prefix + '/roleTypes/member'
var group = prefix + '/roleTypes/group'
var linkLabels = {}
linkLabels[stewardee] = 'is stewarded by'
linkLabels[steward] = 'is the steward of'

function makeSubject (agentType) {
  var isPerson = (agentType === 'Person')
  return {
    id: member,
    type: 'Role',
    agentType: agentType,
    roleType: member, //rename to roleTypeId
    linkTypeId: member + '/link',
    relationshipTypeId: membership,
    active: true,
    label: isPerson ? 'People in' : 'Groups in',
    withPredLabel: isPerson ? 'People who' : 'Groups that',
    expression: 'subject',
    isPlural: true,
    index: 0,
    color: vars.colors.mediumGray
  }
}

function makePredicate (isActive, index) {
  return {
    id: member + '/link',
    type: 'Link',
    roleType: member, //rename to roleTypeId
    linkTypeId: member + '/link',
    relationshipTypeId: membership,
    active: isActive,
    label: 'belongs to', //not used
    pluralLabel: 'belong to',
    expression: 'predicate',
    index: index,
    color: vars.colors.mediumGray
  }
}

function makeObject (model) {
  return {
    id: model.getId(),
    model: model,
    type: 'Agent',
    agentType: model['@type'],
    active: true,
    label: model.name,
    expression: 'object',
    index: 2,
    color: vars.colors.mediumGray
  }
}

function formatTriple (model) {
  var triple = {}
  if (!model['@type']) return { subject: {}, predicate: {}, object: {}}

  // var otherExpression = tripleFormat.expression === 'subject' ? 'object' : 'subject'
  debug('model', model, model['@type'])
  if (model['@type'] === 'Group') {
    if (model.childGroups.length === 0) {
      debug('no child groups')
      //People in [Group]
      triple.subject = makeSubject('Person')
      triple.predicate = makePredicate(false, 1)
    }
    else {
      debug('child groups')
      //Groups that belong to [Group]
      triple.subject = makeSubject('Group')
      triple.predicate = makePredicate(true, 1)
    }
  }
  else {
    debug('person')
    //Groups that [Person] belongs to // to which [Person] belongs?
    triple.subject = makeSubject('Group')
    triple.predicate = makePredicate(true, 2)
  }
  triple.object = makeObject(model)
  debug('formatTriple', triple)
  return triple
}

function makeFilter (role, type, color, targetId) {
  debug('makefilter', role, type)
  return {
    type: type,
    id: type === 'Role' ? role.type.getId() : role.linkTypeId,
    relationshipTypeId: role.relationship.type.getId(),
    roleTypeId: role.type.getId(),
    linkTypeId: role.linkTypeId,
    targetId: targetId,
    color: color,
    active: false,
    label: type === 'Role' ? 'a ' + role.type.name : linkLabels[role.type.getId()]
  }
}

function linkIsTriple (link, triple) {
  //excludes membership links from filters TODO: more sophisticated
  if (link.data.relationship.type.getId() === membership) return true
  return false
}

module.exports = function (model) {
  var filters = []
  var roleIdMap = {}
  var triple = formatTriple(model)

  model.relationshipGraph.forEachLink(function (link) {
    debug('link', link)
    var roleTypeId = link.data.type.getId()
    if (roleIdMap[roleTypeId]) { return } //already dealt with
    if (linkIsTriple(link, triple)) {
      roleIdMap[roleTypeId] = colors[keys(roleIdMap).length]
      return
    }
    roleIdMap[roleTypeId] = colors[keys(roleIdMap).length] //keep track of already assigned and give 'em a color'
    filters.push(makeFilter(link.data, 'Role', roleIdMap[roleTypeId]), link.toId)
    filters.push(makeFilter(link.data, 'Link', roleIdMap[roleTypeId]), link.toId)
  })


  var cleaned = filters.filter(function(fil) { return fil.type })
  debug('Filters', { triple: triple, filters: cleaned })
  return { triple: triple, filters: cleaned }
}
