var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isUrl = require('is-url-superb')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)
var vars = require('ui/vars')
var colors = vars.nodesAndLinks
var keys = require('lodash.keys')

var debug = require('debug')('graph-view:get-relationship-obj')
//
var colors = require('ui/vars').nodesAndLinks

var Map = {}

var membership = prefix + '/relationshipTypes/membership'
var stewardship = prefix + '/relationshipTypes/stewardship'
var steward = prefix + '/roleTypes/steward'
var stewardee = prefix + '/roleTypes/stewardee'
var member = prefix + '/roleTypes/member'
var group = prefix + '/roleTypes/group'
var linkLabels = {}
linkLabels[stewardee] = 'is stewarded by'
linkLabels[steward] = 'is the steward of'

function getDefaultTripleFormat (model) {
  if (model['@type'] === 'Group') {

    var defaultTripleFormat = { linkTypeId: member + '/link', roleType: member, relationshipType: membership, expression: 'subject', isPlural: true, index: 0, type: 'Role'  }
    debug('defaultTripleFormat', defaultTripleFormat)
     if (model.childGroups.length === 0) {
       defaultTripleFormat.agentType = 'Person'
       defaultTripleFormat.label = 'People in'
       defaultTripleFormat.withPredLabel = 'People who'
       return defaultTripleFormat //People in [Group]
     }
     else {
       defaultTripleFormat.agentType = 'Group'
       defaultTripleFormat.label = 'Groups in'
       defaultTripleFormat.withPredLabel = 'Groups that'
       return defaultTripleFormat //Subgroups in [Group]

     }
   }
   else {
     return { roleType: group, expression: 'object', type: 'Group', isPlural: true } //[Person]'s groups
   }
}

function formatTriple (model, tripleFormat) {
  var triple = {}
  var otherExpression = tripleFormat.expression === 'subject' ? 'object' : 'subject'

  debug('tripleFormat', tripleFormat)
  triple[tripleFormat.expression] = {
    relationshipType: tripleFormat.relationshipType,
    agentType: tripleFormat.agentType,
    roleType: tripleFormat.roleType,
    linkTypeId: tripleFormat.linkTypeId,
    type: tripleFormat.type,
    id: tripleFormat.roleType,
    color: '#707070',
    active: true,
    label: tripleFormat.label,
    withPredLabel: tripleFormat.withPredLabel,
    index: tripleFormat.index,
    isPlural: tripleFormat.isPlural
  }

  triple[otherExpression] = {
    type: model['@type'],
    id: model.getId(),
    color: '#707070',
    active: true,
    label: model.name,
    index: 2
  }

  triple.predicate = {
    type: 'Link',
    linkTypeId: prefix + '/roleTypes/member/link',
    id: prefix + '/roleTypes/member/link', //???
    relationshipType: membership,
    color: '#707070',
    active: false,
    label: 'belongs to',
    pluralLabel: 'belong to',
    index: 1
  }
  return triple
}

function makeFilter (role, type, color, targetId) {
  debug('makefilter', role, type)
  return {
    type: type,
    id: type === 'Role' ? role.type.getId() : role.linkTypeId,
    relationshipTypeId: role.relationship.type.getId(),
    roleTypeId: role.type.getId(),
    linkTypeId: role.linkTypeId,
    targetId: targetId,
    color: color,
    active: false,
    label: type === 'Role' ? 'a ' + role.type.name : linkLabels[role.type.getId()]
  }
}

function linkIsTriple (link, triple) {
  //excludes membership links from filters TODO: more sophisticated
  if (link.data.relationship.type.getId() === membership) return true
  return false
}

module.exports = function (model) {
  var filters = []
  var roleIdMap = {}
  var defaultTripleFormat = getDefaultTripleFormat(model)
  var triple = formatTriple(model, defaultTripleFormat)

  model.relationshipGraph.forEachLink(function (link) {
    debug('link', link)
    var roleTypeId = link.data.type.getId()
    if (roleIdMap[roleTypeId]) { return } //already dealt with
    if (linkIsTriple(link, triple)) {
      roleIdMap[roleTypeId] = colors[keys(roleIdMap).length]
      return
    }
    roleIdMap[roleTypeId] = colors[keys(roleIdMap).length] //keep track of already assigned and give 'em a color'
    filters.push(makeFilter(link.data, 'Role', roleIdMap[roleTypeId]), link.toId)
    filters.push(makeFilter(link.data, 'Link', roleIdMap[roleTypeId]), link.toId)
  })

  var cleaned = filters.filter(function(fil) { return fil.type })

  debug('Filters', { triple: triple, filters: cleaned })
  return { triple: triple, filters: cleaned }

}
