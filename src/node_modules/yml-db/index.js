var FsDb = require('fs-db')
var pull = require('pull-stream')
var debug = require('debug')('holodex:yml-db')
var yaml = require('js-yaml')
var clone = require('lodash.clone')
var gitPullCron = require('git-pull-cron')

var config = require('config')
var Model = require('base/model')

module.exports = getGraph

function getGraph (cb) {
  var db = FsDb({
    location: config.data.localDir,
    idAttribute: '@id',
    codec: {
      type: 'yml',
      encode: function (obj) {
        return yaml.safeDump(obj)
      },
      decode: function (str) {
        return yaml.safeLoad(str)
      }
    }
  })

  var latestCommit

  if (config.data.gitRepoUrl) {
    gitPullCron.init(
      config.data.gitRepoUrl,
      config.data.localDir,
      config.data.cronSpec,
      function (err, commit) {
        if (err) {
          return console.error(err.stack)
        }

        debug('git pulled commit', commit.id)

        if (latestCommit !== commit.id) {
          latestCommit = commit.id
          pullGraph()
        }
      }
    ).then(function () {
      pullGraph()
    })
  } else {
    pullGraph()
  }

  function pullGraph () {

    pull(
      db.createReadStream(),
      pull.map(function (item) {
        var attrs = clone(item)

        // rename idAttribute to '@id'
        attrs['@id'] = attrs.id
        delete attrs.id

        // TODO find more general solution to embedded objects
        //
        // if embedded role, reference parent relationship
        var embeddedRoleRe = /(.*relationships\/[^\/#]+)/
        var embeddedRoleMatch = attrs['@id'].match(embeddedRoleRe)
        if (embeddedRoleMatch) {
          attrs.relationship = embeddedRoleMatch[1]
        }

        return attrs
      }),
      pull.collect(function (err, arr) {
        if (err) { return cb(err) }

        var pulledGraph = arr
        .filter(function (item) {
          // HACK forget about @mixmix's helper objects
          return !(Object.keys(item).length === 2 && item.agent)
        })
        .map(function (item) {
          return Model.new(item)
        })

        cb(null, pulledGraph)
      })
    )
  }
}
