var pluck = require('lodash.pluck')
var find = require('lodash.find')
var debug = require('debug')('holodex:relationship:model')

var Model = require('base/model')
var roles = require('role/store')

module.exports = Model.extend({
  typeName: 'Relationship',
  collectionName: 'relationships',

  props: {
    type: 'link',
    context: 'link'
  },

  initialize: function (attrs, opts) {
    debug('initialize', this)
    Model.prototype.initialize.apply(this, arguments)

    this._roles = roles
      .addDynamicView(this.getId() + '/roles')
      .applyFind({
        relationship: this.getId()
      })
  },

  getRoleOf: function (agent) {
    return find(this.roles, function (role) {
      return role.agent === agent
    })
  },

  labelOf: function (agent) {
    return this.getRoleOf(agent).label
  },

  derived: {
    roles: {
      cache: false,
      fn: function () {
        return this._roles.data()
          .map(function (role) {
            var store = require('base/store')
            return store.findById(role['@id'])
          })
      }
    },
    agents: {
      cache: false,
      fn: function () {
        return pluck(this.roles, 'agent')
      }
    },
    rolesByType: {
      cache: false,
      fn: function () {
        var rolesByType = {}
        this.roles.forEach(function (role) {
          // if role type is string,
          if (typeof role.type === 'string') {
            // get associated role type object
            var roleType = this.type.roles.find(function (roleType) {
              return roleType.name === role.type
            })
            role.type = roleType
          }

          rolesByType[role.type.name] = role
        }, this)
        return rolesByType
      }
    }
  }
})
