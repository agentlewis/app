var Model = require('base/model')
var Collection = require('base/collection')
var debug = require('debug')("holodex:relationship:model")
var _ = require('lodash')

var Role = require('role/model')

module.exports = Model.extend({
  modelType: "Relationship",

  props: {
    type: "link",
  },

  collections: {
    roles: Collection.extend({
      model: Role,
    }),
  },

  derived: {
    rolesByType: {
      deps: ['roles'],
      fn: function () {
        var rolesByType = {}
        this.roles.forEach(function (role) {

          // if role type is string,
          if (typeof role.type === "string") {
            // get associated role type object
            var roleType = this.type.roles.find(function (roleType) {
              return roleType.name === role.type
            })
            role.type = roleType
          }

          rolesByType[role.type.name] = role
        }, this)
        return rolesByType
      },
    },
  },

})

var BaseModel = require('base/model')

var map = require('observ-node-array/map')
var debug = require('debug')("holodex:role:model")

module.exports = RoleModel

function RoleModel (context, mixin) {

  var roleModel = BaseModel(extend({
    $roleTypeId: Observ(),
    $agentId: Observ(),
    $relationshipId: Observ(),
  }, mixin))

  roleModel._type = "Role"

  // HACK HACK HACK
  // how to get single computed observable?
  //
  // @mmckegg says option is to either
  // use computed and only get JSON representation (not equivalent)
  // or use a map with multiple entities and do .get(0)
  //
  // OR listen to event and update a new agent observable
  //
  // BUT actually not important as usually the data
  // wants to be accessed from the other direction
  //
  // role has one agent
  roleModel.$agent = context.nodes.Agent(context)
  map(context.atom.$agents, function (agent) {
    if (agent.$id() === role.$agentId()) {
      return agent
    }
  })(function (agents) {
    roleModel.$agent.set(agents[0])
  })

  // role has one or no relationship
  roleModel.$relationship = context.nodes.Relationship(context)
  map(context.atom.$relationships, function (relationship) {
    if (relationship.$id() === relationshipId()) {
      return relationship
    }
  })(function (relationships) {
    roleModel.$relationship.set(relationships[0])
  })
  // /HACK HACK HACK

  return roleModel
}

RoleModel.extend = function (context) {
  // ensure atom has filtered set of roles
  if (!context.atom.roles) {
    context.atom.$roles = map(function (entity) {
      entity.$type === "Role" ? entity : undefined
    })
  }
}
