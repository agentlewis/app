var Model = require('base/model');
var debug = require('debug')("craftodex:ui:relationship:model");
var _ = require('lodash')

var registry = require('registry');

module.exports = Model.extend({
  modelType: "Relationship",

  props: {
    type: "link",
  },

  // HACK
  set: function (key, value, options) {
    debug("set", this, key, value, options);

    // Replicating a bit of the source so we can support all set 
    var attrs;
    options = options || {};

    // Handle both `"key", value` and `{key: value}` -style arguments.
    if (_.isObject(key) || key === null) {
        attrs = key;
        options = value;
    } else {
        attrs = {};
        attrs[key] = value;
    }

    // setup links based on relType
    var linkProp = function (propName) {
      debug("creating link prop definition", propName)
      this._createPropertyDefinition(propName, "link", false)
    }.bind(this)
    if (!this.relationshipType && attrs.relationshipType) {

      var relTypeId = attrs.relationshipType
      var relType = registry.get(relTypeId)
      debug("relType", relType)

      Object.keys(relType.agents).forEach(linkProp)

      relType.context &&
        Object.keys(relType.context).forEach(linkProp)
    }

    // defer rest to the original implementation
    return Model.prototype.set.call(this, attrs, options);
  },

  initialize: function (options) {
    /*
    this.on("change", function () {
    */
  },
});
