import { createSelector } from 'reselect'
import filter from 'lodash.filter'
import reduce from 'lodash.reduce'
const initialState = require('./reducers').initialState

const state = { relationships: initialState }
const relIds = state => state.relationships.ids
const relByIds = state => state.relationships.byId

const createMatcher = (val, key) => {
  if (!key) {
    return obj => {
      return (
        obj.source === val ||
        obj.target === val ||
        obj.context === val
      )
    }
  } else {
    return obj => {
      return obj[key] === val // specific relation
    }
  }
}

const agentRels = (agentId, relation) => {
  return createSelector(
    [relByIds],
    relByIds => {
      let matcher = createMatcher(agentId, relation)
      return filter(relByIds, (relationship) => matcher(relationship))
    }
  )
}

const agentRelsByRelation = agentId => {
  return createSelector(
    [
      agentRels(agentId, 'source'),
      agentRels(agentId, 'target'),
      agentRels(agentId, 'context')
    ],
    (asSource, asTarget, asContext) => {
      return {
        source: asSource,
        target: asTarget,
        context: asContext
      }
    }
  )
}

module.exports = {
  relIds: relIds,
  relByIds: relByIds,
  agentRels: agentRels,
  agentRelsByRelation: agentRelsByRelation
}

// console.log(initialState)

console.log(agentRels('simon')(state))
