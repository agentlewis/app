import { createSelector } from 'reselect'
import indexBy from 'lodash.indexby'
import pluck from 'lodash.pluck'
import filter from 'lodash.filter'
import reduce from 'lodash.reduce'
import mapValues from 'lodash.mapvalues'
import map from 'lodash.map'
import pick from 'lodash.pick'
import zipObject from 'lodash.zipobject'

import { agentsById } from 'agent/getters'

export const relationships = state => state.relationships

export const relationshipsById = createSelector(
  [relationships],
  (relationships) => indexBy(relationships, 'id')
)
export const relationshipIds = createSelector(
  [relationships],
  (relationships) => pluck(relationships, 'id')
)

export const relationshipsByAgentId = createSelector(
  [agentsById, relationshipsById],
  (agentsById, relationshipsById) => {
    return mapValues(agentsById, (agent, agentId) => {
      let matcher = createMatcher(agentId)
      return pick(relationshipsById, (relationship, relationshipId) => {
        return matcher(relationship)
      })
    })
  }
)

export const relationshipsByAgentIdAndDirection = createSelector(
  [agentsById, relationshipsById],
  (agentsById, relationshipsById) => {
    return mapValues(agentsById, function (agent, agentId) {
      return zipObject(map(['source', 'target', 'context'], function (relation) {
        return [relation, getMatches(relation)]
      }))

      function getMatches (relation) {
        let matches = filter(relationshipsById, createMatcher(agentId, relation))
        return indexBy(matches, 'id')
      }
    })
  }
)

function createMatcher (val, key) {
  if (!key) {
    return obj => {
      return (
        obj.source === val ||
        obj.target === val ||
        obj.context === val
      )
    }
  } else {
    return obj => {
      return obj[key] === val // specific relation
    }
  }
}
