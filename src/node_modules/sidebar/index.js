var insertCss = require('insert-css')
var r = require('r-dom')
var React = require('react')
var fs = require('fs')
var debug = require('debug')('sidebar')
var IconFactory = require('react-icon-factory')
var keys = require('lodash.keys')
var Select = require('react-select')
var TagSelect = require('./tag-select')
var extend = require('xtend')
var map = require('lodash.map')
var reduce = require('lodash.reduce')

var style = require('./style')


var Tag = require('./tag')

var simpleSidebarCSS = fs.readFileSync(__dirname + '/sidebar.css')
insertCss(simpleSidebarCSS)

var Icon = IconFactory({
  'long-arrow-left': r.g([
    r.path(
      { d: "M20 8h-12.17l5.59-5.59-1.42-1.41-8 8 8 8 1.41-1.41-5.58-5.59h12.17v-2z" }
    )
  ]),
  'add-circle-outline': r.g([
    r.path({ d: "M13 7h-2v4h-4v2h4v4h2v-4h4v-2h-4v-4zm-1-5c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" }
    )
  ]),
  'clear': r.g([
    r.path(
      { d:"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" }
    )
  ])
})




module.exports = React.createClass({

  propTypes: {
    style: React.PropTypes.object,
    model: React.PropTypes.object,
    route: React.PropTypes.object,
    roleTypes: React.PropTypes.object,
    linkLabels: React.PropTypes.object,
    updateActiveTag: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      style: {},
      model: {},
      route: {
        query: {}
      },
      roleTypes: {},
      linkLabels: {}
    }
  },

  render: function () {
    var model = this.props.model
    var route = this.props.route


    //TODO different view modes
    var view
    if (route.query.view === 'list') {
      view = this.renderListFilter()
    } else {
      view = this.renderGraphFilter()
    }

    return r.div(
      { id: 'sidebar-wrapper', style: style.index },
      [
        r.ul( { className: 'sidebar-nav'}, [
          r.li({ className: 'sidebar-brand'}, [
            r.a({ href: '#'}, 'Craftworks'   )
          ]),
          view,
          r.div({}, this.props.children),
        ])
      ]
    )
  },

  renderGraphFilter: function () {
    debug('renderGraphFilter', this.props)
    var model = this.props.model
    var roleTypes = this.props.roleTypes
    var linkLabels = this.props.linkLabels
    var style = extend(this.props.style, style)
    var clearIcon = r(
      Icon,
      { className: 'clear-tag', icon: 'clear', onClick: null }
    )


    debug('roleTypes', roleTypes)
    debug('linkLabels', linkLabels)

    var roleTags = reduce(roleTypes, function (memo, roleType) {
      if (roleType.active ) {
        var label = roleType.model ? roleType.model.pluralName : 'members' //hack 'cos model aint there
        memo.push(
          r(Tag, {
            label: label,
            icon: clearIcon,
            color: roleType.color,
            onIconClick: this.props.clearTag('roleTypes', label)
          })
        )
      }
      return memo
    }.bind(this), [])

    var linkTags = reduce(linkLabels, function (memo, linkLabel, key) {
      if (linkLabel.active ) {
        debug('linkTags', key)
        memo.push(
          r(Tag, {
            label: key,
            icon: clearIcon,
            color: linkLabel.color,
            onIconClick: this.props.clearTag('linkLabels', key)
          })
        )
      }
      return memo
    }.bind(this), [])

    return r.div({ className: 'graph-filter-control' }, [
      r.div({ className: 'tag-controls' }, [
          r.div({ className: 'tag-control-header roles'}, 'Nodes'),
          r.div({ className: 'tag-list'}, roleTags),
          r(TagSelect, {
              style: style,
              type: 'roleTypes',
              tagObject: roleTypes,
              updateActiveTag: this.props.updateActiveTag
            }
          ),
          r.div({ className: 'tag-control-header links'}, 'Links'),
          r.div({ className: 'tag-list'}, linkTags),
          r(TagSelect, {
              style: style,
              type: 'linkLabels',
              tagObject: linkLabels,
              updateActiveTag: this.props.updateActiveTag
            }
          )
        ]),
      ])
  },

  renderListFilter: function () {
    //TODO
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})
  },


})
