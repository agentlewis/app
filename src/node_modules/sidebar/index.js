var insertCss = require('insert-css')
var r = require('r-dom')
var React = require('react')
var fs = require('fs')
var debug = require('debug')('sidebar')
var IconFactory = require('react-icon-factory')
var keys = require('lodash.keys')
var Select = require('react-select')


var Tag = require('./tag')

var simpleSidebarCSS = fs.readFileSync(__dirname + '/sidebar.css')
insertCss(simpleSidebarCSS)

var Icon = IconFactory({
  'long-arrow-left': r.g([
    r.path(
      { d: "M20 8h-12.17l5.59-5.59-1.42-1.41-8 8 8 8 1.41-1.41-5.58-5.59h12.17v-2z" }
    )
    ]
  ),
  'add-circle-outline': r.g([
    r.path({ d: "M13 7h-2v4h-4v2h4v4h2v-4h4v-2h-4v-4zm-1-5c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" }
    )
    ]
  )
})

module.exports = React.createClass({

  propTypes: {
    model: React.PropTypes.object,
    route: React.PropTypes.object,
    roleTypes: React.PropTypes.object,
    linkLabels: React.PropTypes.object
  },

  getDefaultProps: function () {
    return {
      model: {},
      route: {
        query: {}
      },
      roleTypes: {},
      linkLabels: {}
    }
  },

  render: function () {
    var model = this.props.model
    var route = this.props.route

    //TODO different view modes
    var view
    if (route.query.view === 'list') {
      view = this.renderListFilter()
    } else {
      view = this.renderGraphFilter()
    }

    return r.div(
      { id: 'sidebar-wrapper' },
      [
        r.ul( { className: 'sidebar-nav'}, [
          r.li({ className: 'sidebar-brand'}, [
            r.a({ href: '#'}, 'Craftworks'   )
          ]),
          view,
          r.div({}, this.props.children),
        ])
      ]
    )
  },

  renderGraphFilter: function () {
    debug('renderGraphFilter', this.props)
    var model = this.props.model
    var roleTypes = this.props.roleTypes
    var linkLabels = this.props.linkLabels

    debug('roleTypes', roleTypes)
    debug('linkLabels', linkLabels)

    var options = []
    var value = ''

    keys(roleTypes).forEach(function (key) {
      var model = roleTypes[key].model
      if (model) {
        options.push({
          value: model.getId(),
          label: model.pluralName
        })
        if (roleTypes[key].active) {
          if (value.length > 0) value += ',' //add delimeter
          //NOTE only render give a value (id) if the options has a corrsponding label
          if (options.length > 0) value += model.getId()
        }
      }
    })

    keys(linkLabels).forEach(function (key) {
      options.push({ value: key, label: key })

      if (linkLabels[key].active) {
        if (value.length > 0) value += ',' //add delimeter
        value += key
      }
    })

    debug('options, value', options, value)

    return r.div({ className: 'graph-filter-control' }, [
      r(Select,
        {
          name: 'role-tag-input',
          options: options,
          value: value,
          multi: true,
          onChange: this.handleRoleTagSelectChange
        }
      )
    ])
  },

  handleRoleTagSelectChange: function (val) {
    var selectedTags = val.split(',') //delimiter 
    debug('val', val)
    this.props.updateActiveTags(selectedTags)
  },

  renderListFilter: function () {
    //TODO
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps, state: this.state})
  },


})
