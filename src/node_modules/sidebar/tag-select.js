var r = require('r-dom')
var React = require('react')
var debug = require('debug')('tag-select')
var Url = require('url')
var config = require('config')
var prefix = Url.format(config.api)

var memberTypeId = prefix + 'roleTypes/member'


var keys = require('lodash.keys')
var Select = require('react-select')

module.exports = React.createClass({

  propTypes: {
    tagObject: React.PropTypes.object,
    type: React.PropTypes.string,
    updateActiveTags: React.PropTypes.func
  },

  render: function () {
    var type = this.props.type
    var tagObject = this.props.tagObject
    var options = []
    var value = ''

    debug('tagObject', tagObject, type)

    keys(tagObject).forEach(function (key) {
      debug('key', key)
      var model = tagObject[key].model
      if (model) {
        options.push({
          value: (type === 'linkLabels') ? key : model.getId(),
          label: (type === 'linkLabels') ? key : model.pluralName
        })
        if (tagObject[key].active) {
          if (value.length > 0) value += ',' //add delimeter
          value += (type === 'linkLabels') ? key : model.getId()
        }
      }
    })

    debug('options', options, value)

    return r.div({ className: this.props.type+'control' }, [
      r(Select,
        {
          name: this.props.type+'-tag-input',
          options: options,
          value: value,
          multi: true,
          onChange: this.handleTagSelectChange
        }
      )
    ])
  },

  handleTagSelectChange: function (val) {
    var selectedTags = val.split(',') //delimiter
    debug('selectedTags', selectedTags)
    this.props.updateActiveTags(this.props.type, selectedTags)
  },


})
