var express = require('express')
var FsDb = require('fs-db')
var pull = require('pull-stream')
var sendJson = require('send-data/json')
var debug = require('debug')('holodex:api')
var yaml = require('js-yaml')
var clone = require('lodash.clone')
var gitPullCron = require('git-pull-cron')

var Model = require('base/model')

module.exports = createApi

function createApi (config) {
  debug('config', config)

  var api = express()

  var db = FsDb({
    location: config.data.localDir,
    idAttribute: '@id',
    codec: {
      type: 'yml',
      encode: function (obj) {
        return yaml.safeDump(obj)
      },
      decode: function (str) {
        return yaml.safeLoad(str)
      }
    }
  })

  var graph
  var latestCommit
  var queue = []

  gitPullCron.init(
    config.data.gitRepoUrl,
    config.data.localDir,
    config.data.cronSpec,
    function (err, commit) {
      if (err) {
        return console.error(err.stack)
      }

      debug('git pulled commit', commit.id)

      if (latestCommit !== commit.id) {
        latestCommit = commit.id
        pullGraph()
      }
    }
  ).then(function () {
    pullGraph()
  })

  function pullGraph () {
    pullLocalDir(function (err, pulledGraph) {
      if (err) {
        throw err
      }
      
      debug('pulled graph', pulledGraph)

      graph = pulledGraph

      queue.forEach(function (cb) { cb() })
      queue = []
    })
  }

  function pullLocalDir (cb) {

    pull(
      db.createReadStream(),
      pull.map(function (item) {
        var attrs = clone(item)

        // rename idAttribute to '@id'
        attrs['@id'] = attrs.id
        delete attrs.id

        // TODO find more general solution to embedded objects
        //
        // if embedded role, reference parent relationship
        var embeddedRoleRe = /(.*relationships\/[^\/#]+)/
        var embeddedRoleMatch = attrs['@id'].match(embeddedRoleRe)
        if (embeddedRoleMatch) {
          attrs.relationship = embeddedRoleMatch[1]
        }

        return attrs
      }),
      pull.collect(function (err, arr) {
        if (err) { return cb(err) }

        var pulledGraph = arr.map(function (item) {
          return Model.new(item)
        })

        cb(null, pulledGraph)
      })
    )
  }

  api.get('/*', function (req, res) {
    debug('get', req.path)
    if (graph == null) {
      queue.push(sendGraph.bind(null, req, res))
    } else {
      sendGraph(req, res)
    }
  })

  function sendGraph (req, res) {
    var json = {
      '@context': {},
      '@graph': graph.map(function (model) {
        return model.toJSON()
      })
    }
    sendJson(req, res, {
      statusCode: 200,
      body: json
    }, function (err) {
      if (err) { throw err }
    })
  }

  return api
}
