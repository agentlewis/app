var test = require('tape');

var Service;

test("require module", function (t) {
  Service = require('../');
  t.ok(Service, "BaseService is required");
  t.ok(Service.prototype, "BaseService has prototype");
  t.end();
});

function createService (context, storage) {
  var service = new Service({
    httpConfig: {
      protocol: "http",
      hostname: "holodex.is",
      port: 80,
      prefix: "/api",
    },
    collection: "people",
    storage: storage,
    context: context,
  });
  return service;
}

test("simple get", function (t) {
  var calledGet = 0;
  var storage = {
    get: function (id, params, cb) {
      t.equal(id, "alice");
      t.deepEqual(params, {});
      calledGet += 1;

      return cb(null, {
        "people/alice": {
          "@id": "people/alice",
          name: "Alice",
        },
      });
    },
  };
  var context = {
    "@": "http://schema.org",
  };
  var service = createService(context, storage);

  t.ok(service, "service should be constructed");
  t.equal(typeof service.get, "function", "service should have get function");

  service.get("alice", {}, function (err, obj) {
    t.error(err, "no error");

    t.deepEqual(obj, {
      "@context": context,
      "@graph": [{
        "@id": "http://holodex.is/api/people/alice",
        name: "Alice",
      }],
    }, "service should return correct alice");
    t.equal(calledGet, 1, "called storage.get once");

    t.end();
  });
});

/*
test("simple find", function (t) {
  var calledFind = 0;
  var storage = {
    find: function (params, cb) {
      t.deepEqual(params, {});
      calledFind += 1;

      return cb(null, [{
        "@id": "alice",
        name: "Alice",
      }]);
    },
  };
  var context = {
    "@": "http://schema.org",
  };
  var service = createService(context, storage);

  t.ok(service, "service should be constructed");
  t.equal(typeof service.find, "function", "service should have find function");

  service.find({}, function (err, obj) {
    t.error(err, "no error");

    t.deepEqual(obj, {
      "@context": context,
      "@graph": [{
        "@id": "http://craftodex.is/api/people/alice",
        name: "Alice",
      }],
    }, "service should return correct people");
    t.equal(calledFind, 1, "called storage.find once");

    t.end();
  });
});
*/
