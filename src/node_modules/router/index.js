var config = require('clientconfig');
var extend = require('xtend');
var Path = require('path');
var pathMatch = require('path-match')();
var reverend = require('reverend');
var querystring = require('querystring');
var debug = require('debug')("router");

function Router (config) {
  this.config = config;

  if (process.browser) {
    var Location = require('observ-location');
    this.location = Location(config);
  }

  this.path = ":collection?/:id?/:relation?";
  this.pathToRoute = pathMatch(this.path);
  this.routeToPath = function (route) {
    return reverend(this.path, route)
  };
}

Router.prototype.parse = function (path) {
  path = path || "";

  debug("parse(", path, ")");

  // split path into pathname and search
  var pathSplit = path.split('?');
  var pathname = pathSplit[0] || "/";
  var search = pathSplit[1] || "";

  // remove prefix from pathname
  pathname = pathname.replace(this.config.prefix || "/", "");
  
  // parse path into route
  var route = extend({
    collection: null,
    id: null,
    relation: null,
  }, this.pathToRoute(pathname));

  // default / to to /groups/0
  if (!route.collection && !route.id) {
    route.collection = "groups";
    route.id = "0";
  }
  
  // parse search into query
  route.query = querystring.parse(search);

  debug("route() ->", route);
  return route;
}

Router.prototype.format = function (route) {
  route = route || {};

  debug("format(", route, ")");

  // format route into pathname
  var pathname = this.routeToPath(route);

  // add prefix to path
  pathname = Path.join(this.config.pathname || "/", pathname);

  // parse query into search
  var search = querystring.stringify(route.query || {});

  // join pathname and search into path
  var path = pathname + "?" + search

  debug("format() ->", path);
  return path;
}

module.exports = new Router(config);
