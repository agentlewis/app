var Path = require('path')
var camelCase = require('camel-case')
var Url = require('url')
var debug = require('debug')('holodex:base:service')
var _ = require('lodash')

var config = require('config')
var fsSync = require('fs-sync')

module.exports = function (collection) {

  return {
    find: function _BaseService_find (params, cb) {
      //debug("find(", params, ")")

      var ret = {
        '@graph': collection.toJSON(),
      }

      //debug("find() ->", ret)
      return cb(null, ret)
    },

    get: function _BaseService_get (id, params, cb) {
      //debug("get(", id, params, ")");
      
      var model = collection.get(id)
      var graph = []

      traverse(model, [], function (node) {
        if (node && node.isState) {
          console.log("state", node.toJSON())
          graph.push(node.toJSON())
        }
      })

      var ret = {
        '@graph': graph,
      }

      //debug("get() ->", ret)
      return cb(null, ret)
    },
    create: function () {
    },
    update: function () {
    },
    patch: function () {
    },
    remove: function () {
    },
  }
}

function traverse (obj, sofar, cb) {
  if (!obj || _.contains(sofar, obj)) return
  var sofar = sofar.concat([obj])

  if (obj.isState) {
    debug("traverse model", obj.modelType, obj.toJSON())
    var model = obj
    
    cb(model)

    var keys = []
      .concat(Object.keys(model.constructor.prototype._definition || {}))
      .concat(Object.keys(model.constructor.prototype._collections || {}))
      .concat(Object.keys(model.constructor.prototype._children || {}))

    keys.forEach(function (key) {
      traverse(model[key], sofar, cb)
    })

  } else if (obj.isCollection) {
    debug("traverse collection", obj.collectionType, obj.toJSON())
    var collection = obj

    collection.models.forEach(function (model) {
      traverse(model, sofar, cb)
    })
  }
}
