var urlRe = require('url-regex')({ exact: true });
var debug = require('debug')("holodex:base:model:data-types:link");

var registry = require('registry')

module.exports = {
  isLink: function (val) {
    debug("isLink", val)
    return urlRe.test(val)
  },
  isLinkObj: function (val) {
    debug("isLinkObj", val)
    return (
      typeof val === 'object' &&
      Object.keys(val).length === 1 &&
      typeof val['@id'] === 'string' &&
      this.isLink(val['@id'])
    )
  },
  isInstance: function (val) {
    debug("isInstance", val)
    return (
      (val && val.isState) &&
      this.isLink(val.getId())
    )
  },
  set: function (newVal) {
    debug("set", newVal);
    
    if (this.isInstance(newVal)) {
      val = newVal.getId()
    } else if (this.isLinkObj(newVal)) {
      val = newVal['@id']
    } else if (this.isLink(newVal)) {
      val = newVal
    } else {
      return {
        val: newVal,
        type: typeof newVal,
      }
    }
    return {
      val: val,
      type: 'link',
    }
  },
  get: function (val) {
    //debug("dataTypes.link.get(", val, ")");
    var ret = registry.get(val);
    //debug("dataTypes.link.get() ->", ret);
    return ret;
  },
  compare: function (currentVal, newVal, attributeName) {
    //debug("dataTypes.link.compare", currentVal, newVal, attributeName);
    return currentVal === newVal;
  },
}
