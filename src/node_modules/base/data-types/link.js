var Url = require('url')
var Path = require('path')
var extend = require('xtend')
var debug = require('debug')('holodex:base:data-types:link')
var config = require('config')

var urlDataType = require('./url')

module.exports = {
  isLink: function (val) {
//     debug('isLink', val)
    return urlDataType.isUrl(val)
  },
  isLinkObj: function (val) {
//     debug('isLinkObj', val)
    return (
      typeof val === 'object' &&
      Object.keys(val).length === 1 &&
      typeof val['@id'] === 'string'
    )
  },
  isInstance: function (val) {
//     debug('isInstance', val)
    return (
      (val && val.isState) &&
      this.isLink(val.getId())
    )
  },
  prefixLink: function (val) {
//     debug('prefixLink', val, config.api)
    return Url.format(extend(config.api.url, {
      pathname: Path.join(config.api.url.pathname, val)
    }))
  },
  set: function (newVal) {
//     debug('set', newVal)

    if (this.isInstance(newVal)) {
      newVal = newVal.getId()
    } else if (this.isLinkObj(newVal)) {
      newVal = newVal['@id']
    }

    var val
    if (this.isLink(newVal)) {
      val = newVal
    } else if (typeof newVal === 'string') {
      val = this.prefixLink(newVal)
    } else {
      return {
        val: newVal,
        type: typeof newVal
      }
    }
    return {
      val: val,
      type: 'link'
    }
  },
  get: function (val) {
    var store = require('base/store')
    var ret = store.findById(val)
//     debug('dataTypes.link.get(', val, ') ->', ret)
    return ret
  },
  compare: function (currentVal, newVal, attributeName) {
    // debug("dataTypes.link.compare", currentVal, newVal, attributeName)
    return currentVal === newVal
  }
}
