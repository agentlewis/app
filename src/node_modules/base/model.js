var Url = require('url')
var config = require('config')
var Base = require('ampersand-state')
var urlDataType = require('./data-types/url')
var linkDataType = require('./data-types/link')
var extend = require('lodash').extend
var debug = require('debug')("holodex:base:model")

var Model = Base.extend({

  idAttribute: "@id",
  typeAttribute: "typeName",
  namespaceAttribute: "namespace",

  extraProperties: 'ignore',

  initialize: function () {
    // on model changing id, ensure it is url
    this.on('change:' + this.idAttribute, this.ensureFullId, this)
    this.ensureFullId()

    // save model to store(s)
    this.save()
  },

  props: {
    "@id": "string",
    "@type": "string",
  },

  dataTypes: {
    url: urlDataType,
    link: linkDataType
  },

  save: function () {
    var store = require('./store')

    var isNew = !!this.$loki
    if (isNew) {
      store.update(this)
    } else {
      store.insert(this)
    }

    this.typeIter(function (type) {
      if (!type.store) { return }

      if (isNew) {
        // TODO won't work if id has changed
        var obj = type.store.findById(this.getId())
        extend(obj, this.serialize())
        type.store.update(obj)
      } else {
        type.store.insert(this.serialize())
      }
    }.bind(this))
  },

  typeIter: function (cb) {
    var types = require('types')
    var Model = this.constructor
    var type
    while (Model != null) {
      type = types[Model.prototype.getType()]
      if (!type) { return }
      cb(type)
      Model = Model.__super__.constructor
    }
  },

  ensureFullId: function () {
    var id = this.getId()
    if (id && !linkDataType.isLink(id)) {
      var newId = linkDataType.prefixLink(id)
      debug("prefixing id", id, newId)
      this[this.idAttribute] = newId
    }
  },

  derived: {
    id: {
      deps: ["@id"],
      fn: function () {
        var id = this.getId()
        var api = Url.format(config.api)

        if (!id) {
          return null
        }

        var subId = id.substring(0, api.length)
        if (id.substring(0, api.length) === api) {
          return id.substring(api.length)
        } else {
          return id
        }
      },
    },
  },

  url: function () {
    var id = this.getId()
    var api = Url.format(config.api)

    var url = null
    if (urlDataType.isUrl(id)) {
      url = id
    } else if (id) {
      url = api + "/" + id
    }

    debug("url() ->", url, this)
    return url
  },
})

extend(Model, {
  'new': function (attrs, options) {
    var typeName = attrs['@type']
    var types = require('types')
    var type = types[typeName]
    var TypeModel = type.Model
    return new TypeModel(attrs, options)
  },
})

module.exports = Model
