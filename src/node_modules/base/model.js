var Url = require('url')
var config = require('config')
var ObservModel = require('observ-model')
var debug = require('debug')("holodex:base:model")

var BaseModel = ObservModel({
  idAttribute: '@id',
  typeAttribute: '@type',
})

function RoleTypeModel (context, mixins) {

  var baseModel = BaseModel(context)

  baseModel.set("$name", Observ())

  var roleType = ObservStruct({
    $name: Observ(),
    $pluralName: Observ(),
    $label: Observ(),
  })

  roleType._type = "Base"

  return roleType
}


/*
var urlRe = require('url-regex')({ exact: true })

var registry = require('registry')
var urlDataType = require('./data-types/url')
var linkDataType = require('./data-types/link')

var types = require('types')

module.exports = Base.extend({

  idAttribute: "@id",
  typeAttribute: "typeName",
  namespaceAttribute: "namespace",

  typeName: "Base",
  pluralName: "bases",

  extraProperties: 'ignore',

  'new': function (attrs, options) {
    return new this.prototype.constructor(attrs, options)
  },

  initialize: function () {
    var typeName = this.getType()
    var typeStore = types[typeName].store

    // on model initialize, add model to store
    debug("adding", this.getId(), "to", typeName, "store")
    typeStore.insert(this)

    // on model destroy, remove model from store
    this.on('destroy', function() {
      debug("removing", this.getId(), "from", typeName, "store")
      typeStore.remove(this)
    }, this)

    // on model changing id, ensure it is url
    this.on('change:' + this.idAttribute, this.ensureFullId, this)
    this.ensureFullId()
  },

  props: {
    "@id": "string",
    "@type": "string",
  },

  ensureFullId: function () {
    var id = this.getId()
    if (id && !linkDataType.isLink(id)) {
      var newId = linkDataType.prefixLink(id)
      debug("prefixing id", id, newId)
      this[this.idAttribute] = newId
    }
  },

  derived: {
    id: {
      deps: ["@id"],
      fn: function () {
        var id = this.getId()
        var api = Url.format(config.api)

        if (!id) {
          return null
        }

        var subId = id.substring(0, api.length)
        if (id.substring(0, api.length) === api) {
          return id.substring(api.length)
        } else {
          return id
        }
      },
    },
  },

  url: function () {
    var id = this.getId()
    var api = Url.format(config.api)

    var url = null
    if (urlRe.test(id)) {
      url = id
    } else if (id) {
      url = api + "/" + id
    }

    debug("url() ->", url, this)
    return url
  },
})
*/
