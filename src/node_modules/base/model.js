var Url = require('url')
var config = require('config')
var Base = require('ampersand-state')
var urlDataType = require('./data-types/url')
var linkDataType = require('./data-types/link')
var debug = require('debug')("holodex:base:model")

var store = require('./store')

module.exports = Base.extend({

  idAttribute: "@id",
  typeAttribute: "typeName",
  namespaceAttribute: "namespace",

  typeName: "Base",
  pluralName: "bases",

  extraProperties: 'ignore',

  initialize: function () {
    // on model initialize, add model to store
    debug("adding", this.getId(), "to", this.typeName, "store")
    store.add(this)

    // on model changing id, ensure it is url
    this.on('change:' + this.idAttribute, this.ensureFullId, this)
    this.ensureFullId()
  },

  props: {
    "@id": "string",
    "@type": "string",
  },

  ensureFullId: function () {
    var id = this.getId()
    if (id && !linkDataType.isLink(id)) {
      var newId = linkDataType.prefixLink(id)
      debug("prefixing id", id, newId)
      this[this.idAttribute] = newId
    }
  },

  derived: {
    id: {
      deps: ["@id"],
      fn: function () {
        var id = this.getId()
        var api = Url.format(config.api)

        if (!id) {
          return null
        }

        var subId = id.substring(0, api.length)
        if (id.substring(0, api.length) === api) {
          return id.substring(api.length)
        } else {
          return id
        }
      },
    },
  },

  url: function () {
    var id = this.getId()
    var api = Url.format(config.api)

    var url = null
    if (urlDataType.isUrl(id)) {
      url = id
    } else if (id) {
      url = api + "/" + id
    }

    debug("url() ->", url, this)
    return url
  },
})
