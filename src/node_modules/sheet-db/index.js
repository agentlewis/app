var levelup = require('levelup')
var Token = require('google-oauth-jwt-stream').Token
var RowDown = require('sheet-down').RowDOWN
var through = require('through2')
var forEach = require('lodash.foreach')
var assign = require('lodash.assign')
var map = require('lodash.map')
var mapValues = require('lodash.mapvalues')
var types = require('types')
var uuid = require('node-uuid')
var Url = require('url')
var series = require('async-series')

var config = require('config')
var worksheets = config.data.worksheets
var store = require('base/store')

getGraph()

function getGraph () {
  var graph = mapValues(types, function () { return [] })
  var steps = map(worksheets, function (worksheet, collectionName) {
    return getCollection({
      worksheet: worksheet,
      collectionName: collectionName,
      graph: graph
    })
  })
  series(steps, function (err) { 
    if (err) { throw err }
    console.log("graph", graph)
  })
}

function getCollection (opts) {
  return function (cb) {
    getSheet(assign({}, config.data, {
      worksheet: opts.worksheet
    }))
    .createReadStream()
    .pipe(typify(opts.collectionName, opts.graph))
    .on('end', cb)
    .on('error', cb)
    .resume()
  }
}

function getSheet (opts) {
  var token = new Token(opts.email, opts.key, opts.scopes)
  var sheetPath = opts.spreadsheet + '/' + opts.worksheet
  return levelup(sheetPath, new RowDown({ token: token}))
}

function typify (collectionName, graph) {
  var type = types.indexedByCollection[collectionName]
  var Model = type.Model

  // hard-coded parsers for types of data
  // TODO fix HACK
  var parsers = {
    Role: function parseRole (attrs) {
      return {
        id: 'roles/' + uuid(),
        type: 'roleTypes/' + attrs.role,
        agent: 'people/' + attrs.agent
      }
    },
    RoleType: function parseRoleType (attrs) {
      return assign(attrs, {
        relationshipType: 'relationshipTypes/' + attrs.relationshipType
      })
    },
    LinkType: function parseLinkType (attrs) {
      return assign(attrs, {
        relationshipType: 'relationshipTypes/' + attrs.relationshipType,
        source: 'roleTypes/' + attrs.source,
        target: 'roleTypes/' + attrs.target
      })
    },
    Relationship: function parseRelationship (attrs) {
      var apiUrl = Url.format(config.api)
      var linkType = store.findById(apiUrl + '/linkTypes/' + attrs.link)

      var relId = 'relationships/' + uuid()

      var sourceRole = Model.new({
        '@id': uuid(),
        '@type': 'Role',
        type: linkType.source.getId(),
        agent: findAgent(attrs.source).getId(),
        relationship: relId
      })
      var targetRole = Model.new({
        '@id': uuid(),
        '@type': 'Role',
        type: linkType.target.getId(),
        agent: findAgent(attrs.target).getId(),
        relationship: relId
      })

      graph.Role.push(sourceRole, targetRole)

      return {
        id: uuid(),
        type: linkType.relationshipType.getId(),
      }
    }
  }

  return through.obj(function (row, enc, cb) {

    var type = Model.prototype.getType()
    var attrs = row.value

    if (parsers[type]) {
      attrs = parsers[type](attrs)
    }

    // rename idAttribute to '@id'
    attrs['@id'] = collectionName + '/' + attrs.id
    delete attrs.id

    // add '@type' attribute
    attrs['@type'] = type

    var model = Model.new(attrs)

    model.save()
    
    graph[type].push(model)
    
    cb(null, model)
  })
}

function print () {
  return through.obj(function (model, enc, cb) {
    console.log(model.toJSON())
    cb()
  })
}

function findAgent (id) {
  var apiUrl = Url.format(config.api)
  return store.findById(apiUrl + '/people/' + id) ||
    store.findById(apiUrl + '/groups/' + id)
}
