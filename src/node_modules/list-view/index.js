var React = require('react')
var ListGroup = require('react-bootstrap/ListGroup')
var ListGroupItem = require('react-bootstrap/ListGroupItem')
var r = require('r-dom')
var map = require('lodash.map')
var indexOf = require('lodash.indexof')
var urlRe = require('url-regex')();
var split = require('smart-split')
var debug = require('debug')('holodex:ui:list-view')

var Link = require('base/views/link')
var store = require('base/store')
var router = require('router')

var style = require('./style')

module.exports = React.createClass({

  render: function () {
        
    var agent = this.props.model;

    debug('agent', agent)

    var content = map(agent.relsByType, function (rels, relTypeId) {

      var relType = store.findById(relTypeId)

      debug('relType', relType.toJSON(), "rels", rels.map(function (rel) { return rel.toJSON() }))

      return (
        r.section({
          className: "relationships"
        }, [
          r.header(relType.pluralName + ':'),
          r(ListGroup, {
            className: relType.pluralName
          }, rels.map(function (rel) {
            debug("rel", rel.toJSON())
            debug("rel.labelOf", rel.labelOf(agent))

            //
            // TODO move into a helper function
            //
            var labelString = rel.labelOf(agent)
            var labelAgentIds = labelString.match(urlRe)
              // necessary to get rid of extra whitespace
              .map(function (s) { return s.trim() })
            var labelElements = split(
              labelString,
              new RegExp('(' + labelAgentIds.join('|') + ')')
            )
            // for each agent in label
            labelAgentIds.forEach(function (labelAgentId) {
              // replace agent id with name and link
              //
              var index = indexOf(labelElements, labelAgentId)
              var labelAgent = store.findById(labelAgentId)

              labelElements[index] = (
                r(Link, {
                  href: router.format({ id: labelAgent.id })
                }, [
                  r.img({
                    className: 'media',
                    style: style.listItemImage,
                    src: labelAgent.image
                  }),
                  r.span({
                    style: style.listItemText
                  }, labelAgent.name)
                ])
              )
            })

            return (
              r(ListGroupItem, {
                className: relType.name,
                key: rel.getId(),
                style: style.listItem,
              }, labelElements)
            )
          }))
        ])
      )
    })

    return r.div({}, content)
  },
})
