var Reflux = require('reflux')
var Actions = require('actions')
var Cola = require('graph-view/webcola-adaptor')()
var vars = require('ui/vars')

var debug  = require('debug')('stores:cola-store')

debug('Actions', Actions)
function ensurePostioning (model, nodes) {
  if (model['@type'] === 'Group' && model.parentGroups.length > 0) {
    return nodes.reduce(function (memo, node) {
      if (model.parentGroups[0].getId() === node.id) { node.y = 0 } //assumes 1 parent
      memo.push(node)
      return memo
    }, [])
  }
  else {
    return nodes
  }
}

var colaStore = Reflux.createStore({

  listenables: Actions,

  init: function () {
    this.modelId = null
    this.colaBusy = false
    this.nodes = []
    this.links = []
    this.cola = Cola
      .size([vars.graphSize.width, vars.graphSize.height])
      .avoidOverlaps(true)
      .linkDistance(function (l) {
        if (l.length) { return l.length }
        else { return vars.graphSize.defaultLength }
      })
      .convergenceThreshold(1e-4)
  },

  //handles logic for updating graph
  onAddNodesAndLinks: function (payload) {
    debug('onAddNodesAndLinks', payload, this)
    if (!this.modelId) {
      this.modelId = payload.modelId
      this.model = payload.model
      this.computePositions(payload, this.setGraph)
      this.updateView()
    }
    else if (this.modelId !== payload.modelId) {
      debug('new model')
      this.modelId = payload.modelId
      this.model = payload.model
      this.computePositions(payload, this.startAnimation)
    }
  },

  setGraph: function (graph) {
    this.nodes = graph.nodes,
    this.links = graph.links
  },

  updateView: function () {
    debug('updateView')
    this.trigger({
      nodes: this.nodes,
      links: this.links
    })
  },

  startAnimation: function (payload) {
    this.animateGraph({
      oldNodes: this.nodes,
      currentLinks: payload.links,
      currentNodes: ensurePostioning(this.model, payload.nodes)
    }, this.animationTick, this.animationEnd)
  },


  computePositions: function (payload, callback) {
    debug('computing positions', payload)
    this.colaBusy = true
    this.cola.nodes(payload.nodesAndLinks[0]).links(payload.nodesAndLinks[1])
    this.cola.start(10, 15, 20)
    this.cola.stop()
    this.colaBusy = false
    callback({
      nodes: ensurePostioning(payload.model, this.cola.nodes()),
      links: this.cola.links()
    })
  },

  animateGraph: require('animate/animate-graph'),

  animationTick: function (graph) {
    this.links = graph.links ? graph.links : this.links
    this.nodes = graph.nodes ? graph.nodes : this.nodes
    this.updateView()
  },

  animationEnd: function (graph) {
    debug('animationEnd', graph)
    this.links = graph.links ? graph.links : this.links
    this.nodes = graph.nodes ? graph.nodes : this.nodes
    this.updateView()
  },

  getNodes: function () {
    return this.nodes
  },

  getLinks: function () {
    return this.links
  },


})

module.exports = colaStore
