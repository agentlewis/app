var Reflux = require('reflux')
var Actions = require('actions')
var vars = require('ui/vars')
var m = require('minimal-immutable')
var each = require('lodash.foreach')
var clone = require('lodash.clone')

var debug  = require('debug')('stores:filters-store')

var filtersStore = Reflux.createStore({

  listenables: Actions,

  init: function () {
    this.modelId = null,
    this.filtersByType = m.fromJS({ targetAgent: [], context:[] })
  },

  //handles logic for updating graph
  onUpdateFilters: function (model) {
    debug('onUpdateFilters', model)
    var candidate = m.fromJS(model.filtersByType)
    if (!m.equals(this.filtersByType, candidate)) { //filtersByType has changed
      if (!this.modelId || this.modelId !== model.getId) {
        this.modelId = model.getId()
        this.model = model
        this.filtersByType = m.fromJS(model.filtersByType)
        this.updateListeners()
      }
    }

  },

  onUpdateTag: function (payload) {
    debug('onUpdateTag', payload)
    if (payload.type === 'AgentType') {
      this.removeAgentTypeTag(payload)
    }
  },

  removeAgentTypeTag: function (payload) {
    var filtersByType = m.toJS(this.filtersByType)
    var updatedFilters = filtersByType.targetAgent.map(function (filter) {
      if (filter.agentType.id === payload.filter.agentType.id) {
        var updatedFilter = clone(filter)
        updatedFilter.agentType.active = false
        return updatedFilter
      }
      else { return filter}
    })
    filtersByType.targetAgent = updatedFilters
    this.filtersByType = m.fromJS(filtersByType)
    this.updateListeners()
    debug('targetFilters', targetFilters)
  },

  getFiltersByType: function () {
    return m.toJS(this.filtersByType)
  },

  updateListeners: function () {
    debug('updateListeners')
    this.trigger({
      model: this.model,
      filtersByType: m.toJS(this.filtersByType)
    })
  },



})

module.exports = filtersStore
