var Reflux = require('reflux')
var Actions = require('actions')
var vars = require('ui/vars')
var m = require('minimal-immutable')
var each = require('lodash.foreach')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isEqual = require('lodash.isequal')
var dot = require('dot-object')
var qs = require('qs')
var traverse = require('traverse')
var Url = require('url')
var find = require('lodash.find')
var parseQuerytoMap = require('graph-view/parse-query-to-map')
var getDefaultQueryMap = require('graph-view/get-default-query-map')
var getQueries = require('graph-view/get-queries')


var config = require('config')
var router = require('router')
var prefix = Url.format(config.api)

//DEFAULTS
var member = prefix + '/roleTypes/member'
var subgroup = prefix + '/roleTypes/subgroup'
var subgroupLink = subgroup + '/link'

var debug  = require('debug')('stores:route-store')

var routeStore = Reflux.createStore({

  listenables: Actions,

  init: function () {
    this.route = null
    this.mode = null
    this.search = null
    this.queryStub = null
    this.queries = null
  },

  onModelUpdate: function (payload) {
    var queryMap
    if (payload.route.search === '') {
      this.queryStub = getDefaultQueryMap(payload.model)
    }
    else {
      this.queryStub = parseQuerytoMap(payload.route.query)
    }
    this.model = payload.model
    this.route = payload.route
    this.queries = getQueries(payload.model, this.queryStub)
    this.trigger({ model: payload.model, queries: this.queries })
  },

  onRouteChange: function (payload) {
    debug('onRouteChange', payload)

    if (!this.model || '/' + payload.route.collection + '/' + payload.route.id !== this.model.id) {
      debug('new Model')
      //new model -> redraw
      //TODO transition queryMap (common links)

      if (payload.route.search === '') {
        this.queryStub = getDefaultQueryMap(payload.model)
      }
      else {
        this.queryStub = parseQuerytoMap(payload.route.query)
      }


      this.route = payload.route
      this.queries = getQueries(payload.model, this.queryStub)
      debug('queries', this.queries)
      this.model = payload.model
      this.search = payload.route.search
      this.trigger({ model: payload.model, queries: this.queries })
    }
    else {
      debug('same model', payload)

      var nextQueryStub = parseQuerytoMap(payload.route.query)
      this.queries = getQueries(payload.model, nextQueryStub)


      if (false) {
        debug('halo have updated')
        this.trigger({ model: payload.model, queries: this.queries, holdPositions: true })
        this.queryStub = nextQueryStub
        this.route = payload.route
        this.model = payload.model
      }
      else {

        debug('same model, different layout -> redraw', nextQueryStub)
        //same model different layout -> redraw
        this.trigger({ model: this.model, queries: this.queries })
        this.queryStub = nextQueryStub
        this.route = payload.route
        this.model = payload.model

      }
    }
  },

  updateQuery: function (route) {
    this.query = route.query
  },

  onSelectLabel: function (payload) {
    debug('onSelectLabel', payload)
    if (payload.queryId) {
      this.addQuery(payload)
    }
  },

  onCancelTag: function (payload) {
    if (payload.queryId) {
      this.removeQuery(payload)
    }

    debug('onCancelTag', payload)
  },

  addQuery: function (label) {
    var route = clone(this.route)
    var queryStub = clone(this.queryStub, true)
    var queryIdPath = label.queryId.split('.')

    debug(label, route, queryStub, queryIdPath)
    var qry = { link: queryIdPath[0] }
    if (queryIdPath[1] === 'src') { qry.src = queryIdPath[2] }
    if (queryIdPath[1] === 'tgt') { qry.tgt = queryIdPath[2] }
    if (queryIdPath[1] === 'ctx') { qry.ctx = queryIdPath[2] }
    if (label.type === 'LinkLabel') { qry.showLink = true }
    else if (this.queries.active && this.queries.active.length > 1) {
      debug('true condition')
      // if (route.query.q.length > 1) {
        // || (route.query.q.length === 1
        //   && !dot.pick('/linkTypes/is-part-of.sources.' + this.model.id, queryStub))) {
            qry.showHalo = true
      // }
    }

    dot.str(label.queryId, qry, queryStub)
    route.query = this.makeQueries(queryStub)
    debug('qry', qry)
    //trigger route navigate in ui
    this.trigger({ model: this.model, route: route, label: label })
  },

  makeQueries: function (queryStub) {
    var query =  { q: [] }
    keys(queryStub).forEach(function (queryId) {
      query.q.push(queryStub[queryId])
    })
    return query
  },

  removeQuery: function (query) {
    var route = clone(this.route)
    var queryStub = clone(this.queryStub, true)
    delete queryStub[query.queryId]
    route.query = this.makeQueries(queryStub)
    //trgger route navigate in ui
    this.trigger({ model: this.model, route: route })
  }
})

module.exports = routeStore
