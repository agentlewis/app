var Reflux = require('reflux')
var Actions = require('actions')
var vars = require('ui/vars')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var Url = require('url')
var parseQuerytoMap = require('graph-view/parse-query-to-map')
var getDefaultQueryMap = require('graph-view/get-default-query-map')
var getQueries = require('graph-view/get-queries')
var formatGraphAndQuery = require('graph-view/format-graph-and-query')
var connectNodesToLinks = require('graph-view/connect-nodes-to-links')
var isEqual = require('lodash.isequal')

var config = require('config')
var prefix = Url.format(config.api.url)

var debug = require('debug')('stores:route-store')

var routeStore = Reflux.createStore({

  listenables: Actions,

  init: function () {
    this.centerCoords = [vars.graphSize.width / 2, vars.graphSize.height / 2]
    this.width = vars.graphSize.width
    this.height = vars.graphSize.height
    this.nodes = []
    this.links = []
    this.route = { query: {} }
    this.model = null
    this.search = null
    this.queryStub = null
    this.queries = null
    this.vector = [0, 0, 1]
  },

  onSetWindowSize: function (payload) {
    debug('onSetWindowSize', payload)
    this.width = payload.width
    this.height = payload.height
    this.centerCoords = [this.width / 2, this.height / 2]
    this.trigger({
      height: this.height,
      width: this.width,
      centerCoords: this.centerCoords
    })
  },

  onModelUpdate: function (payload) {
    debug('onModelUpdate')
    this.updateGraph(payload)
  },



  onRouteChange: function (payload) {
    debug('onRouteChange', payload, this.route)

    if (this.model && this.model.id !== payload.model.id) {
      if (!payload.query) { payload.query = {} }
      payload.query.v = [0, 0]
      this.updateGraph(payload)
    } else if (!this.queryStub ||
      // !this.route.query.q ||
      !isEqual(this.route.query.q, payload.route.query.q)) {
      this.updateGraph(payload)
    } else if (!isEqual(this.route.query.v, payload.route.query.v)) {
      debug('updating route', this.route, payload.route)
      this.route = payload.route
    }

  },

  onDragEnd: function (payload) {
    debug('onDragEnd', payload)
    this.setRoute(payload)
  },

  onZoomEnd: function (payload) {
    debug('onZoomEnd')
    this.setRoute(payload)
  },

  onToggleShowLink: function (payload) {
    debug('onToggleShowLink', payload)
    var route = clone(this.route, true)
    var queryStub = clone(this.queryStub, true)
    if (payload.showLink) {
      queryStub[payload.queryId].showLink = true
    } else {
      delete queryStub[payload.queryId].showLink
    }


    route.query.q = this.makeQueries(queryStub)

    // trigger route navigate in ui
    this.trigger({ model: this.model, route: route })

    debug(route, queryStub)
  },

  deStringVector: function (vector) {
    return vector.map(function (coord, i) {
      if (i < 2) {
        return parseInt(coord, 10)
      } else { return parseFloat(coord) }
    })
  },

  setRoute: function (payload) {
    var route = clone(this.route, true)
    route.query.v = this.deStringVector(payload.vector)

    // reset route
    this.trigger({ model: this.model, route: route })
  },

  updateGraph: function (payload) {
    debug('updateGraph', payload, this.route)
    var queries
    var graphData

    if (!payload.route.query.q) {
      this.queryStub = getDefaultQueryMap(payload.model)
    } else {
      this.queryStub = parseQuerytoMap(payload.route.query)
    }

    queries = getQueries(payload.model, clone(this.queryStub), true)
    debug('queryStub', this.queryStub)
    debug('initial centerCoords', queries, this.centerCoords)
    graphData = formatGraphAndQuery(payload.model, queries, this.centerCoords)
    debug('graphData', graphData)
    debug('1', payload.model, this.model)
    debug('hqc', graphData[3], this.hiddenQueriesCount)

    var staticUpdate = (
      (this.model && this.model.id === payload.model.id) &&
      graphData[3] !== this.hiddenQueriesCount &&
      graphData[0].length === this.nodes.length
    )
    debug('staticUpdate', staticUpdate)
    this.nodes = graphData[0]
    this.links = connectNodesToLinks(this.nodes, graphData[1])
    this.queries = graphData[2]
    this.hiddenQueriesCount = graphData[3]
    this.route = payload.route
    this.search = payload.route.search
    this.vector = (payload.route && payload.route.query && payload.route.query.v) ?
      this.deStringVector(payload.route.query.v) : this.vector
    debug('vector', this.vector)
    this.model = payload.model

    this.trigger({
      model: payload.model,
      queries: this.queries,
      nodes: this.nodes,
      links: this.links,
      staticUpdate: staticUpdate,
      vector: this.vector
    })
  },

  updateQuery: function (route) {
    this.query = route.query
  },

  onSelectLabel: function (payload) {
    debug('onSelectLabel', payload)
    if (payload.queryId) {
      this.addQuery(payload)
    }
  },

  onCancelTag: function (payload) {
    debug('onCancelTag', payload, this.route)
    if (payload.queryId) { this.removeQuery(payload) }
  },

  addQuery: function (label) {
    var route = clone(this.route, true)
    var queryStub = clone(this.queryStub, true)
    var queryIdPath = label.queryId.split('.')

    debug(label, route, queryStub, queryIdPath)
    var qry = { link: queryIdPath[0] }
    if (queryIdPath[1] === 'src') { qry.src = queryIdPath[2] }
    if (queryIdPath[1] === 'tgt') { qry.tgt = queryIdPath[2] }
    if (queryIdPath[1] === 'ctx') {
      qry.ctx = queryIdPath[2]
      qry.showLink = true // context queries show links by default
    }
    if (this.model['@type'] === 'Person') {
      qry.showLink = true // 
    }
    queryStub[label.queryId] = qry

    route.query.q = this.makeQueries(queryStub)
    debug('addQuery', route)
    // trigger route navigate in ui
    this.trigger({ model: this.model, route: route })
  },

  makeQueries: function (queryStub) {
    var q = []
    keys(queryStub).forEach(function (queryId) {
      debug('makeQueries', queryStub[queryId])
      q.push(queryStub[queryId])
    })
    return q
  },

  removeQuery: function (query) {
    debug('removeQuery', query)
    var route = clone(this.route, true)
    debug('routes', route, this.route)
    var queryStub = clone(this.queryStub, true)
    delete queryStub[query.queryId]
    route.query.q = this.makeQueries(queryStub)
    debug('removeQuery', route.query.q, this.route.query.q)

    // trgger route navigate in ui
    this.trigger({ model: this.model, route: route })
  },

  getVector: function () {
    return this.vector
  }
})

module.exports = routeStore
