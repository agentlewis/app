var Reflux = require('reflux')
var Actions = require('actions')
var vars = require('ui/vars')
var m = require('minimal-immutable')
var each = require('lodash.foreach')
var clone = require('lodash.clone')
var keys = require('lodash.keys')
var isEqual = require('lodash.isequal')
var dot = require('dot-object')
var qs = require('qs')
var traverse = require('traverse')
var Url = require('url')
var find = require('lodash.find')
var parseQuerytoMap = require('graph-view/parse-query-to-map')
var getDefaultQueryMap = require('graph-view/get-default-query-map')
var getQueries = require('graph-view/get-queries')


var config = require('config')
var router = require('router')
var prefix = Url.format(config.api)

//DEFAULTS
var member = prefix + '/roleTypes/member'
var subgroup = prefix + '/roleTypes/subgroup'
var subgroupLink = subgroup + '/link'

var debug  = require('debug')('stores:route-store')

function hasSameKeys (obj0, obj1) {
  var keys0 = keys(obj0)
  var keys1 = keys(obj1)
  if (keys0.length !== keys1.length) { return false }
  return keys0.every(function (key0) {
    if (!obj1[key0]) { return false }
    return true
  })
}

function graphIsEqual (nextQueryMap, queryMap) {
  if (!hasSameKeys(nextQueryMap, queryMap)) { return false }
  else {
    return keys(nextQueryMap).every(function (key) {
      return hasSameKeys(nextQueryMap[key], queryMap[key])
    })
  }
}

var routeStore = Reflux.createStore({

  listenables: Actions,

  init: function () {
    this.route = null
    this.mode = null
    this.search = null
    this.queryStub = null
    this.queries = null
  },

  onModelUpdate: function (payload) {
    var queryMap
    if (payload.route.search === '') {
      this.queryStub = getDefaultQueryMap(payload.model)
    }
    else {
      this.queryStub = parseQuerytoMap(payload.route.query)
    }
    this.model = payload.model
    this.route = payload.route
    this.queries = getQueries(payload.model, this.queryStub)
    this.trigger({ model: payload.model, queries: this.queries })
  },

  onRouteChange: function (payload) {
    debug('onRouteChange', payload)

    if (!this.model || '/' + payload.route.collection + '/' + payload.route.id !== this.model.id) {
      debug('new Model')
      //new model -> redraw
      //TODO transition queryMap (common links)

      if (payload.route.search === '') {
        this.queryStub = getDefaultQueryMap(payload.model)
      }
      else {
        this.queryStub = parseQuerytoMap(payload.route.query)
      }


      this.route = payload.route
      this.queries = getQueries(payload.model, this.queryStub)
      debug('queries', this.queries)
      this.model = payload.model
      this.search = payload.route.search
      this.trigger({ model: payload.model, queries: this.queries })
    }
    else {
      debug('same model', payload)



      if(payload.label && payload.label.type === 'LinkLabel') {
        debug('same model, different layout -> redraw')
        //same model different layout -> redraw
        var nextQueryStub = parseQuerytoMap(payload.route.query)
        this.route = payload.route
        this.queryStub = nextQueryStub
        this.queries = getQueries(payload.model, this.queryStub)
        debug('queries', this.queries)
        this.model = payload.model
        this.search = payload.route.search
        this.trigger({ model: payload.model, queries: this.queries })

      }
      else if (payload.query && payload.query.showHalo) {
        debug('same model, same layout, different visuals')
        //same model, same layout, different visuals

      }

    }




  },

  updateQuery: function (route) {
    this.query = route.query
  },

  onSelectLabel: function (payload) {
    debug('onSelectLabel', payload)
    if (payload.queryId) {
      this.addQuery(payload)
    }
  },

  onCancelTag: function (payload) {
    if (payload.queryId) {
      this.removeQuery(payload)
    }

    debug('onCancelTag', payload)
  },

  addQuery: function (label) {
    var route = clone(this.route)
    var queryStub = clone(this.queryStub, true)
    var queryIdPath = label.queryId.split('.')
    var qry = { link: queryIdPath[0] }
    if (queryIdPath[1] === 'sources') { qry.src = queryIdPath[2] }
    if (queryIdPath[1] === 'targets') { qry.tgt = queryIdPath[2] }
    if (queryIdPath[1] === 'contexts') { qry.ctx = queryIdPath[2] }
    if (label.type === 'LinkLabel') { qry.showLink = true }
    else if (route.query.q.length > 2
      || (route.query.q.length === 2
        && !dot.pick('/linkTypes/is-part-of.sources.' + this.model.id, queryStub))) {
          qry.showHalo = true
    }

    dot.str(label.queryId, qry, queryStub)
    route.query = this.makeQueries(queryStub)
    Actions.routeChange({ model: this.model, route: route, label: label })
  },

  makeQueries: function (queryStub) {
    var query =  { q: [] }
    keys(queryStub).forEach(function (x) {
      keys(queryStub[x]).forEach(function (y) {
        keys(queryStub[x][y]).forEach(function (z) {
          debug(queryStub[x][y][z])
          var qry = { link: x }
          if (y === 'sources') { qry.src = z }
          if (y === 'targets') { qry.tgt = z }
          if (y === 'contexts') { qry.ctx = z }
          if (queryStub[x][y][z].showLink) { qry.showLink = true }
          if (queryStub[x][y][z].showHalo) { qry.showHalo = true }
          query.q.push(qry)
        })
      })
    })
    return query
  },

  removeQuery: function (query) {
    var route = clone(this.route)
    var queryStub = clone(this.queryStub, true)
    var queryIdPath = query.queryId.split('.')
    delete queryStub[queryIdPath[0]][queryIdPath[1]][queryIdPath[2]]
    route.query = this.makeQueries(queryStub)
    Actions.routeChange({ model: this.model, route: route })
  }
})

module.exports = routeStore
